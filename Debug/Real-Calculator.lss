
Real-Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003ff4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000124  00800060  00003ff4  00004088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000005a  00800184  00800184  000041ac  2**0
                  ALLOC
  3 .stab         00002730  00000000  00000000  000041ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ed2  00000000  00000000  000068dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000200  00000000  00000000  000077ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000250  00000000  00000000  000079ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002b10  00000000  00000000  00007bfe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001782  00000000  00000000  0000a70e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000014b1  00000000  00000000  0000be90  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000220  00000000  00000000  0000d344  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000317  00000000  00000000  0000d564  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a92  00000000  00000000  0000d87b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e30d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ef       	ldi	r30, 0xF4	; 244
      68:	ff e3       	ldi	r31, 0x3F	; 63
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 38       	cpi	r26, 0x84	; 132
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e8       	ldi	r26, 0x84	; 132
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 3d       	cpi	r26, 0xDE	; 222
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 99 12 	call	0x2532	; 0x2532 <main>
      8a:	0c 94 f8 1f 	jmp	0x3ff0	; 0x3ff0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 13 05 	call	0xa26	; 0xa26 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 13 05 	call	0xa26	; 0xa26 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c1 1f 	jmp	0x3f82	; 0x3f82 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab e6       	ldi	r26, 0x6B	; 107
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 dd 1f 	jmp	0x3fba	; 0x3fba <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 cd 1f 	jmp	0x3f9a	; 0x3f9a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e9 1f 	jmp	0x3fd2	; 0x3fd2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 cd 1f 	jmp	0x3f9a	; 0x3f9a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e9 1f 	jmp	0x3fd2	; 0x3fd2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c1 1f 	jmp	0x3f82	; 0x3f82 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8b e6       	ldi	r24, 0x6B	; 107
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 dd 1f 	jmp	0x3fba	; 0x3fba <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c9 1f 	jmp	0x3f92	; 0x3f92 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6b e6       	ldi	r22, 0x6B	; 107
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 e5 1f 	jmp	0x3fca	; 0x3fca <__epilogue_restores__+0x10>

0000078a <__eqsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 cd 1f 	jmp	0x3f9a	; 0x3f9a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__eqsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__eqsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 7c 07 	call	0xef8	; 0xef8 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__eqsf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 e9 1f 	jmp	0x3fd2	; 0x3fd2 <__epilogue_restores__+0x18>

000007ea <__nesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 cd 1f 	jmp	0x3f9a	; 0x3f9a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__nesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__nesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 7c 07 	call	0xef8	; 0xef8 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__nesf2+0x58>
     840:	81 e0       	ldi	r24, 0x01	; 1
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 e9 1f 	jmp	0x3fd2	; 0x3fd2 <__epilogue_restores__+0x18>

0000084a <__gtsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 cd 1f 	jmp	0x3f9a	; 0x3f9a <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 7c 07 	call	0xef8	; 0xef8 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 e9 1f 	jmp	0x3fd2	; 0x3fd2 <__epilogue_restores__+0x18>

000008aa <__gesf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 cd 1f 	jmp	0x3f9a	; 0x3f9a <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__gesf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__gesf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 7c 07 	call	0xef8	; 0xef8 <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__gesf2+0x58>
     900:	8f ef       	ldi	r24, 0xFF	; 255
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 e9 1f 	jmp	0x3fd2	; 0x3fd2 <__epilogue_restores__+0x18>

0000090a <__ltsf2>:
     90a:	a8 e1       	ldi	r26, 0x18	; 24
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 cd 1f 	jmp	0x3f9a	; 0x3f9a <__prologue_saves__+0x18>
     916:	69 83       	std	Y+1, r22	; 0x01
     918:	7a 83       	std	Y+2, r23	; 0x02
     91a:	8b 83       	std	Y+3, r24	; 0x03
     91c:	9c 83       	std	Y+4, r25	; 0x04
     91e:	2d 83       	std	Y+5, r18	; 0x05
     920:	3e 83       	std	Y+6, r19	; 0x06
     922:	4f 83       	std	Y+7, r20	; 0x07
     924:	58 87       	std	Y+8, r21	; 0x08
     926:	89 e0       	ldi	r24, 0x09	; 9
     928:	e8 2e       	mov	r14, r24
     92a:	f1 2c       	mov	r15, r1
     92c:	ec 0e       	add	r14, r28
     92e:	fd 1e       	adc	r15, r29
     930:	ce 01       	movw	r24, r28
     932:	01 96       	adiw	r24, 0x01	; 1
     934:	b7 01       	movw	r22, r14
     936:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     93a:	8e 01       	movw	r16, r28
     93c:	0f 5e       	subi	r16, 0xEF	; 239
     93e:	1f 4f       	sbci	r17, 0xFF	; 255
     940:	ce 01       	movw	r24, r28
     942:	05 96       	adiw	r24, 0x05	; 5
     944:	b8 01       	movw	r22, r16
     946:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     94a:	89 85       	ldd	r24, Y+9	; 0x09
     94c:	82 30       	cpi	r24, 0x02	; 2
     94e:	40 f0       	brcs	.+16     	; 0x960 <__ltsf2+0x56>
     950:	89 89       	ldd	r24, Y+17	; 0x11
     952:	82 30       	cpi	r24, 0x02	; 2
     954:	28 f0       	brcs	.+10     	; 0x960 <__ltsf2+0x56>
     956:	c7 01       	movw	r24, r14
     958:	b8 01       	movw	r22, r16
     95a:	0e 94 7c 07 	call	0xef8	; 0xef8 <__fpcmp_parts_f>
     95e:	01 c0       	rjmp	.+2      	; 0x962 <__ltsf2+0x58>
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	68 96       	adiw	r28, 0x18	; 24
     964:	e6 e0       	ldi	r30, 0x06	; 6
     966:	0c 94 e9 1f 	jmp	0x3fd2	; 0x3fd2 <__epilogue_restores__+0x18>

0000096a <__floatsisf>:
     96a:	a8 e0       	ldi	r26, 0x08	; 8
     96c:	b0 e0       	ldi	r27, 0x00	; 0
     96e:	eb eb       	ldi	r30, 0xBB	; 187
     970:	f4 e0       	ldi	r31, 0x04	; 4
     972:	0c 94 ca 1f 	jmp	0x3f94	; 0x3f94 <__prologue_saves__+0x12>
     976:	9b 01       	movw	r18, r22
     978:	ac 01       	movw	r20, r24
     97a:	83 e0       	ldi	r24, 0x03	; 3
     97c:	89 83       	std	Y+1, r24	; 0x01
     97e:	da 01       	movw	r26, r20
     980:	c9 01       	movw	r24, r18
     982:	88 27       	eor	r24, r24
     984:	b7 fd       	sbrc	r27, 7
     986:	83 95       	inc	r24
     988:	99 27       	eor	r25, r25
     98a:	aa 27       	eor	r26, r26
     98c:	bb 27       	eor	r27, r27
     98e:	b8 2e       	mov	r11, r24
     990:	21 15       	cp	r18, r1
     992:	31 05       	cpc	r19, r1
     994:	41 05       	cpc	r20, r1
     996:	51 05       	cpc	r21, r1
     998:	19 f4       	brne	.+6      	; 0x9a0 <__floatsisf+0x36>
     99a:	82 e0       	ldi	r24, 0x02	; 2
     99c:	89 83       	std	Y+1, r24	; 0x01
     99e:	3a c0       	rjmp	.+116    	; 0xa14 <__floatsisf+0xaa>
     9a0:	88 23       	and	r24, r24
     9a2:	a9 f0       	breq	.+42     	; 0x9ce <__floatsisf+0x64>
     9a4:	20 30       	cpi	r18, 0x00	; 0
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	38 07       	cpc	r19, r24
     9aa:	80 e0       	ldi	r24, 0x00	; 0
     9ac:	48 07       	cpc	r20, r24
     9ae:	80 e8       	ldi	r24, 0x80	; 128
     9b0:	58 07       	cpc	r21, r24
     9b2:	29 f4       	brne	.+10     	; 0x9be <__floatsisf+0x54>
     9b4:	60 e0       	ldi	r22, 0x00	; 0
     9b6:	70 e0       	ldi	r23, 0x00	; 0
     9b8:	80 e0       	ldi	r24, 0x00	; 0
     9ba:	9f ec       	ldi	r25, 0xCF	; 207
     9bc:	30 c0       	rjmp	.+96     	; 0xa1e <__floatsisf+0xb4>
     9be:	ee 24       	eor	r14, r14
     9c0:	ff 24       	eor	r15, r15
     9c2:	87 01       	movw	r16, r14
     9c4:	e2 1a       	sub	r14, r18
     9c6:	f3 0a       	sbc	r15, r19
     9c8:	04 0b       	sbc	r16, r20
     9ca:	15 0b       	sbc	r17, r21
     9cc:	02 c0       	rjmp	.+4      	; 0x9d2 <__floatsisf+0x68>
     9ce:	79 01       	movw	r14, r18
     9d0:	8a 01       	movw	r16, r20
     9d2:	8e e1       	ldi	r24, 0x1E	; 30
     9d4:	c8 2e       	mov	r12, r24
     9d6:	d1 2c       	mov	r13, r1
     9d8:	dc 82       	std	Y+4, r13	; 0x04
     9da:	cb 82       	std	Y+3, r12	; 0x03
     9dc:	ed 82       	std	Y+5, r14	; 0x05
     9de:	fe 82       	std	Y+6, r15	; 0x06
     9e0:	0f 83       	std	Y+7, r16	; 0x07
     9e2:	18 87       	std	Y+8, r17	; 0x08
     9e4:	c8 01       	movw	r24, r16
     9e6:	b7 01       	movw	r22, r14
     9e8:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <__clzsi2>
     9ec:	01 97       	sbiw	r24, 0x01	; 1
     9ee:	18 16       	cp	r1, r24
     9f0:	19 06       	cpc	r1, r25
     9f2:	84 f4       	brge	.+32     	; 0xa14 <__floatsisf+0xaa>
     9f4:	08 2e       	mov	r0, r24
     9f6:	04 c0       	rjmp	.+8      	; 0xa00 <__floatsisf+0x96>
     9f8:	ee 0c       	add	r14, r14
     9fa:	ff 1c       	adc	r15, r15
     9fc:	00 1f       	adc	r16, r16
     9fe:	11 1f       	adc	r17, r17
     a00:	0a 94       	dec	r0
     a02:	d2 f7       	brpl	.-12     	; 0x9f8 <__floatsisf+0x8e>
     a04:	ed 82       	std	Y+5, r14	; 0x05
     a06:	fe 82       	std	Y+6, r15	; 0x06
     a08:	0f 83       	std	Y+7, r16	; 0x07
     a0a:	18 87       	std	Y+8, r17	; 0x08
     a0c:	c8 1a       	sub	r12, r24
     a0e:	d9 0a       	sbc	r13, r25
     a10:	dc 82       	std	Y+4, r13	; 0x04
     a12:	cb 82       	std	Y+3, r12	; 0x03
     a14:	ba 82       	std	Y+2, r11	; 0x02
     a16:	ce 01       	movw	r24, r28
     a18:	01 96       	adiw	r24, 0x01	; 1
     a1a:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__pack_f>
     a1e:	28 96       	adiw	r28, 0x08	; 8
     a20:	e9 e0       	ldi	r30, 0x09	; 9
     a22:	0c 94 e6 1f 	jmp	0x3fcc	; 0x3fcc <__epilogue_restores__+0x12>

00000a26 <__fixsfsi>:
     a26:	ac e0       	ldi	r26, 0x0C	; 12
     a28:	b0 e0       	ldi	r27, 0x00	; 0
     a2a:	e9 e1       	ldi	r30, 0x19	; 25
     a2c:	f5 e0       	ldi	r31, 0x05	; 5
     a2e:	0c 94 d1 1f 	jmp	0x3fa2	; 0x3fa2 <__prologue_saves__+0x20>
     a32:	69 83       	std	Y+1, r22	; 0x01
     a34:	7a 83       	std	Y+2, r23	; 0x02
     a36:	8b 83       	std	Y+3, r24	; 0x03
     a38:	9c 83       	std	Y+4, r25	; 0x04
     a3a:	ce 01       	movw	r24, r28
     a3c:	01 96       	adiw	r24, 0x01	; 1
     a3e:	be 01       	movw	r22, r28
     a40:	6b 5f       	subi	r22, 0xFB	; 251
     a42:	7f 4f       	sbci	r23, 0xFF	; 255
     a44:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     a48:	8d 81       	ldd	r24, Y+5	; 0x05
     a4a:	82 30       	cpi	r24, 0x02	; 2
     a4c:	61 f1       	breq	.+88     	; 0xaa6 <__fixsfsi+0x80>
     a4e:	82 30       	cpi	r24, 0x02	; 2
     a50:	50 f1       	brcs	.+84     	; 0xaa6 <__fixsfsi+0x80>
     a52:	84 30       	cpi	r24, 0x04	; 4
     a54:	21 f4       	brne	.+8      	; 0xa5e <__fixsfsi+0x38>
     a56:	8e 81       	ldd	r24, Y+6	; 0x06
     a58:	88 23       	and	r24, r24
     a5a:	51 f1       	breq	.+84     	; 0xab0 <__fixsfsi+0x8a>
     a5c:	2e c0       	rjmp	.+92     	; 0xaba <__fixsfsi+0x94>
     a5e:	2f 81       	ldd	r18, Y+7	; 0x07
     a60:	38 85       	ldd	r19, Y+8	; 0x08
     a62:	37 fd       	sbrc	r19, 7
     a64:	20 c0       	rjmp	.+64     	; 0xaa6 <__fixsfsi+0x80>
     a66:	6e 81       	ldd	r22, Y+6	; 0x06
     a68:	2f 31       	cpi	r18, 0x1F	; 31
     a6a:	31 05       	cpc	r19, r1
     a6c:	1c f0       	brlt	.+6      	; 0xa74 <__fixsfsi+0x4e>
     a6e:	66 23       	and	r22, r22
     a70:	f9 f0       	breq	.+62     	; 0xab0 <__fixsfsi+0x8a>
     a72:	23 c0       	rjmp	.+70     	; 0xaba <__fixsfsi+0x94>
     a74:	8e e1       	ldi	r24, 0x1E	; 30
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	82 1b       	sub	r24, r18
     a7a:	93 0b       	sbc	r25, r19
     a7c:	29 85       	ldd	r18, Y+9	; 0x09
     a7e:	3a 85       	ldd	r19, Y+10	; 0x0a
     a80:	4b 85       	ldd	r20, Y+11	; 0x0b
     a82:	5c 85       	ldd	r21, Y+12	; 0x0c
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__fixsfsi+0x68>
     a86:	56 95       	lsr	r21
     a88:	47 95       	ror	r20
     a8a:	37 95       	ror	r19
     a8c:	27 95       	ror	r18
     a8e:	8a 95       	dec	r24
     a90:	d2 f7       	brpl	.-12     	; 0xa86 <__fixsfsi+0x60>
     a92:	66 23       	and	r22, r22
     a94:	b1 f0       	breq	.+44     	; 0xac2 <__fixsfsi+0x9c>
     a96:	50 95       	com	r21
     a98:	40 95       	com	r20
     a9a:	30 95       	com	r19
     a9c:	21 95       	neg	r18
     a9e:	3f 4f       	sbci	r19, 0xFF	; 255
     aa0:	4f 4f       	sbci	r20, 0xFF	; 255
     aa2:	5f 4f       	sbci	r21, 0xFF	; 255
     aa4:	0e c0       	rjmp	.+28     	; 0xac2 <__fixsfsi+0x9c>
     aa6:	20 e0       	ldi	r18, 0x00	; 0
     aa8:	30 e0       	ldi	r19, 0x00	; 0
     aaa:	40 e0       	ldi	r20, 0x00	; 0
     aac:	50 e0       	ldi	r21, 0x00	; 0
     aae:	09 c0       	rjmp	.+18     	; 0xac2 <__fixsfsi+0x9c>
     ab0:	2f ef       	ldi	r18, 0xFF	; 255
     ab2:	3f ef       	ldi	r19, 0xFF	; 255
     ab4:	4f ef       	ldi	r20, 0xFF	; 255
     ab6:	5f e7       	ldi	r21, 0x7F	; 127
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__fixsfsi+0x9c>
     aba:	20 e0       	ldi	r18, 0x00	; 0
     abc:	30 e0       	ldi	r19, 0x00	; 0
     abe:	40 e0       	ldi	r20, 0x00	; 0
     ac0:	50 e8       	ldi	r21, 0x80	; 128
     ac2:	b9 01       	movw	r22, r18
     ac4:	ca 01       	movw	r24, r20
     ac6:	2c 96       	adiw	r28, 0x0c	; 12
     ac8:	e2 e0       	ldi	r30, 0x02	; 2
     aca:	0c 94 ed 1f 	jmp	0x3fda	; 0x3fda <__epilogue_restores__+0x20>

00000ace <__floatunsisf>:
     ace:	a8 e0       	ldi	r26, 0x08	; 8
     ad0:	b0 e0       	ldi	r27, 0x00	; 0
     ad2:	ed e6       	ldi	r30, 0x6D	; 109
     ad4:	f5 e0       	ldi	r31, 0x05	; 5
     ad6:	0c 94 c9 1f 	jmp	0x3f92	; 0x3f92 <__prologue_saves__+0x10>
     ada:	7b 01       	movw	r14, r22
     adc:	8c 01       	movw	r16, r24
     ade:	61 15       	cp	r22, r1
     ae0:	71 05       	cpc	r23, r1
     ae2:	81 05       	cpc	r24, r1
     ae4:	91 05       	cpc	r25, r1
     ae6:	19 f4       	brne	.+6      	; 0xaee <__floatunsisf+0x20>
     ae8:	82 e0       	ldi	r24, 0x02	; 2
     aea:	89 83       	std	Y+1, r24	; 0x01
     aec:	60 c0       	rjmp	.+192    	; 0xbae <__floatunsisf+0xe0>
     aee:	83 e0       	ldi	r24, 0x03	; 3
     af0:	89 83       	std	Y+1, r24	; 0x01
     af2:	8e e1       	ldi	r24, 0x1E	; 30
     af4:	c8 2e       	mov	r12, r24
     af6:	d1 2c       	mov	r13, r1
     af8:	dc 82       	std	Y+4, r13	; 0x04
     afa:	cb 82       	std	Y+3, r12	; 0x03
     afc:	ed 82       	std	Y+5, r14	; 0x05
     afe:	fe 82       	std	Y+6, r15	; 0x06
     b00:	0f 83       	std	Y+7, r16	; 0x07
     b02:	18 87       	std	Y+8, r17	; 0x08
     b04:	c8 01       	movw	r24, r16
     b06:	b7 01       	movw	r22, r14
     b08:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <__clzsi2>
     b0c:	fc 01       	movw	r30, r24
     b0e:	31 97       	sbiw	r30, 0x01	; 1
     b10:	f7 ff       	sbrs	r31, 7
     b12:	3b c0       	rjmp	.+118    	; 0xb8a <__floatunsisf+0xbc>
     b14:	22 27       	eor	r18, r18
     b16:	33 27       	eor	r19, r19
     b18:	2e 1b       	sub	r18, r30
     b1a:	3f 0b       	sbc	r19, r31
     b1c:	57 01       	movw	r10, r14
     b1e:	68 01       	movw	r12, r16
     b20:	02 2e       	mov	r0, r18
     b22:	04 c0       	rjmp	.+8      	; 0xb2c <__floatunsisf+0x5e>
     b24:	d6 94       	lsr	r13
     b26:	c7 94       	ror	r12
     b28:	b7 94       	ror	r11
     b2a:	a7 94       	ror	r10
     b2c:	0a 94       	dec	r0
     b2e:	d2 f7       	brpl	.-12     	; 0xb24 <__floatunsisf+0x56>
     b30:	40 e0       	ldi	r20, 0x00	; 0
     b32:	50 e0       	ldi	r21, 0x00	; 0
     b34:	60 e0       	ldi	r22, 0x00	; 0
     b36:	70 e0       	ldi	r23, 0x00	; 0
     b38:	81 e0       	ldi	r24, 0x01	; 1
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	a0 e0       	ldi	r26, 0x00	; 0
     b3e:	b0 e0       	ldi	r27, 0x00	; 0
     b40:	04 c0       	rjmp	.+8      	; 0xb4a <__floatunsisf+0x7c>
     b42:	88 0f       	add	r24, r24
     b44:	99 1f       	adc	r25, r25
     b46:	aa 1f       	adc	r26, r26
     b48:	bb 1f       	adc	r27, r27
     b4a:	2a 95       	dec	r18
     b4c:	d2 f7       	brpl	.-12     	; 0xb42 <__floatunsisf+0x74>
     b4e:	01 97       	sbiw	r24, 0x01	; 1
     b50:	a1 09       	sbc	r26, r1
     b52:	b1 09       	sbc	r27, r1
     b54:	8e 21       	and	r24, r14
     b56:	9f 21       	and	r25, r15
     b58:	a0 23       	and	r26, r16
     b5a:	b1 23       	and	r27, r17
     b5c:	00 97       	sbiw	r24, 0x00	; 0
     b5e:	a1 05       	cpc	r26, r1
     b60:	b1 05       	cpc	r27, r1
     b62:	21 f0       	breq	.+8      	; 0xb6c <__floatunsisf+0x9e>
     b64:	41 e0       	ldi	r20, 0x01	; 1
     b66:	50 e0       	ldi	r21, 0x00	; 0
     b68:	60 e0       	ldi	r22, 0x00	; 0
     b6a:	70 e0       	ldi	r23, 0x00	; 0
     b6c:	4a 29       	or	r20, r10
     b6e:	5b 29       	or	r21, r11
     b70:	6c 29       	or	r22, r12
     b72:	7d 29       	or	r23, r13
     b74:	4d 83       	std	Y+5, r20	; 0x05
     b76:	5e 83       	std	Y+6, r21	; 0x06
     b78:	6f 83       	std	Y+7, r22	; 0x07
     b7a:	78 87       	std	Y+8, r23	; 0x08
     b7c:	8e e1       	ldi	r24, 0x1E	; 30
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	8e 1b       	sub	r24, r30
     b82:	9f 0b       	sbc	r25, r31
     b84:	9c 83       	std	Y+4, r25	; 0x04
     b86:	8b 83       	std	Y+3, r24	; 0x03
     b88:	12 c0       	rjmp	.+36     	; 0xbae <__floatunsisf+0xe0>
     b8a:	30 97       	sbiw	r30, 0x00	; 0
     b8c:	81 f0       	breq	.+32     	; 0xbae <__floatunsisf+0xe0>
     b8e:	0e 2e       	mov	r0, r30
     b90:	04 c0       	rjmp	.+8      	; 0xb9a <__floatunsisf+0xcc>
     b92:	ee 0c       	add	r14, r14
     b94:	ff 1c       	adc	r15, r15
     b96:	00 1f       	adc	r16, r16
     b98:	11 1f       	adc	r17, r17
     b9a:	0a 94       	dec	r0
     b9c:	d2 f7       	brpl	.-12     	; 0xb92 <__floatunsisf+0xc4>
     b9e:	ed 82       	std	Y+5, r14	; 0x05
     ba0:	fe 82       	std	Y+6, r15	; 0x06
     ba2:	0f 83       	std	Y+7, r16	; 0x07
     ba4:	18 87       	std	Y+8, r17	; 0x08
     ba6:	ce 1a       	sub	r12, r30
     ba8:	df 0a       	sbc	r13, r31
     baa:	dc 82       	std	Y+4, r13	; 0x04
     bac:	cb 82       	std	Y+3, r12	; 0x03
     bae:	1a 82       	std	Y+2, r1	; 0x02
     bb0:	ce 01       	movw	r24, r28
     bb2:	01 96       	adiw	r24, 0x01	; 1
     bb4:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__pack_f>
     bb8:	28 96       	adiw	r28, 0x08	; 8
     bba:	ea e0       	ldi	r30, 0x0A	; 10
     bbc:	0c 94 e5 1f 	jmp	0x3fca	; 0x3fca <__epilogue_restores__+0x10>

00000bc0 <__clzsi2>:
     bc0:	ef 92       	push	r14
     bc2:	ff 92       	push	r15
     bc4:	0f 93       	push	r16
     bc6:	1f 93       	push	r17
     bc8:	7b 01       	movw	r14, r22
     bca:	8c 01       	movw	r16, r24
     bcc:	80 e0       	ldi	r24, 0x00	; 0
     bce:	e8 16       	cp	r14, r24
     bd0:	80 e0       	ldi	r24, 0x00	; 0
     bd2:	f8 06       	cpc	r15, r24
     bd4:	81 e0       	ldi	r24, 0x01	; 1
     bd6:	08 07       	cpc	r16, r24
     bd8:	80 e0       	ldi	r24, 0x00	; 0
     bda:	18 07       	cpc	r17, r24
     bdc:	88 f4       	brcc	.+34     	; 0xc00 <__clzsi2+0x40>
     bde:	8f ef       	ldi	r24, 0xFF	; 255
     be0:	e8 16       	cp	r14, r24
     be2:	f1 04       	cpc	r15, r1
     be4:	01 05       	cpc	r16, r1
     be6:	11 05       	cpc	r17, r1
     be8:	31 f0       	breq	.+12     	; 0xbf6 <__clzsi2+0x36>
     bea:	28 f0       	brcs	.+10     	; 0xbf6 <__clzsi2+0x36>
     bec:	88 e0       	ldi	r24, 0x08	; 8
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	a0 e0       	ldi	r26, 0x00	; 0
     bf2:	b0 e0       	ldi	r27, 0x00	; 0
     bf4:	17 c0       	rjmp	.+46     	; 0xc24 <__clzsi2+0x64>
     bf6:	80 e0       	ldi	r24, 0x00	; 0
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	a0 e0       	ldi	r26, 0x00	; 0
     bfc:	b0 e0       	ldi	r27, 0x00	; 0
     bfe:	12 c0       	rjmp	.+36     	; 0xc24 <__clzsi2+0x64>
     c00:	80 e0       	ldi	r24, 0x00	; 0
     c02:	e8 16       	cp	r14, r24
     c04:	80 e0       	ldi	r24, 0x00	; 0
     c06:	f8 06       	cpc	r15, r24
     c08:	80 e0       	ldi	r24, 0x00	; 0
     c0a:	08 07       	cpc	r16, r24
     c0c:	81 e0       	ldi	r24, 0x01	; 1
     c0e:	18 07       	cpc	r17, r24
     c10:	28 f0       	brcs	.+10     	; 0xc1c <__clzsi2+0x5c>
     c12:	88 e1       	ldi	r24, 0x18	; 24
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	a0 e0       	ldi	r26, 0x00	; 0
     c18:	b0 e0       	ldi	r27, 0x00	; 0
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__clzsi2+0x64>
     c1c:	80 e1       	ldi	r24, 0x10	; 16
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	20 e2       	ldi	r18, 0x20	; 32
     c26:	30 e0       	ldi	r19, 0x00	; 0
     c28:	40 e0       	ldi	r20, 0x00	; 0
     c2a:	50 e0       	ldi	r21, 0x00	; 0
     c2c:	28 1b       	sub	r18, r24
     c2e:	39 0b       	sbc	r19, r25
     c30:	4a 0b       	sbc	r20, r26
     c32:	5b 0b       	sbc	r21, r27
     c34:	04 c0       	rjmp	.+8      	; 0xc3e <__clzsi2+0x7e>
     c36:	16 95       	lsr	r17
     c38:	07 95       	ror	r16
     c3a:	f7 94       	ror	r15
     c3c:	e7 94       	ror	r14
     c3e:	8a 95       	dec	r24
     c40:	d2 f7       	brpl	.-12     	; 0xc36 <__clzsi2+0x76>
     c42:	f7 01       	movw	r30, r14
     c44:	ed 58       	subi	r30, 0x8D	; 141
     c46:	ff 4f       	sbci	r31, 0xFF	; 255
     c48:	80 81       	ld	r24, Z
     c4a:	28 1b       	sub	r18, r24
     c4c:	31 09       	sbc	r19, r1
     c4e:	41 09       	sbc	r20, r1
     c50:	51 09       	sbc	r21, r1
     c52:	c9 01       	movw	r24, r18
     c54:	1f 91       	pop	r17
     c56:	0f 91       	pop	r16
     c58:	ff 90       	pop	r15
     c5a:	ef 90       	pop	r14
     c5c:	08 95       	ret

00000c5e <__pack_f>:
     c5e:	df 92       	push	r13
     c60:	ef 92       	push	r14
     c62:	ff 92       	push	r15
     c64:	0f 93       	push	r16
     c66:	1f 93       	push	r17
     c68:	fc 01       	movw	r30, r24
     c6a:	e4 80       	ldd	r14, Z+4	; 0x04
     c6c:	f5 80       	ldd	r15, Z+5	; 0x05
     c6e:	06 81       	ldd	r16, Z+6	; 0x06
     c70:	17 81       	ldd	r17, Z+7	; 0x07
     c72:	d1 80       	ldd	r13, Z+1	; 0x01
     c74:	80 81       	ld	r24, Z
     c76:	82 30       	cpi	r24, 0x02	; 2
     c78:	48 f4       	brcc	.+18     	; 0xc8c <__pack_f+0x2e>
     c7a:	80 e0       	ldi	r24, 0x00	; 0
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	a0 e1       	ldi	r26, 0x10	; 16
     c80:	b0 e0       	ldi	r27, 0x00	; 0
     c82:	e8 2a       	or	r14, r24
     c84:	f9 2a       	or	r15, r25
     c86:	0a 2b       	or	r16, r26
     c88:	1b 2b       	or	r17, r27
     c8a:	a5 c0       	rjmp	.+330    	; 0xdd6 <__pack_f+0x178>
     c8c:	84 30       	cpi	r24, 0x04	; 4
     c8e:	09 f4       	brne	.+2      	; 0xc92 <__pack_f+0x34>
     c90:	9f c0       	rjmp	.+318    	; 0xdd0 <__pack_f+0x172>
     c92:	82 30       	cpi	r24, 0x02	; 2
     c94:	21 f4       	brne	.+8      	; 0xc9e <__pack_f+0x40>
     c96:	ee 24       	eor	r14, r14
     c98:	ff 24       	eor	r15, r15
     c9a:	87 01       	movw	r16, r14
     c9c:	05 c0       	rjmp	.+10     	; 0xca8 <__pack_f+0x4a>
     c9e:	e1 14       	cp	r14, r1
     ca0:	f1 04       	cpc	r15, r1
     ca2:	01 05       	cpc	r16, r1
     ca4:	11 05       	cpc	r17, r1
     ca6:	19 f4       	brne	.+6      	; 0xcae <__pack_f+0x50>
     ca8:	e0 e0       	ldi	r30, 0x00	; 0
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	96 c0       	rjmp	.+300    	; 0xdda <__pack_f+0x17c>
     cae:	62 81       	ldd	r22, Z+2	; 0x02
     cb0:	73 81       	ldd	r23, Z+3	; 0x03
     cb2:	9f ef       	ldi	r25, 0xFF	; 255
     cb4:	62 38       	cpi	r22, 0x82	; 130
     cb6:	79 07       	cpc	r23, r25
     cb8:	0c f0       	brlt	.+2      	; 0xcbc <__pack_f+0x5e>
     cba:	5b c0       	rjmp	.+182    	; 0xd72 <__pack_f+0x114>
     cbc:	22 e8       	ldi	r18, 0x82	; 130
     cbe:	3f ef       	ldi	r19, 0xFF	; 255
     cc0:	26 1b       	sub	r18, r22
     cc2:	37 0b       	sbc	r19, r23
     cc4:	2a 31       	cpi	r18, 0x1A	; 26
     cc6:	31 05       	cpc	r19, r1
     cc8:	2c f0       	brlt	.+10     	; 0xcd4 <__pack_f+0x76>
     cca:	20 e0       	ldi	r18, 0x00	; 0
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	40 e0       	ldi	r20, 0x00	; 0
     cd0:	50 e0       	ldi	r21, 0x00	; 0
     cd2:	2a c0       	rjmp	.+84     	; 0xd28 <__pack_f+0xca>
     cd4:	b8 01       	movw	r22, r16
     cd6:	a7 01       	movw	r20, r14
     cd8:	02 2e       	mov	r0, r18
     cda:	04 c0       	rjmp	.+8      	; 0xce4 <__pack_f+0x86>
     cdc:	76 95       	lsr	r23
     cde:	67 95       	ror	r22
     ce0:	57 95       	ror	r21
     ce2:	47 95       	ror	r20
     ce4:	0a 94       	dec	r0
     ce6:	d2 f7       	brpl	.-12     	; 0xcdc <__pack_f+0x7e>
     ce8:	81 e0       	ldi	r24, 0x01	; 1
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	a0 e0       	ldi	r26, 0x00	; 0
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	04 c0       	rjmp	.+8      	; 0xcfa <__pack_f+0x9c>
     cf2:	88 0f       	add	r24, r24
     cf4:	99 1f       	adc	r25, r25
     cf6:	aa 1f       	adc	r26, r26
     cf8:	bb 1f       	adc	r27, r27
     cfa:	2a 95       	dec	r18
     cfc:	d2 f7       	brpl	.-12     	; 0xcf2 <__pack_f+0x94>
     cfe:	01 97       	sbiw	r24, 0x01	; 1
     d00:	a1 09       	sbc	r26, r1
     d02:	b1 09       	sbc	r27, r1
     d04:	8e 21       	and	r24, r14
     d06:	9f 21       	and	r25, r15
     d08:	a0 23       	and	r26, r16
     d0a:	b1 23       	and	r27, r17
     d0c:	00 97       	sbiw	r24, 0x00	; 0
     d0e:	a1 05       	cpc	r26, r1
     d10:	b1 05       	cpc	r27, r1
     d12:	21 f0       	breq	.+8      	; 0xd1c <__pack_f+0xbe>
     d14:	81 e0       	ldi	r24, 0x01	; 1
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	a0 e0       	ldi	r26, 0x00	; 0
     d1a:	b0 e0       	ldi	r27, 0x00	; 0
     d1c:	9a 01       	movw	r18, r20
     d1e:	ab 01       	movw	r20, r22
     d20:	28 2b       	or	r18, r24
     d22:	39 2b       	or	r19, r25
     d24:	4a 2b       	or	r20, r26
     d26:	5b 2b       	or	r21, r27
     d28:	da 01       	movw	r26, r20
     d2a:	c9 01       	movw	r24, r18
     d2c:	8f 77       	andi	r24, 0x7F	; 127
     d2e:	90 70       	andi	r25, 0x00	; 0
     d30:	a0 70       	andi	r26, 0x00	; 0
     d32:	b0 70       	andi	r27, 0x00	; 0
     d34:	80 34       	cpi	r24, 0x40	; 64
     d36:	91 05       	cpc	r25, r1
     d38:	a1 05       	cpc	r26, r1
     d3a:	b1 05       	cpc	r27, r1
     d3c:	39 f4       	brne	.+14     	; 0xd4c <__pack_f+0xee>
     d3e:	27 ff       	sbrs	r18, 7
     d40:	09 c0       	rjmp	.+18     	; 0xd54 <__pack_f+0xf6>
     d42:	20 5c       	subi	r18, 0xC0	; 192
     d44:	3f 4f       	sbci	r19, 0xFF	; 255
     d46:	4f 4f       	sbci	r20, 0xFF	; 255
     d48:	5f 4f       	sbci	r21, 0xFF	; 255
     d4a:	04 c0       	rjmp	.+8      	; 0xd54 <__pack_f+0xf6>
     d4c:	21 5c       	subi	r18, 0xC1	; 193
     d4e:	3f 4f       	sbci	r19, 0xFF	; 255
     d50:	4f 4f       	sbci	r20, 0xFF	; 255
     d52:	5f 4f       	sbci	r21, 0xFF	; 255
     d54:	e0 e0       	ldi	r30, 0x00	; 0
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	20 30       	cpi	r18, 0x00	; 0
     d5a:	a0 e0       	ldi	r26, 0x00	; 0
     d5c:	3a 07       	cpc	r19, r26
     d5e:	a0 e0       	ldi	r26, 0x00	; 0
     d60:	4a 07       	cpc	r20, r26
     d62:	a0 e4       	ldi	r26, 0x40	; 64
     d64:	5a 07       	cpc	r21, r26
     d66:	10 f0       	brcs	.+4      	; 0xd6c <__pack_f+0x10e>
     d68:	e1 e0       	ldi	r30, 0x01	; 1
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	79 01       	movw	r14, r18
     d6e:	8a 01       	movw	r16, r20
     d70:	27 c0       	rjmp	.+78     	; 0xdc0 <__pack_f+0x162>
     d72:	60 38       	cpi	r22, 0x80	; 128
     d74:	71 05       	cpc	r23, r1
     d76:	64 f5       	brge	.+88     	; 0xdd0 <__pack_f+0x172>
     d78:	fb 01       	movw	r30, r22
     d7a:	e1 58       	subi	r30, 0x81	; 129
     d7c:	ff 4f       	sbci	r31, 0xFF	; 255
     d7e:	d8 01       	movw	r26, r16
     d80:	c7 01       	movw	r24, r14
     d82:	8f 77       	andi	r24, 0x7F	; 127
     d84:	90 70       	andi	r25, 0x00	; 0
     d86:	a0 70       	andi	r26, 0x00	; 0
     d88:	b0 70       	andi	r27, 0x00	; 0
     d8a:	80 34       	cpi	r24, 0x40	; 64
     d8c:	91 05       	cpc	r25, r1
     d8e:	a1 05       	cpc	r26, r1
     d90:	b1 05       	cpc	r27, r1
     d92:	39 f4       	brne	.+14     	; 0xda2 <__pack_f+0x144>
     d94:	e7 fe       	sbrs	r14, 7
     d96:	0d c0       	rjmp	.+26     	; 0xdb2 <__pack_f+0x154>
     d98:	80 e4       	ldi	r24, 0x40	; 64
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	a0 e0       	ldi	r26, 0x00	; 0
     d9e:	b0 e0       	ldi	r27, 0x00	; 0
     da0:	04 c0       	rjmp	.+8      	; 0xdaa <__pack_f+0x14c>
     da2:	8f e3       	ldi	r24, 0x3F	; 63
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	a0 e0       	ldi	r26, 0x00	; 0
     da8:	b0 e0       	ldi	r27, 0x00	; 0
     daa:	e8 0e       	add	r14, r24
     dac:	f9 1e       	adc	r15, r25
     dae:	0a 1f       	adc	r16, r26
     db0:	1b 1f       	adc	r17, r27
     db2:	17 ff       	sbrs	r17, 7
     db4:	05 c0       	rjmp	.+10     	; 0xdc0 <__pack_f+0x162>
     db6:	16 95       	lsr	r17
     db8:	07 95       	ror	r16
     dba:	f7 94       	ror	r15
     dbc:	e7 94       	ror	r14
     dbe:	31 96       	adiw	r30, 0x01	; 1
     dc0:	87 e0       	ldi	r24, 0x07	; 7
     dc2:	16 95       	lsr	r17
     dc4:	07 95       	ror	r16
     dc6:	f7 94       	ror	r15
     dc8:	e7 94       	ror	r14
     dca:	8a 95       	dec	r24
     dcc:	d1 f7       	brne	.-12     	; 0xdc2 <__pack_f+0x164>
     dce:	05 c0       	rjmp	.+10     	; 0xdda <__pack_f+0x17c>
     dd0:	ee 24       	eor	r14, r14
     dd2:	ff 24       	eor	r15, r15
     dd4:	87 01       	movw	r16, r14
     dd6:	ef ef       	ldi	r30, 0xFF	; 255
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	6e 2f       	mov	r22, r30
     ddc:	67 95       	ror	r22
     dde:	66 27       	eor	r22, r22
     de0:	67 95       	ror	r22
     de2:	90 2f       	mov	r25, r16
     de4:	9f 77       	andi	r25, 0x7F	; 127
     de6:	d7 94       	ror	r13
     de8:	dd 24       	eor	r13, r13
     dea:	d7 94       	ror	r13
     dec:	8e 2f       	mov	r24, r30
     dee:	86 95       	lsr	r24
     df0:	49 2f       	mov	r20, r25
     df2:	46 2b       	or	r20, r22
     df4:	58 2f       	mov	r21, r24
     df6:	5d 29       	or	r21, r13
     df8:	b7 01       	movw	r22, r14
     dfa:	ca 01       	movw	r24, r20
     dfc:	1f 91       	pop	r17
     dfe:	0f 91       	pop	r16
     e00:	ff 90       	pop	r15
     e02:	ef 90       	pop	r14
     e04:	df 90       	pop	r13
     e06:	08 95       	ret

00000e08 <__unpack_f>:
     e08:	fc 01       	movw	r30, r24
     e0a:	db 01       	movw	r26, r22
     e0c:	40 81       	ld	r20, Z
     e0e:	51 81       	ldd	r21, Z+1	; 0x01
     e10:	22 81       	ldd	r18, Z+2	; 0x02
     e12:	62 2f       	mov	r22, r18
     e14:	6f 77       	andi	r22, 0x7F	; 127
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	22 1f       	adc	r18, r18
     e1a:	22 27       	eor	r18, r18
     e1c:	22 1f       	adc	r18, r18
     e1e:	93 81       	ldd	r25, Z+3	; 0x03
     e20:	89 2f       	mov	r24, r25
     e22:	88 0f       	add	r24, r24
     e24:	82 2b       	or	r24, r18
     e26:	28 2f       	mov	r18, r24
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	99 1f       	adc	r25, r25
     e2c:	99 27       	eor	r25, r25
     e2e:	99 1f       	adc	r25, r25
     e30:	11 96       	adiw	r26, 0x01	; 1
     e32:	9c 93       	st	X, r25
     e34:	11 97       	sbiw	r26, 0x01	; 1
     e36:	21 15       	cp	r18, r1
     e38:	31 05       	cpc	r19, r1
     e3a:	a9 f5       	brne	.+106    	; 0xea6 <__unpack_f+0x9e>
     e3c:	41 15       	cp	r20, r1
     e3e:	51 05       	cpc	r21, r1
     e40:	61 05       	cpc	r22, r1
     e42:	71 05       	cpc	r23, r1
     e44:	11 f4       	brne	.+4      	; 0xe4a <__unpack_f+0x42>
     e46:	82 e0       	ldi	r24, 0x02	; 2
     e48:	37 c0       	rjmp	.+110    	; 0xeb8 <__unpack_f+0xb0>
     e4a:	82 e8       	ldi	r24, 0x82	; 130
     e4c:	9f ef       	ldi	r25, 0xFF	; 255
     e4e:	13 96       	adiw	r26, 0x03	; 3
     e50:	9c 93       	st	X, r25
     e52:	8e 93       	st	-X, r24
     e54:	12 97       	sbiw	r26, 0x02	; 2
     e56:	9a 01       	movw	r18, r20
     e58:	ab 01       	movw	r20, r22
     e5a:	67 e0       	ldi	r22, 0x07	; 7
     e5c:	22 0f       	add	r18, r18
     e5e:	33 1f       	adc	r19, r19
     e60:	44 1f       	adc	r20, r20
     e62:	55 1f       	adc	r21, r21
     e64:	6a 95       	dec	r22
     e66:	d1 f7       	brne	.-12     	; 0xe5c <__unpack_f+0x54>
     e68:	83 e0       	ldi	r24, 0x03	; 3
     e6a:	8c 93       	st	X, r24
     e6c:	0d c0       	rjmp	.+26     	; 0xe88 <__unpack_f+0x80>
     e6e:	22 0f       	add	r18, r18
     e70:	33 1f       	adc	r19, r19
     e72:	44 1f       	adc	r20, r20
     e74:	55 1f       	adc	r21, r21
     e76:	12 96       	adiw	r26, 0x02	; 2
     e78:	8d 91       	ld	r24, X+
     e7a:	9c 91       	ld	r25, X
     e7c:	13 97       	sbiw	r26, 0x03	; 3
     e7e:	01 97       	sbiw	r24, 0x01	; 1
     e80:	13 96       	adiw	r26, 0x03	; 3
     e82:	9c 93       	st	X, r25
     e84:	8e 93       	st	-X, r24
     e86:	12 97       	sbiw	r26, 0x02	; 2
     e88:	20 30       	cpi	r18, 0x00	; 0
     e8a:	80 e0       	ldi	r24, 0x00	; 0
     e8c:	38 07       	cpc	r19, r24
     e8e:	80 e0       	ldi	r24, 0x00	; 0
     e90:	48 07       	cpc	r20, r24
     e92:	80 e4       	ldi	r24, 0x40	; 64
     e94:	58 07       	cpc	r21, r24
     e96:	58 f3       	brcs	.-42     	; 0xe6e <__unpack_f+0x66>
     e98:	14 96       	adiw	r26, 0x04	; 4
     e9a:	2d 93       	st	X+, r18
     e9c:	3d 93       	st	X+, r19
     e9e:	4d 93       	st	X+, r20
     ea0:	5c 93       	st	X, r21
     ea2:	17 97       	sbiw	r26, 0x07	; 7
     ea4:	08 95       	ret
     ea6:	2f 3f       	cpi	r18, 0xFF	; 255
     ea8:	31 05       	cpc	r19, r1
     eaa:	79 f4       	brne	.+30     	; 0xeca <__unpack_f+0xc2>
     eac:	41 15       	cp	r20, r1
     eae:	51 05       	cpc	r21, r1
     eb0:	61 05       	cpc	r22, r1
     eb2:	71 05       	cpc	r23, r1
     eb4:	19 f4       	brne	.+6      	; 0xebc <__unpack_f+0xb4>
     eb6:	84 e0       	ldi	r24, 0x04	; 4
     eb8:	8c 93       	st	X, r24
     eba:	08 95       	ret
     ebc:	64 ff       	sbrs	r22, 4
     ebe:	03 c0       	rjmp	.+6      	; 0xec6 <__unpack_f+0xbe>
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	8c 93       	st	X, r24
     ec4:	12 c0       	rjmp	.+36     	; 0xeea <__unpack_f+0xe2>
     ec6:	1c 92       	st	X, r1
     ec8:	10 c0       	rjmp	.+32     	; 0xeea <__unpack_f+0xe2>
     eca:	2f 57       	subi	r18, 0x7F	; 127
     ecc:	30 40       	sbci	r19, 0x00	; 0
     ece:	13 96       	adiw	r26, 0x03	; 3
     ed0:	3c 93       	st	X, r19
     ed2:	2e 93       	st	-X, r18
     ed4:	12 97       	sbiw	r26, 0x02	; 2
     ed6:	83 e0       	ldi	r24, 0x03	; 3
     ed8:	8c 93       	st	X, r24
     eda:	87 e0       	ldi	r24, 0x07	; 7
     edc:	44 0f       	add	r20, r20
     ede:	55 1f       	adc	r21, r21
     ee0:	66 1f       	adc	r22, r22
     ee2:	77 1f       	adc	r23, r23
     ee4:	8a 95       	dec	r24
     ee6:	d1 f7       	brne	.-12     	; 0xedc <__unpack_f+0xd4>
     ee8:	70 64       	ori	r23, 0x40	; 64
     eea:	14 96       	adiw	r26, 0x04	; 4
     eec:	4d 93       	st	X+, r20
     eee:	5d 93       	st	X+, r21
     ef0:	6d 93       	st	X+, r22
     ef2:	7c 93       	st	X, r23
     ef4:	17 97       	sbiw	r26, 0x07	; 7
     ef6:	08 95       	ret

00000ef8 <__fpcmp_parts_f>:
     ef8:	1f 93       	push	r17
     efa:	dc 01       	movw	r26, r24
     efc:	fb 01       	movw	r30, r22
     efe:	9c 91       	ld	r25, X
     f00:	92 30       	cpi	r25, 0x02	; 2
     f02:	08 f4       	brcc	.+2      	; 0xf06 <__fpcmp_parts_f+0xe>
     f04:	47 c0       	rjmp	.+142    	; 0xf94 <__fpcmp_parts_f+0x9c>
     f06:	80 81       	ld	r24, Z
     f08:	82 30       	cpi	r24, 0x02	; 2
     f0a:	08 f4       	brcc	.+2      	; 0xf0e <__fpcmp_parts_f+0x16>
     f0c:	43 c0       	rjmp	.+134    	; 0xf94 <__fpcmp_parts_f+0x9c>
     f0e:	94 30       	cpi	r25, 0x04	; 4
     f10:	51 f4       	brne	.+20     	; 0xf26 <__fpcmp_parts_f+0x2e>
     f12:	11 96       	adiw	r26, 0x01	; 1
     f14:	1c 91       	ld	r17, X
     f16:	84 30       	cpi	r24, 0x04	; 4
     f18:	99 f5       	brne	.+102    	; 0xf80 <__fpcmp_parts_f+0x88>
     f1a:	81 81       	ldd	r24, Z+1	; 0x01
     f1c:	68 2f       	mov	r22, r24
     f1e:	70 e0       	ldi	r23, 0x00	; 0
     f20:	61 1b       	sub	r22, r17
     f22:	71 09       	sbc	r23, r1
     f24:	3f c0       	rjmp	.+126    	; 0xfa4 <__fpcmp_parts_f+0xac>
     f26:	84 30       	cpi	r24, 0x04	; 4
     f28:	21 f0       	breq	.+8      	; 0xf32 <__fpcmp_parts_f+0x3a>
     f2a:	92 30       	cpi	r25, 0x02	; 2
     f2c:	31 f4       	brne	.+12     	; 0xf3a <__fpcmp_parts_f+0x42>
     f2e:	82 30       	cpi	r24, 0x02	; 2
     f30:	b9 f1       	breq	.+110    	; 0xfa0 <__fpcmp_parts_f+0xa8>
     f32:	81 81       	ldd	r24, Z+1	; 0x01
     f34:	88 23       	and	r24, r24
     f36:	89 f1       	breq	.+98     	; 0xf9a <__fpcmp_parts_f+0xa2>
     f38:	2d c0       	rjmp	.+90     	; 0xf94 <__fpcmp_parts_f+0x9c>
     f3a:	11 96       	adiw	r26, 0x01	; 1
     f3c:	1c 91       	ld	r17, X
     f3e:	11 97       	sbiw	r26, 0x01	; 1
     f40:	82 30       	cpi	r24, 0x02	; 2
     f42:	f1 f0       	breq	.+60     	; 0xf80 <__fpcmp_parts_f+0x88>
     f44:	81 81       	ldd	r24, Z+1	; 0x01
     f46:	18 17       	cp	r17, r24
     f48:	d9 f4       	brne	.+54     	; 0xf80 <__fpcmp_parts_f+0x88>
     f4a:	12 96       	adiw	r26, 0x02	; 2
     f4c:	2d 91       	ld	r18, X+
     f4e:	3c 91       	ld	r19, X
     f50:	13 97       	sbiw	r26, 0x03	; 3
     f52:	82 81       	ldd	r24, Z+2	; 0x02
     f54:	93 81       	ldd	r25, Z+3	; 0x03
     f56:	82 17       	cp	r24, r18
     f58:	93 07       	cpc	r25, r19
     f5a:	94 f0       	brlt	.+36     	; 0xf80 <__fpcmp_parts_f+0x88>
     f5c:	28 17       	cp	r18, r24
     f5e:	39 07       	cpc	r19, r25
     f60:	bc f0       	brlt	.+46     	; 0xf90 <__fpcmp_parts_f+0x98>
     f62:	14 96       	adiw	r26, 0x04	; 4
     f64:	8d 91       	ld	r24, X+
     f66:	9d 91       	ld	r25, X+
     f68:	0d 90       	ld	r0, X+
     f6a:	bc 91       	ld	r27, X
     f6c:	a0 2d       	mov	r26, r0
     f6e:	24 81       	ldd	r18, Z+4	; 0x04
     f70:	35 81       	ldd	r19, Z+5	; 0x05
     f72:	46 81       	ldd	r20, Z+6	; 0x06
     f74:	57 81       	ldd	r21, Z+7	; 0x07
     f76:	28 17       	cp	r18, r24
     f78:	39 07       	cpc	r19, r25
     f7a:	4a 07       	cpc	r20, r26
     f7c:	5b 07       	cpc	r21, r27
     f7e:	18 f4       	brcc	.+6      	; 0xf86 <__fpcmp_parts_f+0x8e>
     f80:	11 23       	and	r17, r17
     f82:	41 f0       	breq	.+16     	; 0xf94 <__fpcmp_parts_f+0x9c>
     f84:	0a c0       	rjmp	.+20     	; 0xf9a <__fpcmp_parts_f+0xa2>
     f86:	82 17       	cp	r24, r18
     f88:	93 07       	cpc	r25, r19
     f8a:	a4 07       	cpc	r26, r20
     f8c:	b5 07       	cpc	r27, r21
     f8e:	40 f4       	brcc	.+16     	; 0xfa0 <__fpcmp_parts_f+0xa8>
     f90:	11 23       	and	r17, r17
     f92:	19 f0       	breq	.+6      	; 0xf9a <__fpcmp_parts_f+0xa2>
     f94:	61 e0       	ldi	r22, 0x01	; 1
     f96:	70 e0       	ldi	r23, 0x00	; 0
     f98:	05 c0       	rjmp	.+10     	; 0xfa4 <__fpcmp_parts_f+0xac>
     f9a:	6f ef       	ldi	r22, 0xFF	; 255
     f9c:	7f ef       	ldi	r23, 0xFF	; 255
     f9e:	02 c0       	rjmp	.+4      	; 0xfa4 <__fpcmp_parts_f+0xac>
     fa0:	60 e0       	ldi	r22, 0x00	; 0
     fa2:	70 e0       	ldi	r23, 0x00	; 0
     fa4:	cb 01       	movw	r24, r22
     fa6:	1f 91       	pop	r17
     fa8:	08 95       	ret

00000faa <CLCD_voidInit>:
#include "CLCD_interface.h"
#include "DIO_interface.h"


void CLCD_voidInit(void)
{
     faa:	df 93       	push	r29
     fac:	cf 93       	push	r28
     fae:	cd b7       	in	r28, 0x3d	; 61
     fb0:	de b7       	in	r29, 0x3e	; 62
     fb2:	2e 97       	sbiw	r28, 0x0e	; 14
     fb4:	0f b6       	in	r0, 0x3f	; 63
     fb6:	f8 94       	cli
     fb8:	de bf       	out	0x3e, r29	; 62
     fba:	0f be       	out	0x3f, r0	; 63
     fbc:	cd bf       	out	0x3d, r28	; 61
     fbe:	80 e0       	ldi	r24, 0x00	; 0
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	a0 e2       	ldi	r26, 0x20	; 32
     fc4:	b2 e4       	ldi	r27, 0x42	; 66
     fc6:	8b 87       	std	Y+11, r24	; 0x0b
     fc8:	9c 87       	std	Y+12, r25	; 0x0c
     fca:	ad 87       	std	Y+13, r26	; 0x0d
     fcc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fce:	6b 85       	ldd	r22, Y+11	; 0x0b
     fd0:	7c 85       	ldd	r23, Y+12	; 0x0c
     fd2:	8d 85       	ldd	r24, Y+13	; 0x0d
     fd4:	9e 85       	ldd	r25, Y+14	; 0x0e
     fd6:	20 e0       	ldi	r18, 0x00	; 0
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	4a ef       	ldi	r20, 0xFA	; 250
     fdc:	54 e4       	ldi	r21, 0x44	; 68
     fde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fe2:	dc 01       	movw	r26, r24
     fe4:	cb 01       	movw	r24, r22
     fe6:	8f 83       	std	Y+7, r24	; 0x07
     fe8:	98 87       	std	Y+8, r25	; 0x08
     fea:	a9 87       	std	Y+9, r26	; 0x09
     fec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     fee:	6f 81       	ldd	r22, Y+7	; 0x07
     ff0:	78 85       	ldd	r23, Y+8	; 0x08
     ff2:	89 85       	ldd	r24, Y+9	; 0x09
     ff4:	9a 85       	ldd	r25, Y+10	; 0x0a
     ff6:	20 e0       	ldi	r18, 0x00	; 0
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	40 e8       	ldi	r20, 0x80	; 128
     ffc:	5f e3       	ldi	r21, 0x3F	; 63
     ffe:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    1002:	88 23       	and	r24, r24
    1004:	2c f4       	brge	.+10     	; 0x1010 <CLCD_voidInit+0x66>
		__ticks = 1;
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	9e 83       	std	Y+6, r25	; 0x06
    100c:	8d 83       	std	Y+5, r24	; 0x05
    100e:	3f c0       	rjmp	.+126    	; 0x108e <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    1010:	6f 81       	ldd	r22, Y+7	; 0x07
    1012:	78 85       	ldd	r23, Y+8	; 0x08
    1014:	89 85       	ldd	r24, Y+9	; 0x09
    1016:	9a 85       	ldd	r25, Y+10	; 0x0a
    1018:	20 e0       	ldi	r18, 0x00	; 0
    101a:	3f ef       	ldi	r19, 0xFF	; 255
    101c:	4f e7       	ldi	r20, 0x7F	; 127
    101e:	57 e4       	ldi	r21, 0x47	; 71
    1020:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    1024:	18 16       	cp	r1, r24
    1026:	4c f5       	brge	.+82     	; 0x107a <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1028:	6b 85       	ldd	r22, Y+11	; 0x0b
    102a:	7c 85       	ldd	r23, Y+12	; 0x0c
    102c:	8d 85       	ldd	r24, Y+13	; 0x0d
    102e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1030:	20 e0       	ldi	r18, 0x00	; 0
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	40 e2       	ldi	r20, 0x20	; 32
    1036:	51 e4       	ldi	r21, 0x41	; 65
    1038:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    103c:	dc 01       	movw	r26, r24
    103e:	cb 01       	movw	r24, r22
    1040:	bc 01       	movw	r22, r24
    1042:	cd 01       	movw	r24, r26
    1044:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1048:	dc 01       	movw	r26, r24
    104a:	cb 01       	movw	r24, r22
    104c:	9e 83       	std	Y+6, r25	; 0x06
    104e:	8d 83       	std	Y+5, r24	; 0x05
    1050:	0f c0       	rjmp	.+30     	; 0x1070 <CLCD_voidInit+0xc6>
    1052:	88 ec       	ldi	r24, 0xC8	; 200
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	9c 83       	std	Y+4, r25	; 0x04
    1058:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    105a:	8b 81       	ldd	r24, Y+3	; 0x03
    105c:	9c 81       	ldd	r25, Y+4	; 0x04
    105e:	01 97       	sbiw	r24, 0x01	; 1
    1060:	f1 f7       	brne	.-4      	; 0x105e <CLCD_voidInit+0xb4>
    1062:	9c 83       	std	Y+4, r25	; 0x04
    1064:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1066:	8d 81       	ldd	r24, Y+5	; 0x05
    1068:	9e 81       	ldd	r25, Y+6	; 0x06
    106a:	01 97       	sbiw	r24, 0x01	; 1
    106c:	9e 83       	std	Y+6, r25	; 0x06
    106e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1070:	8d 81       	ldd	r24, Y+5	; 0x05
    1072:	9e 81       	ldd	r25, Y+6	; 0x06
    1074:	00 97       	sbiw	r24, 0x00	; 0
    1076:	69 f7       	brne	.-38     	; 0x1052 <CLCD_voidInit+0xa8>
    1078:	14 c0       	rjmp	.+40     	; 0x10a2 <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    107a:	6f 81       	ldd	r22, Y+7	; 0x07
    107c:	78 85       	ldd	r23, Y+8	; 0x08
    107e:	89 85       	ldd	r24, Y+9	; 0x09
    1080:	9a 85       	ldd	r25, Y+10	; 0x0a
    1082:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1086:	dc 01       	movw	r26, r24
    1088:	cb 01       	movw	r24, r22
    108a:	9e 83       	std	Y+6, r25	; 0x06
    108c:	8d 83       	std	Y+5, r24	; 0x05
    108e:	8d 81       	ldd	r24, Y+5	; 0x05
    1090:	9e 81       	ldd	r25, Y+6	; 0x06
    1092:	9a 83       	std	Y+2, r25	; 0x02
    1094:	89 83       	std	Y+1, r24	; 0x01
    1096:	89 81       	ldd	r24, Y+1	; 0x01
    1098:	9a 81       	ldd	r25, Y+2	; 0x02
    109a:	01 97       	sbiw	r24, 0x01	; 1
    109c:	f1 f7       	brne	.-4      	; 0x109a <CLCD_voidInit+0xf0>
    109e:	9a 83       	std	Y+2, r25	; 0x02
    10a0:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(40);

	CLCD_voidSendCommand(CLCD_CMD_RETURN_HOME);
    10a2:	82 e0       	ldi	r24, 0x02	; 2
    10a4:	0e 94 69 08 	call	0x10d2	; 0x10d2 <CLCD_voidSendCommand>

	/*Function Set Command
	 * 8 bit mode
	 * Activate the 2 lines
	 * Font Type is 5x8 (5x7) */
	CLCD_voidSendCommand(CLCD_CMD_FUNCTION_SET);
    10a8:	88 e2       	ldi	r24, 0x28	; 40
    10aa:	0e 94 69 08 	call	0x10d2	; 0x10d2 <CLCD_voidSendCommand>

	/*Display ON/OFF Control Command
	 *set display: ON
	 *Cursor is Disabled
	 *Cursor Blinking is OFF  */
	CLCD_voidSendCommand(CLCD_CMD_DISPLAY_ON_OFF_CTRL);
    10ae:	8c e0       	ldi	r24, 0x0C	; 12
    10b0:	0e 94 69 08 	call	0x10d2	; 0x10d2 <CLCD_voidSendCommand>

	/*Clearing LCD Display*/
	CLCD_voidSendCommand(CLCD_CMD_CLEAR_DISPLAY);
    10b4:	81 e0       	ldi	r24, 0x01	; 1
    10b6:	0e 94 69 08 	call	0x10d2	; 0x10d2 <CLCD_voidSendCommand>

	/*Entry mode Set*/
	CLCD_voidSendCommand(CLCD_CMD_ENTRY_MODE_SET);
    10ba:	86 e0       	ldi	r24, 0x06	; 6
    10bc:	0e 94 69 08 	call	0x10d2	; 0x10d2 <CLCD_voidSendCommand>

}
    10c0:	2e 96       	adiw	r28, 0x0e	; 14
    10c2:	0f b6       	in	r0, 0x3f	; 63
    10c4:	f8 94       	cli
    10c6:	de bf       	out	0x3e, r29	; 62
    10c8:	0f be       	out	0x3f, r0	; 63
    10ca:	cd bf       	out	0x3d, r28	; 61
    10cc:	cf 91       	pop	r28
    10ce:	df 91       	pop	r29
    10d0:	08 95       	ret

000010d2 <CLCD_voidSendCommand>:


void CLCD_voidSendCommand(u8 Copy_u8Command)
{
    10d2:	df 93       	push	r29
    10d4:	cf 93       	push	r28
    10d6:	cd b7       	in	r28, 0x3d	; 61
    10d8:	de b7       	in	r29, 0x3e	; 62
    10da:	e9 97       	sbiw	r28, 0x39	; 57
    10dc:	0f b6       	in	r0, 0x3f	; 63
    10de:	f8 94       	cli
    10e0:	de bf       	out	0x3e, r29	; 62
    10e2:	0f be       	out	0x3f, r0	; 63
    10e4:	cd bf       	out	0x3d, r28	; 61
    10e6:	89 af       	std	Y+57, r24	; 0x39
	/*SET RS PIN TO LOW*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_LOW);
    10e8:	80 e0       	ldi	r24, 0x00	; 0
    10ea:	63 e0       	ldi	r22, 0x03	; 3
    10ec:	40 e0       	ldi	r20, 0x00	; 0
    10ee:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <DIO_u8SetPinValue>
	_delay_ms(2);

	#elif CLCD_MODE == 4

	/*READING THE COMMAD FROM DATA PORT*/
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D4,GET_BIT(Copy_u8Command,4));
    10f2:	89 ad       	ldd	r24, Y+57	; 0x39
    10f4:	82 95       	swap	r24
    10f6:	8f 70       	andi	r24, 0x0F	; 15
    10f8:	98 2f       	mov	r25, r24
    10fa:	91 70       	andi	r25, 0x01	; 1
    10fc:	81 e0       	ldi	r24, 0x01	; 1
    10fe:	60 e0       	ldi	r22, 0x00	; 0
    1100:	49 2f       	mov	r20, r25
    1102:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D5,GET_BIT(Copy_u8Command,5));
    1106:	89 ad       	ldd	r24, Y+57	; 0x39
    1108:	82 95       	swap	r24
    110a:	86 95       	lsr	r24
    110c:	87 70       	andi	r24, 0x07	; 7
    110e:	98 2f       	mov	r25, r24
    1110:	91 70       	andi	r25, 0x01	; 1
    1112:	81 e0       	ldi	r24, 0x01	; 1
    1114:	61 e0       	ldi	r22, 0x01	; 1
    1116:	49 2f       	mov	r20, r25
    1118:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D6,GET_BIT(Copy_u8Command,6));
    111c:	89 ad       	ldd	r24, Y+57	; 0x39
    111e:	82 95       	swap	r24
    1120:	86 95       	lsr	r24
    1122:	86 95       	lsr	r24
    1124:	83 70       	andi	r24, 0x03	; 3
    1126:	98 2f       	mov	r25, r24
    1128:	91 70       	andi	r25, 0x01	; 1
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	62 e0       	ldi	r22, 0x02	; 2
    112e:	49 2f       	mov	r20, r25
    1130:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D7,GET_BIT(Copy_u8Command,7));
    1134:	89 ad       	ldd	r24, Y+57	; 0x39
    1136:	98 2f       	mov	r25, r24
    1138:	99 1f       	adc	r25, r25
    113a:	99 27       	eor	r25, r25
    113c:	99 1f       	adc	r25, r25
    113e:	81 e0       	ldi	r24, 0x01	; 1
    1140:	64 e0       	ldi	r22, 0x04	; 4
    1142:	49 2f       	mov	r20, r25
    1144:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <DIO_u8SetPinValue>


	/*ENABLE PULSE*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    1148:	80 e0       	ldi	r24, 0x00	; 0
    114a:	62 e0       	ldi	r22, 0x02	; 2
    114c:	41 e0       	ldi	r20, 0x01	; 1
    114e:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <DIO_u8SetPinValue>
    1152:	80 e0       	ldi	r24, 0x00	; 0
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	a0 e0       	ldi	r26, 0x00	; 0
    1158:	b0 e4       	ldi	r27, 0x40	; 64
    115a:	8d ab       	std	Y+53, r24	; 0x35
    115c:	9e ab       	std	Y+54, r25	; 0x36
    115e:	af ab       	std	Y+55, r26	; 0x37
    1160:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1162:	6d a9       	ldd	r22, Y+53	; 0x35
    1164:	7e a9       	ldd	r23, Y+54	; 0x36
    1166:	8f a9       	ldd	r24, Y+55	; 0x37
    1168:	98 ad       	ldd	r25, Y+56	; 0x38
    116a:	20 e0       	ldi	r18, 0x00	; 0
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	4a ef       	ldi	r20, 0xFA	; 250
    1170:	54 e4       	ldi	r21, 0x44	; 68
    1172:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1176:	dc 01       	movw	r26, r24
    1178:	cb 01       	movw	r24, r22
    117a:	89 ab       	std	Y+49, r24	; 0x31
    117c:	9a ab       	std	Y+50, r25	; 0x32
    117e:	ab ab       	std	Y+51, r26	; 0x33
    1180:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1182:	69 a9       	ldd	r22, Y+49	; 0x31
    1184:	7a a9       	ldd	r23, Y+50	; 0x32
    1186:	8b a9       	ldd	r24, Y+51	; 0x33
    1188:	9c a9       	ldd	r25, Y+52	; 0x34
    118a:	20 e0       	ldi	r18, 0x00	; 0
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	40 e8       	ldi	r20, 0x80	; 128
    1190:	5f e3       	ldi	r21, 0x3F	; 63
    1192:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    1196:	88 23       	and	r24, r24
    1198:	2c f4       	brge	.+10     	; 0x11a4 <CLCD_voidSendCommand+0xd2>
		__ticks = 1;
    119a:	81 e0       	ldi	r24, 0x01	; 1
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	98 ab       	std	Y+48, r25	; 0x30
    11a0:	8f a7       	std	Y+47, r24	; 0x2f
    11a2:	3f c0       	rjmp	.+126    	; 0x1222 <CLCD_voidSendCommand+0x150>
	else if (__tmp > 65535)
    11a4:	69 a9       	ldd	r22, Y+49	; 0x31
    11a6:	7a a9       	ldd	r23, Y+50	; 0x32
    11a8:	8b a9       	ldd	r24, Y+51	; 0x33
    11aa:	9c a9       	ldd	r25, Y+52	; 0x34
    11ac:	20 e0       	ldi	r18, 0x00	; 0
    11ae:	3f ef       	ldi	r19, 0xFF	; 255
    11b0:	4f e7       	ldi	r20, 0x7F	; 127
    11b2:	57 e4       	ldi	r21, 0x47	; 71
    11b4:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    11b8:	18 16       	cp	r1, r24
    11ba:	4c f5       	brge	.+82     	; 0x120e <CLCD_voidSendCommand+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11bc:	6d a9       	ldd	r22, Y+53	; 0x35
    11be:	7e a9       	ldd	r23, Y+54	; 0x36
    11c0:	8f a9       	ldd	r24, Y+55	; 0x37
    11c2:	98 ad       	ldd	r25, Y+56	; 0x38
    11c4:	20 e0       	ldi	r18, 0x00	; 0
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	40 e2       	ldi	r20, 0x20	; 32
    11ca:	51 e4       	ldi	r21, 0x41	; 65
    11cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11d0:	dc 01       	movw	r26, r24
    11d2:	cb 01       	movw	r24, r22
    11d4:	bc 01       	movw	r22, r24
    11d6:	cd 01       	movw	r24, r26
    11d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11dc:	dc 01       	movw	r26, r24
    11de:	cb 01       	movw	r24, r22
    11e0:	98 ab       	std	Y+48, r25	; 0x30
    11e2:	8f a7       	std	Y+47, r24	; 0x2f
    11e4:	0f c0       	rjmp	.+30     	; 0x1204 <CLCD_voidSendCommand+0x132>
    11e6:	88 ec       	ldi	r24, 0xC8	; 200
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	9e a7       	std	Y+46, r25	; 0x2e
    11ec:	8d a7       	std	Y+45, r24	; 0x2d
    11ee:	8d a5       	ldd	r24, Y+45	; 0x2d
    11f0:	9e a5       	ldd	r25, Y+46	; 0x2e
    11f2:	01 97       	sbiw	r24, 0x01	; 1
    11f4:	f1 f7       	brne	.-4      	; 0x11f2 <CLCD_voidSendCommand+0x120>
    11f6:	9e a7       	std	Y+46, r25	; 0x2e
    11f8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11fa:	8f a5       	ldd	r24, Y+47	; 0x2f
    11fc:	98 a9       	ldd	r25, Y+48	; 0x30
    11fe:	01 97       	sbiw	r24, 0x01	; 1
    1200:	98 ab       	std	Y+48, r25	; 0x30
    1202:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1204:	8f a5       	ldd	r24, Y+47	; 0x2f
    1206:	98 a9       	ldd	r25, Y+48	; 0x30
    1208:	00 97       	sbiw	r24, 0x00	; 0
    120a:	69 f7       	brne	.-38     	; 0x11e6 <CLCD_voidSendCommand+0x114>
    120c:	14 c0       	rjmp	.+40     	; 0x1236 <CLCD_voidSendCommand+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    120e:	69 a9       	ldd	r22, Y+49	; 0x31
    1210:	7a a9       	ldd	r23, Y+50	; 0x32
    1212:	8b a9       	ldd	r24, Y+51	; 0x33
    1214:	9c a9       	ldd	r25, Y+52	; 0x34
    1216:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    121a:	dc 01       	movw	r26, r24
    121c:	cb 01       	movw	r24, r22
    121e:	98 ab       	std	Y+48, r25	; 0x30
    1220:	8f a7       	std	Y+47, r24	; 0x2f
    1222:	8f a5       	ldd	r24, Y+47	; 0x2f
    1224:	98 a9       	ldd	r25, Y+48	; 0x30
    1226:	9c a7       	std	Y+44, r25	; 0x2c
    1228:	8b a7       	std	Y+43, r24	; 0x2b
    122a:	8b a5       	ldd	r24, Y+43	; 0x2b
    122c:	9c a5       	ldd	r25, Y+44	; 0x2c
    122e:	01 97       	sbiw	r24, 0x01	; 1
    1230:	f1 f7       	brne	.-4      	; 0x122e <CLCD_voidSendCommand+0x15c>
    1232:	9c a7       	std	Y+44, r25	; 0x2c
    1234:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    1236:	80 e0       	ldi	r24, 0x00	; 0
    1238:	62 e0       	ldi	r22, 0x02	; 2
    123a:	40 e0       	ldi	r20, 0x00	; 0
    123c:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <DIO_u8SetPinValue>
    1240:	80 e0       	ldi	r24, 0x00	; 0
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	a0 e0       	ldi	r26, 0x00	; 0
    1246:	b0 e4       	ldi	r27, 0x40	; 64
    1248:	8f a3       	std	Y+39, r24	; 0x27
    124a:	98 a7       	std	Y+40, r25	; 0x28
    124c:	a9 a7       	std	Y+41, r26	; 0x29
    124e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1250:	6f a1       	ldd	r22, Y+39	; 0x27
    1252:	78 a5       	ldd	r23, Y+40	; 0x28
    1254:	89 a5       	ldd	r24, Y+41	; 0x29
    1256:	9a a5       	ldd	r25, Y+42	; 0x2a
    1258:	20 e0       	ldi	r18, 0x00	; 0
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	4a ef       	ldi	r20, 0xFA	; 250
    125e:	54 e4       	ldi	r21, 0x44	; 68
    1260:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1264:	dc 01       	movw	r26, r24
    1266:	cb 01       	movw	r24, r22
    1268:	8b a3       	std	Y+35, r24	; 0x23
    126a:	9c a3       	std	Y+36, r25	; 0x24
    126c:	ad a3       	std	Y+37, r26	; 0x25
    126e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1270:	6b a1       	ldd	r22, Y+35	; 0x23
    1272:	7c a1       	ldd	r23, Y+36	; 0x24
    1274:	8d a1       	ldd	r24, Y+37	; 0x25
    1276:	9e a1       	ldd	r25, Y+38	; 0x26
    1278:	20 e0       	ldi	r18, 0x00	; 0
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	40 e8       	ldi	r20, 0x80	; 128
    127e:	5f e3       	ldi	r21, 0x3F	; 63
    1280:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    1284:	88 23       	and	r24, r24
    1286:	2c f4       	brge	.+10     	; 0x1292 <CLCD_voidSendCommand+0x1c0>
		__ticks = 1;
    1288:	81 e0       	ldi	r24, 0x01	; 1
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	9a a3       	std	Y+34, r25	; 0x22
    128e:	89 a3       	std	Y+33, r24	; 0x21
    1290:	3f c0       	rjmp	.+126    	; 0x1310 <CLCD_voidSendCommand+0x23e>
	else if (__tmp > 65535)
    1292:	6b a1       	ldd	r22, Y+35	; 0x23
    1294:	7c a1       	ldd	r23, Y+36	; 0x24
    1296:	8d a1       	ldd	r24, Y+37	; 0x25
    1298:	9e a1       	ldd	r25, Y+38	; 0x26
    129a:	20 e0       	ldi	r18, 0x00	; 0
    129c:	3f ef       	ldi	r19, 0xFF	; 255
    129e:	4f e7       	ldi	r20, 0x7F	; 127
    12a0:	57 e4       	ldi	r21, 0x47	; 71
    12a2:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    12a6:	18 16       	cp	r1, r24
    12a8:	4c f5       	brge	.+82     	; 0x12fc <CLCD_voidSendCommand+0x22a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12aa:	6f a1       	ldd	r22, Y+39	; 0x27
    12ac:	78 a5       	ldd	r23, Y+40	; 0x28
    12ae:	89 a5       	ldd	r24, Y+41	; 0x29
    12b0:	9a a5       	ldd	r25, Y+42	; 0x2a
    12b2:	20 e0       	ldi	r18, 0x00	; 0
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	40 e2       	ldi	r20, 0x20	; 32
    12b8:	51 e4       	ldi	r21, 0x41	; 65
    12ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12be:	dc 01       	movw	r26, r24
    12c0:	cb 01       	movw	r24, r22
    12c2:	bc 01       	movw	r22, r24
    12c4:	cd 01       	movw	r24, r26
    12c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12ca:	dc 01       	movw	r26, r24
    12cc:	cb 01       	movw	r24, r22
    12ce:	9a a3       	std	Y+34, r25	; 0x22
    12d0:	89 a3       	std	Y+33, r24	; 0x21
    12d2:	0f c0       	rjmp	.+30     	; 0x12f2 <CLCD_voidSendCommand+0x220>
    12d4:	88 ec       	ldi	r24, 0xC8	; 200
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	98 a3       	std	Y+32, r25	; 0x20
    12da:	8f 8f       	std	Y+31, r24	; 0x1f
    12dc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    12de:	98 a1       	ldd	r25, Y+32	; 0x20
    12e0:	01 97       	sbiw	r24, 0x01	; 1
    12e2:	f1 f7       	brne	.-4      	; 0x12e0 <CLCD_voidSendCommand+0x20e>
    12e4:	98 a3       	std	Y+32, r25	; 0x20
    12e6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12e8:	89 a1       	ldd	r24, Y+33	; 0x21
    12ea:	9a a1       	ldd	r25, Y+34	; 0x22
    12ec:	01 97       	sbiw	r24, 0x01	; 1
    12ee:	9a a3       	std	Y+34, r25	; 0x22
    12f0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12f2:	89 a1       	ldd	r24, Y+33	; 0x21
    12f4:	9a a1       	ldd	r25, Y+34	; 0x22
    12f6:	00 97       	sbiw	r24, 0x00	; 0
    12f8:	69 f7       	brne	.-38     	; 0x12d4 <CLCD_voidSendCommand+0x202>
    12fa:	14 c0       	rjmp	.+40     	; 0x1324 <CLCD_voidSendCommand+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12fc:	6b a1       	ldd	r22, Y+35	; 0x23
    12fe:	7c a1       	ldd	r23, Y+36	; 0x24
    1300:	8d a1       	ldd	r24, Y+37	; 0x25
    1302:	9e a1       	ldd	r25, Y+38	; 0x26
    1304:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1308:	dc 01       	movw	r26, r24
    130a:	cb 01       	movw	r24, r22
    130c:	9a a3       	std	Y+34, r25	; 0x22
    130e:	89 a3       	std	Y+33, r24	; 0x21
    1310:	89 a1       	ldd	r24, Y+33	; 0x21
    1312:	9a a1       	ldd	r25, Y+34	; 0x22
    1314:	9e 8f       	std	Y+30, r25	; 0x1e
    1316:	8d 8f       	std	Y+29, r24	; 0x1d
    1318:	8d 8d       	ldd	r24, Y+29	; 0x1d
    131a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    131c:	01 97       	sbiw	r24, 0x01	; 1
    131e:	f1 f7       	brne	.-4      	; 0x131c <CLCD_voidSendCommand+0x24a>
    1320:	9e 8f       	std	Y+30, r25	; 0x1e
    1322:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	/*READING THE COMMAD FROM DATA PORT*/
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D4,GET_BIT(Copy_u8Command,0));
    1324:	89 ad       	ldd	r24, Y+57	; 0x39
    1326:	98 2f       	mov	r25, r24
    1328:	91 70       	andi	r25, 0x01	; 1
    132a:	81 e0       	ldi	r24, 0x01	; 1
    132c:	60 e0       	ldi	r22, 0x00	; 0
    132e:	49 2f       	mov	r20, r25
    1330:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D5,GET_BIT(Copy_u8Command,1));
    1334:	89 ad       	ldd	r24, Y+57	; 0x39
    1336:	86 95       	lsr	r24
    1338:	98 2f       	mov	r25, r24
    133a:	91 70       	andi	r25, 0x01	; 1
    133c:	81 e0       	ldi	r24, 0x01	; 1
    133e:	61 e0       	ldi	r22, 0x01	; 1
    1340:	49 2f       	mov	r20, r25
    1342:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D6,GET_BIT(Copy_u8Command,2));
    1346:	89 ad       	ldd	r24, Y+57	; 0x39
    1348:	86 95       	lsr	r24
    134a:	86 95       	lsr	r24
    134c:	98 2f       	mov	r25, r24
    134e:	91 70       	andi	r25, 0x01	; 1
    1350:	81 e0       	ldi	r24, 0x01	; 1
    1352:	62 e0       	ldi	r22, 0x02	; 2
    1354:	49 2f       	mov	r20, r25
    1356:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D7,GET_BIT(Copy_u8Command,3));
    135a:	89 ad       	ldd	r24, Y+57	; 0x39
    135c:	86 95       	lsr	r24
    135e:	86 95       	lsr	r24
    1360:	86 95       	lsr	r24
    1362:	98 2f       	mov	r25, r24
    1364:	91 70       	andi	r25, 0x01	; 1
    1366:	81 e0       	ldi	r24, 0x01	; 1
    1368:	64 e0       	ldi	r22, 0x04	; 4
    136a:	49 2f       	mov	r20, r25
    136c:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <DIO_u8SetPinValue>

	/*ENABLE PULSE*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    1370:	80 e0       	ldi	r24, 0x00	; 0
    1372:	62 e0       	ldi	r22, 0x02	; 2
    1374:	41 e0       	ldi	r20, 0x01	; 1
    1376:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <DIO_u8SetPinValue>
    137a:	80 e0       	ldi	r24, 0x00	; 0
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	a0 e0       	ldi	r26, 0x00	; 0
    1380:	b0 e4       	ldi	r27, 0x40	; 64
    1382:	89 8f       	std	Y+25, r24	; 0x19
    1384:	9a 8f       	std	Y+26, r25	; 0x1a
    1386:	ab 8f       	std	Y+27, r26	; 0x1b
    1388:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    138a:	69 8d       	ldd	r22, Y+25	; 0x19
    138c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    138e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1390:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1392:	20 e0       	ldi	r18, 0x00	; 0
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	4a ef       	ldi	r20, 0xFA	; 250
    1398:	54 e4       	ldi	r21, 0x44	; 68
    139a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    139e:	dc 01       	movw	r26, r24
    13a0:	cb 01       	movw	r24, r22
    13a2:	8d 8b       	std	Y+21, r24	; 0x15
    13a4:	9e 8b       	std	Y+22, r25	; 0x16
    13a6:	af 8b       	std	Y+23, r26	; 0x17
    13a8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    13aa:	6d 89       	ldd	r22, Y+21	; 0x15
    13ac:	7e 89       	ldd	r23, Y+22	; 0x16
    13ae:	8f 89       	ldd	r24, Y+23	; 0x17
    13b0:	98 8d       	ldd	r25, Y+24	; 0x18
    13b2:	20 e0       	ldi	r18, 0x00	; 0
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	40 e8       	ldi	r20, 0x80	; 128
    13b8:	5f e3       	ldi	r21, 0x3F	; 63
    13ba:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    13be:	88 23       	and	r24, r24
    13c0:	2c f4       	brge	.+10     	; 0x13cc <CLCD_voidSendCommand+0x2fa>
		__ticks = 1;
    13c2:	81 e0       	ldi	r24, 0x01	; 1
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	9c 8b       	std	Y+20, r25	; 0x14
    13c8:	8b 8b       	std	Y+19, r24	; 0x13
    13ca:	3f c0       	rjmp	.+126    	; 0x144a <CLCD_voidSendCommand+0x378>
	else if (__tmp > 65535)
    13cc:	6d 89       	ldd	r22, Y+21	; 0x15
    13ce:	7e 89       	ldd	r23, Y+22	; 0x16
    13d0:	8f 89       	ldd	r24, Y+23	; 0x17
    13d2:	98 8d       	ldd	r25, Y+24	; 0x18
    13d4:	20 e0       	ldi	r18, 0x00	; 0
    13d6:	3f ef       	ldi	r19, 0xFF	; 255
    13d8:	4f e7       	ldi	r20, 0x7F	; 127
    13da:	57 e4       	ldi	r21, 0x47	; 71
    13dc:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    13e0:	18 16       	cp	r1, r24
    13e2:	4c f5       	brge	.+82     	; 0x1436 <CLCD_voidSendCommand+0x364>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13e4:	69 8d       	ldd	r22, Y+25	; 0x19
    13e6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13ec:	20 e0       	ldi	r18, 0x00	; 0
    13ee:	30 e0       	ldi	r19, 0x00	; 0
    13f0:	40 e2       	ldi	r20, 0x20	; 32
    13f2:	51 e4       	ldi	r21, 0x41	; 65
    13f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13f8:	dc 01       	movw	r26, r24
    13fa:	cb 01       	movw	r24, r22
    13fc:	bc 01       	movw	r22, r24
    13fe:	cd 01       	movw	r24, r26
    1400:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1404:	dc 01       	movw	r26, r24
    1406:	cb 01       	movw	r24, r22
    1408:	9c 8b       	std	Y+20, r25	; 0x14
    140a:	8b 8b       	std	Y+19, r24	; 0x13
    140c:	0f c0       	rjmp	.+30     	; 0x142c <CLCD_voidSendCommand+0x35a>
    140e:	88 ec       	ldi	r24, 0xC8	; 200
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	9a 8b       	std	Y+18, r25	; 0x12
    1414:	89 8b       	std	Y+17, r24	; 0x11
    1416:	89 89       	ldd	r24, Y+17	; 0x11
    1418:	9a 89       	ldd	r25, Y+18	; 0x12
    141a:	01 97       	sbiw	r24, 0x01	; 1
    141c:	f1 f7       	brne	.-4      	; 0x141a <CLCD_voidSendCommand+0x348>
    141e:	9a 8b       	std	Y+18, r25	; 0x12
    1420:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1422:	8b 89       	ldd	r24, Y+19	; 0x13
    1424:	9c 89       	ldd	r25, Y+20	; 0x14
    1426:	01 97       	sbiw	r24, 0x01	; 1
    1428:	9c 8b       	std	Y+20, r25	; 0x14
    142a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    142c:	8b 89       	ldd	r24, Y+19	; 0x13
    142e:	9c 89       	ldd	r25, Y+20	; 0x14
    1430:	00 97       	sbiw	r24, 0x00	; 0
    1432:	69 f7       	brne	.-38     	; 0x140e <CLCD_voidSendCommand+0x33c>
    1434:	14 c0       	rjmp	.+40     	; 0x145e <CLCD_voidSendCommand+0x38c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1436:	6d 89       	ldd	r22, Y+21	; 0x15
    1438:	7e 89       	ldd	r23, Y+22	; 0x16
    143a:	8f 89       	ldd	r24, Y+23	; 0x17
    143c:	98 8d       	ldd	r25, Y+24	; 0x18
    143e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1442:	dc 01       	movw	r26, r24
    1444:	cb 01       	movw	r24, r22
    1446:	9c 8b       	std	Y+20, r25	; 0x14
    1448:	8b 8b       	std	Y+19, r24	; 0x13
    144a:	8b 89       	ldd	r24, Y+19	; 0x13
    144c:	9c 89       	ldd	r25, Y+20	; 0x14
    144e:	98 8b       	std	Y+16, r25	; 0x10
    1450:	8f 87       	std	Y+15, r24	; 0x0f
    1452:	8f 85       	ldd	r24, Y+15	; 0x0f
    1454:	98 89       	ldd	r25, Y+16	; 0x10
    1456:	01 97       	sbiw	r24, 0x01	; 1
    1458:	f1 f7       	brne	.-4      	; 0x1456 <CLCD_voidSendCommand+0x384>
    145a:	98 8b       	std	Y+16, r25	; 0x10
    145c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    145e:	80 e0       	ldi	r24, 0x00	; 0
    1460:	62 e0       	ldi	r22, 0x02	; 2
    1462:	40 e0       	ldi	r20, 0x00	; 0
    1464:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <DIO_u8SetPinValue>
    1468:	80 e0       	ldi	r24, 0x00	; 0
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	a0 e0       	ldi	r26, 0x00	; 0
    146e:	b0 e4       	ldi	r27, 0x40	; 64
    1470:	8b 87       	std	Y+11, r24	; 0x0b
    1472:	9c 87       	std	Y+12, r25	; 0x0c
    1474:	ad 87       	std	Y+13, r26	; 0x0d
    1476:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1478:	6b 85       	ldd	r22, Y+11	; 0x0b
    147a:	7c 85       	ldd	r23, Y+12	; 0x0c
    147c:	8d 85       	ldd	r24, Y+13	; 0x0d
    147e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1480:	20 e0       	ldi	r18, 0x00	; 0
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	4a ef       	ldi	r20, 0xFA	; 250
    1486:	54 e4       	ldi	r21, 0x44	; 68
    1488:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    148c:	dc 01       	movw	r26, r24
    148e:	cb 01       	movw	r24, r22
    1490:	8f 83       	std	Y+7, r24	; 0x07
    1492:	98 87       	std	Y+8, r25	; 0x08
    1494:	a9 87       	std	Y+9, r26	; 0x09
    1496:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1498:	6f 81       	ldd	r22, Y+7	; 0x07
    149a:	78 85       	ldd	r23, Y+8	; 0x08
    149c:	89 85       	ldd	r24, Y+9	; 0x09
    149e:	9a 85       	ldd	r25, Y+10	; 0x0a
    14a0:	20 e0       	ldi	r18, 0x00	; 0
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	40 e8       	ldi	r20, 0x80	; 128
    14a6:	5f e3       	ldi	r21, 0x3F	; 63
    14a8:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    14ac:	88 23       	and	r24, r24
    14ae:	2c f4       	brge	.+10     	; 0x14ba <CLCD_voidSendCommand+0x3e8>
		__ticks = 1;
    14b0:	81 e0       	ldi	r24, 0x01	; 1
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	9e 83       	std	Y+6, r25	; 0x06
    14b6:	8d 83       	std	Y+5, r24	; 0x05
    14b8:	3f c0       	rjmp	.+126    	; 0x1538 <CLCD_voidSendCommand+0x466>
	else if (__tmp > 65535)
    14ba:	6f 81       	ldd	r22, Y+7	; 0x07
    14bc:	78 85       	ldd	r23, Y+8	; 0x08
    14be:	89 85       	ldd	r24, Y+9	; 0x09
    14c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    14c2:	20 e0       	ldi	r18, 0x00	; 0
    14c4:	3f ef       	ldi	r19, 0xFF	; 255
    14c6:	4f e7       	ldi	r20, 0x7F	; 127
    14c8:	57 e4       	ldi	r21, 0x47	; 71
    14ca:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    14ce:	18 16       	cp	r1, r24
    14d0:	4c f5       	brge	.+82     	; 0x1524 <CLCD_voidSendCommand+0x452>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    14d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    14d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    14d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    14da:	20 e0       	ldi	r18, 0x00	; 0
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	40 e2       	ldi	r20, 0x20	; 32
    14e0:	51 e4       	ldi	r21, 0x41	; 65
    14e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14e6:	dc 01       	movw	r26, r24
    14e8:	cb 01       	movw	r24, r22
    14ea:	bc 01       	movw	r22, r24
    14ec:	cd 01       	movw	r24, r26
    14ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14f2:	dc 01       	movw	r26, r24
    14f4:	cb 01       	movw	r24, r22
    14f6:	9e 83       	std	Y+6, r25	; 0x06
    14f8:	8d 83       	std	Y+5, r24	; 0x05
    14fa:	0f c0       	rjmp	.+30     	; 0x151a <CLCD_voidSendCommand+0x448>
    14fc:	88 ec       	ldi	r24, 0xC8	; 200
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	9c 83       	std	Y+4, r25	; 0x04
    1502:	8b 83       	std	Y+3, r24	; 0x03
    1504:	8b 81       	ldd	r24, Y+3	; 0x03
    1506:	9c 81       	ldd	r25, Y+4	; 0x04
    1508:	01 97       	sbiw	r24, 0x01	; 1
    150a:	f1 f7       	brne	.-4      	; 0x1508 <CLCD_voidSendCommand+0x436>
    150c:	9c 83       	std	Y+4, r25	; 0x04
    150e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1510:	8d 81       	ldd	r24, Y+5	; 0x05
    1512:	9e 81       	ldd	r25, Y+6	; 0x06
    1514:	01 97       	sbiw	r24, 0x01	; 1
    1516:	9e 83       	std	Y+6, r25	; 0x06
    1518:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    151a:	8d 81       	ldd	r24, Y+5	; 0x05
    151c:	9e 81       	ldd	r25, Y+6	; 0x06
    151e:	00 97       	sbiw	r24, 0x00	; 0
    1520:	69 f7       	brne	.-38     	; 0x14fc <CLCD_voidSendCommand+0x42a>
    1522:	14 c0       	rjmp	.+40     	; 0x154c <CLCD_voidSendCommand+0x47a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1524:	6f 81       	ldd	r22, Y+7	; 0x07
    1526:	78 85       	ldd	r23, Y+8	; 0x08
    1528:	89 85       	ldd	r24, Y+9	; 0x09
    152a:	9a 85       	ldd	r25, Y+10	; 0x0a
    152c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1530:	dc 01       	movw	r26, r24
    1532:	cb 01       	movw	r24, r22
    1534:	9e 83       	std	Y+6, r25	; 0x06
    1536:	8d 83       	std	Y+5, r24	; 0x05
    1538:	8d 81       	ldd	r24, Y+5	; 0x05
    153a:	9e 81       	ldd	r25, Y+6	; 0x06
    153c:	9a 83       	std	Y+2, r25	; 0x02
    153e:	89 83       	std	Y+1, r24	; 0x01
    1540:	89 81       	ldd	r24, Y+1	; 0x01
    1542:	9a 81       	ldd	r25, Y+2	; 0x02
    1544:	01 97       	sbiw	r24, 0x01	; 1
    1546:	f1 f7       	brne	.-4      	; 0x1544 <CLCD_voidSendCommand+0x472>
    1548:	9a 83       	std	Y+2, r25	; 0x02
    154a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	#else
	#endif

}
    154c:	e9 96       	adiw	r28, 0x39	; 57
    154e:	0f b6       	in	r0, 0x3f	; 63
    1550:	f8 94       	cli
    1552:	de bf       	out	0x3e, r29	; 62
    1554:	0f be       	out	0x3f, r0	; 63
    1556:	cd bf       	out	0x3d, r28	; 61
    1558:	cf 91       	pop	r28
    155a:	df 91       	pop	r29
    155c:	08 95       	ret

0000155e <CLCD_voidSendData>:

void CLCD_voidSendData(u8 Copy_u8Data)
{
    155e:	df 93       	push	r29
    1560:	cf 93       	push	r28
    1562:	cd b7       	in	r28, 0x3d	; 61
    1564:	de b7       	in	r29, 0x3e	; 62
    1566:	e9 97       	sbiw	r28, 0x39	; 57
    1568:	0f b6       	in	r0, 0x3f	; 63
    156a:	f8 94       	cli
    156c:	de bf       	out	0x3e, r29	; 62
    156e:	0f be       	out	0x3f, r0	; 63
    1570:	cd bf       	out	0x3d, r28	; 61
    1572:	89 af       	std	Y+57, r24	; 0x39
	/*SET RS PIN TO HIGH*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_HIGH);
    1574:	80 e0       	ldi	r24, 0x00	; 0
    1576:	63 e0       	ldi	r22, 0x03	; 3
    1578:	41 e0       	ldi	r20, 0x01	; 1
    157a:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
	_delay_ms(2);

	#elif CLCD_MODE == 4
	/*READING THE COMMAD FROM DATA PORT*/
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D4,GET_BIT(Copy_u8Data,4));
    157e:	89 ad       	ldd	r24, Y+57	; 0x39
    1580:	82 95       	swap	r24
    1582:	8f 70       	andi	r24, 0x0F	; 15
    1584:	98 2f       	mov	r25, r24
    1586:	91 70       	andi	r25, 0x01	; 1
    1588:	81 e0       	ldi	r24, 0x01	; 1
    158a:	60 e0       	ldi	r22, 0x00	; 0
    158c:	49 2f       	mov	r20, r25
    158e:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D5,GET_BIT(Copy_u8Data,5));
    1592:	89 ad       	ldd	r24, Y+57	; 0x39
    1594:	82 95       	swap	r24
    1596:	86 95       	lsr	r24
    1598:	87 70       	andi	r24, 0x07	; 7
    159a:	98 2f       	mov	r25, r24
    159c:	91 70       	andi	r25, 0x01	; 1
    159e:	81 e0       	ldi	r24, 0x01	; 1
    15a0:	61 e0       	ldi	r22, 0x01	; 1
    15a2:	49 2f       	mov	r20, r25
    15a4:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D6,GET_BIT(Copy_u8Data,6));
    15a8:	89 ad       	ldd	r24, Y+57	; 0x39
    15aa:	82 95       	swap	r24
    15ac:	86 95       	lsr	r24
    15ae:	86 95       	lsr	r24
    15b0:	83 70       	andi	r24, 0x03	; 3
    15b2:	98 2f       	mov	r25, r24
    15b4:	91 70       	andi	r25, 0x01	; 1
    15b6:	81 e0       	ldi	r24, 0x01	; 1
    15b8:	62 e0       	ldi	r22, 0x02	; 2
    15ba:	49 2f       	mov	r20, r25
    15bc:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D7,GET_BIT(Copy_u8Data,7));
    15c0:	89 ad       	ldd	r24, Y+57	; 0x39
    15c2:	98 2f       	mov	r25, r24
    15c4:	99 1f       	adc	r25, r25
    15c6:	99 27       	eor	r25, r25
    15c8:	99 1f       	adc	r25, r25
    15ca:	81 e0       	ldi	r24, 0x01	; 1
    15cc:	64 e0       	ldi	r22, 0x04	; 4
    15ce:	49 2f       	mov	r20, r25
    15d0:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <DIO_u8SetPinValue>


	/*ENABLE PULSE*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    15d4:	80 e0       	ldi	r24, 0x00	; 0
    15d6:	62 e0       	ldi	r22, 0x02	; 2
    15d8:	41 e0       	ldi	r20, 0x01	; 1
    15da:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <DIO_u8SetPinValue>
    15de:	80 e0       	ldi	r24, 0x00	; 0
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	a0 e0       	ldi	r26, 0x00	; 0
    15e4:	b0 e4       	ldi	r27, 0x40	; 64
    15e6:	8d ab       	std	Y+53, r24	; 0x35
    15e8:	9e ab       	std	Y+54, r25	; 0x36
    15ea:	af ab       	std	Y+55, r26	; 0x37
    15ec:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15ee:	6d a9       	ldd	r22, Y+53	; 0x35
    15f0:	7e a9       	ldd	r23, Y+54	; 0x36
    15f2:	8f a9       	ldd	r24, Y+55	; 0x37
    15f4:	98 ad       	ldd	r25, Y+56	; 0x38
    15f6:	20 e0       	ldi	r18, 0x00	; 0
    15f8:	30 e0       	ldi	r19, 0x00	; 0
    15fa:	4a ef       	ldi	r20, 0xFA	; 250
    15fc:	54 e4       	ldi	r21, 0x44	; 68
    15fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1602:	dc 01       	movw	r26, r24
    1604:	cb 01       	movw	r24, r22
    1606:	89 ab       	std	Y+49, r24	; 0x31
    1608:	9a ab       	std	Y+50, r25	; 0x32
    160a:	ab ab       	std	Y+51, r26	; 0x33
    160c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    160e:	69 a9       	ldd	r22, Y+49	; 0x31
    1610:	7a a9       	ldd	r23, Y+50	; 0x32
    1612:	8b a9       	ldd	r24, Y+51	; 0x33
    1614:	9c a9       	ldd	r25, Y+52	; 0x34
    1616:	20 e0       	ldi	r18, 0x00	; 0
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	40 e8       	ldi	r20, 0x80	; 128
    161c:	5f e3       	ldi	r21, 0x3F	; 63
    161e:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    1622:	88 23       	and	r24, r24
    1624:	2c f4       	brge	.+10     	; 0x1630 <CLCD_voidSendData+0xd2>
		__ticks = 1;
    1626:	81 e0       	ldi	r24, 0x01	; 1
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	98 ab       	std	Y+48, r25	; 0x30
    162c:	8f a7       	std	Y+47, r24	; 0x2f
    162e:	3f c0       	rjmp	.+126    	; 0x16ae <CLCD_voidSendData+0x150>
	else if (__tmp > 65535)
    1630:	69 a9       	ldd	r22, Y+49	; 0x31
    1632:	7a a9       	ldd	r23, Y+50	; 0x32
    1634:	8b a9       	ldd	r24, Y+51	; 0x33
    1636:	9c a9       	ldd	r25, Y+52	; 0x34
    1638:	20 e0       	ldi	r18, 0x00	; 0
    163a:	3f ef       	ldi	r19, 0xFF	; 255
    163c:	4f e7       	ldi	r20, 0x7F	; 127
    163e:	57 e4       	ldi	r21, 0x47	; 71
    1640:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    1644:	18 16       	cp	r1, r24
    1646:	4c f5       	brge	.+82     	; 0x169a <CLCD_voidSendData+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1648:	6d a9       	ldd	r22, Y+53	; 0x35
    164a:	7e a9       	ldd	r23, Y+54	; 0x36
    164c:	8f a9       	ldd	r24, Y+55	; 0x37
    164e:	98 ad       	ldd	r25, Y+56	; 0x38
    1650:	20 e0       	ldi	r18, 0x00	; 0
    1652:	30 e0       	ldi	r19, 0x00	; 0
    1654:	40 e2       	ldi	r20, 0x20	; 32
    1656:	51 e4       	ldi	r21, 0x41	; 65
    1658:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    165c:	dc 01       	movw	r26, r24
    165e:	cb 01       	movw	r24, r22
    1660:	bc 01       	movw	r22, r24
    1662:	cd 01       	movw	r24, r26
    1664:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1668:	dc 01       	movw	r26, r24
    166a:	cb 01       	movw	r24, r22
    166c:	98 ab       	std	Y+48, r25	; 0x30
    166e:	8f a7       	std	Y+47, r24	; 0x2f
    1670:	0f c0       	rjmp	.+30     	; 0x1690 <CLCD_voidSendData+0x132>
    1672:	88 ec       	ldi	r24, 0xC8	; 200
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	9e a7       	std	Y+46, r25	; 0x2e
    1678:	8d a7       	std	Y+45, r24	; 0x2d
    167a:	8d a5       	ldd	r24, Y+45	; 0x2d
    167c:	9e a5       	ldd	r25, Y+46	; 0x2e
    167e:	01 97       	sbiw	r24, 0x01	; 1
    1680:	f1 f7       	brne	.-4      	; 0x167e <CLCD_voidSendData+0x120>
    1682:	9e a7       	std	Y+46, r25	; 0x2e
    1684:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1686:	8f a5       	ldd	r24, Y+47	; 0x2f
    1688:	98 a9       	ldd	r25, Y+48	; 0x30
    168a:	01 97       	sbiw	r24, 0x01	; 1
    168c:	98 ab       	std	Y+48, r25	; 0x30
    168e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1690:	8f a5       	ldd	r24, Y+47	; 0x2f
    1692:	98 a9       	ldd	r25, Y+48	; 0x30
    1694:	00 97       	sbiw	r24, 0x00	; 0
    1696:	69 f7       	brne	.-38     	; 0x1672 <CLCD_voidSendData+0x114>
    1698:	14 c0       	rjmp	.+40     	; 0x16c2 <CLCD_voidSendData+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    169a:	69 a9       	ldd	r22, Y+49	; 0x31
    169c:	7a a9       	ldd	r23, Y+50	; 0x32
    169e:	8b a9       	ldd	r24, Y+51	; 0x33
    16a0:	9c a9       	ldd	r25, Y+52	; 0x34
    16a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16a6:	dc 01       	movw	r26, r24
    16a8:	cb 01       	movw	r24, r22
    16aa:	98 ab       	std	Y+48, r25	; 0x30
    16ac:	8f a7       	std	Y+47, r24	; 0x2f
    16ae:	8f a5       	ldd	r24, Y+47	; 0x2f
    16b0:	98 a9       	ldd	r25, Y+48	; 0x30
    16b2:	9c a7       	std	Y+44, r25	; 0x2c
    16b4:	8b a7       	std	Y+43, r24	; 0x2b
    16b6:	8b a5       	ldd	r24, Y+43	; 0x2b
    16b8:	9c a5       	ldd	r25, Y+44	; 0x2c
    16ba:	01 97       	sbiw	r24, 0x01	; 1
    16bc:	f1 f7       	brne	.-4      	; 0x16ba <CLCD_voidSendData+0x15c>
    16be:	9c a7       	std	Y+44, r25	; 0x2c
    16c0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    16c2:	80 e0       	ldi	r24, 0x00	; 0
    16c4:	62 e0       	ldi	r22, 0x02	; 2
    16c6:	40 e0       	ldi	r20, 0x00	; 0
    16c8:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <DIO_u8SetPinValue>
    16cc:	80 e0       	ldi	r24, 0x00	; 0
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	a0 e0       	ldi	r26, 0x00	; 0
    16d2:	b0 e4       	ldi	r27, 0x40	; 64
    16d4:	8f a3       	std	Y+39, r24	; 0x27
    16d6:	98 a7       	std	Y+40, r25	; 0x28
    16d8:	a9 a7       	std	Y+41, r26	; 0x29
    16da:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16dc:	6f a1       	ldd	r22, Y+39	; 0x27
    16de:	78 a5       	ldd	r23, Y+40	; 0x28
    16e0:	89 a5       	ldd	r24, Y+41	; 0x29
    16e2:	9a a5       	ldd	r25, Y+42	; 0x2a
    16e4:	20 e0       	ldi	r18, 0x00	; 0
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	4a ef       	ldi	r20, 0xFA	; 250
    16ea:	54 e4       	ldi	r21, 0x44	; 68
    16ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16f0:	dc 01       	movw	r26, r24
    16f2:	cb 01       	movw	r24, r22
    16f4:	8b a3       	std	Y+35, r24	; 0x23
    16f6:	9c a3       	std	Y+36, r25	; 0x24
    16f8:	ad a3       	std	Y+37, r26	; 0x25
    16fa:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    16fc:	6b a1       	ldd	r22, Y+35	; 0x23
    16fe:	7c a1       	ldd	r23, Y+36	; 0x24
    1700:	8d a1       	ldd	r24, Y+37	; 0x25
    1702:	9e a1       	ldd	r25, Y+38	; 0x26
    1704:	20 e0       	ldi	r18, 0x00	; 0
    1706:	30 e0       	ldi	r19, 0x00	; 0
    1708:	40 e8       	ldi	r20, 0x80	; 128
    170a:	5f e3       	ldi	r21, 0x3F	; 63
    170c:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    1710:	88 23       	and	r24, r24
    1712:	2c f4       	brge	.+10     	; 0x171e <CLCD_voidSendData+0x1c0>
		__ticks = 1;
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	9a a3       	std	Y+34, r25	; 0x22
    171a:	89 a3       	std	Y+33, r24	; 0x21
    171c:	3f c0       	rjmp	.+126    	; 0x179c <CLCD_voidSendData+0x23e>
	else if (__tmp > 65535)
    171e:	6b a1       	ldd	r22, Y+35	; 0x23
    1720:	7c a1       	ldd	r23, Y+36	; 0x24
    1722:	8d a1       	ldd	r24, Y+37	; 0x25
    1724:	9e a1       	ldd	r25, Y+38	; 0x26
    1726:	20 e0       	ldi	r18, 0x00	; 0
    1728:	3f ef       	ldi	r19, 0xFF	; 255
    172a:	4f e7       	ldi	r20, 0x7F	; 127
    172c:	57 e4       	ldi	r21, 0x47	; 71
    172e:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    1732:	18 16       	cp	r1, r24
    1734:	4c f5       	brge	.+82     	; 0x1788 <CLCD_voidSendData+0x22a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1736:	6f a1       	ldd	r22, Y+39	; 0x27
    1738:	78 a5       	ldd	r23, Y+40	; 0x28
    173a:	89 a5       	ldd	r24, Y+41	; 0x29
    173c:	9a a5       	ldd	r25, Y+42	; 0x2a
    173e:	20 e0       	ldi	r18, 0x00	; 0
    1740:	30 e0       	ldi	r19, 0x00	; 0
    1742:	40 e2       	ldi	r20, 0x20	; 32
    1744:	51 e4       	ldi	r21, 0x41	; 65
    1746:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    174a:	dc 01       	movw	r26, r24
    174c:	cb 01       	movw	r24, r22
    174e:	bc 01       	movw	r22, r24
    1750:	cd 01       	movw	r24, r26
    1752:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1756:	dc 01       	movw	r26, r24
    1758:	cb 01       	movw	r24, r22
    175a:	9a a3       	std	Y+34, r25	; 0x22
    175c:	89 a3       	std	Y+33, r24	; 0x21
    175e:	0f c0       	rjmp	.+30     	; 0x177e <CLCD_voidSendData+0x220>
    1760:	88 ec       	ldi	r24, 0xC8	; 200
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	98 a3       	std	Y+32, r25	; 0x20
    1766:	8f 8f       	std	Y+31, r24	; 0x1f
    1768:	8f 8d       	ldd	r24, Y+31	; 0x1f
    176a:	98 a1       	ldd	r25, Y+32	; 0x20
    176c:	01 97       	sbiw	r24, 0x01	; 1
    176e:	f1 f7       	brne	.-4      	; 0x176c <CLCD_voidSendData+0x20e>
    1770:	98 a3       	std	Y+32, r25	; 0x20
    1772:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1774:	89 a1       	ldd	r24, Y+33	; 0x21
    1776:	9a a1       	ldd	r25, Y+34	; 0x22
    1778:	01 97       	sbiw	r24, 0x01	; 1
    177a:	9a a3       	std	Y+34, r25	; 0x22
    177c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    177e:	89 a1       	ldd	r24, Y+33	; 0x21
    1780:	9a a1       	ldd	r25, Y+34	; 0x22
    1782:	00 97       	sbiw	r24, 0x00	; 0
    1784:	69 f7       	brne	.-38     	; 0x1760 <CLCD_voidSendData+0x202>
    1786:	14 c0       	rjmp	.+40     	; 0x17b0 <CLCD_voidSendData+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1788:	6b a1       	ldd	r22, Y+35	; 0x23
    178a:	7c a1       	ldd	r23, Y+36	; 0x24
    178c:	8d a1       	ldd	r24, Y+37	; 0x25
    178e:	9e a1       	ldd	r25, Y+38	; 0x26
    1790:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1794:	dc 01       	movw	r26, r24
    1796:	cb 01       	movw	r24, r22
    1798:	9a a3       	std	Y+34, r25	; 0x22
    179a:	89 a3       	std	Y+33, r24	; 0x21
    179c:	89 a1       	ldd	r24, Y+33	; 0x21
    179e:	9a a1       	ldd	r25, Y+34	; 0x22
    17a0:	9e 8f       	std	Y+30, r25	; 0x1e
    17a2:	8d 8f       	std	Y+29, r24	; 0x1d
    17a4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17a6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    17a8:	01 97       	sbiw	r24, 0x01	; 1
    17aa:	f1 f7       	brne	.-4      	; 0x17a8 <CLCD_voidSendData+0x24a>
    17ac:	9e 8f       	std	Y+30, r25	; 0x1e
    17ae:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	/*READING THE COMMAD FROM DATA PORT*/
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D4,GET_BIT(Copy_u8Data,0));
    17b0:	89 ad       	ldd	r24, Y+57	; 0x39
    17b2:	98 2f       	mov	r25, r24
    17b4:	91 70       	andi	r25, 0x01	; 1
    17b6:	81 e0       	ldi	r24, 0x01	; 1
    17b8:	60 e0       	ldi	r22, 0x00	; 0
    17ba:	49 2f       	mov	r20, r25
    17bc:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D5,GET_BIT(Copy_u8Data,1));
    17c0:	89 ad       	ldd	r24, Y+57	; 0x39
    17c2:	86 95       	lsr	r24
    17c4:	98 2f       	mov	r25, r24
    17c6:	91 70       	andi	r25, 0x01	; 1
    17c8:	81 e0       	ldi	r24, 0x01	; 1
    17ca:	61 e0       	ldi	r22, 0x01	; 1
    17cc:	49 2f       	mov	r20, r25
    17ce:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D6,GET_BIT(Copy_u8Data,2));
    17d2:	89 ad       	ldd	r24, Y+57	; 0x39
    17d4:	86 95       	lsr	r24
    17d6:	86 95       	lsr	r24
    17d8:	98 2f       	mov	r25, r24
    17da:	91 70       	andi	r25, 0x01	; 1
    17dc:	81 e0       	ldi	r24, 0x01	; 1
    17de:	62 e0       	ldi	r22, 0x02	; 2
    17e0:	49 2f       	mov	r20, r25
    17e2:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D7,GET_BIT(Copy_u8Data,3));
    17e6:	89 ad       	ldd	r24, Y+57	; 0x39
    17e8:	86 95       	lsr	r24
    17ea:	86 95       	lsr	r24
    17ec:	86 95       	lsr	r24
    17ee:	98 2f       	mov	r25, r24
    17f0:	91 70       	andi	r25, 0x01	; 1
    17f2:	81 e0       	ldi	r24, 0x01	; 1
    17f4:	64 e0       	ldi	r22, 0x04	; 4
    17f6:	49 2f       	mov	r20, r25
    17f8:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <DIO_u8SetPinValue>

	/*ENABLE PULSE*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    17fc:	80 e0       	ldi	r24, 0x00	; 0
    17fe:	62 e0       	ldi	r22, 0x02	; 2
    1800:	41 e0       	ldi	r20, 0x01	; 1
    1802:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <DIO_u8SetPinValue>
    1806:	80 e0       	ldi	r24, 0x00	; 0
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	a0 e0       	ldi	r26, 0x00	; 0
    180c:	b0 e4       	ldi	r27, 0x40	; 64
    180e:	89 8f       	std	Y+25, r24	; 0x19
    1810:	9a 8f       	std	Y+26, r25	; 0x1a
    1812:	ab 8f       	std	Y+27, r26	; 0x1b
    1814:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1816:	69 8d       	ldd	r22, Y+25	; 0x19
    1818:	7a 8d       	ldd	r23, Y+26	; 0x1a
    181a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    181c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    181e:	20 e0       	ldi	r18, 0x00	; 0
    1820:	30 e0       	ldi	r19, 0x00	; 0
    1822:	4a ef       	ldi	r20, 0xFA	; 250
    1824:	54 e4       	ldi	r21, 0x44	; 68
    1826:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    182a:	dc 01       	movw	r26, r24
    182c:	cb 01       	movw	r24, r22
    182e:	8d 8b       	std	Y+21, r24	; 0x15
    1830:	9e 8b       	std	Y+22, r25	; 0x16
    1832:	af 8b       	std	Y+23, r26	; 0x17
    1834:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1836:	6d 89       	ldd	r22, Y+21	; 0x15
    1838:	7e 89       	ldd	r23, Y+22	; 0x16
    183a:	8f 89       	ldd	r24, Y+23	; 0x17
    183c:	98 8d       	ldd	r25, Y+24	; 0x18
    183e:	20 e0       	ldi	r18, 0x00	; 0
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	40 e8       	ldi	r20, 0x80	; 128
    1844:	5f e3       	ldi	r21, 0x3F	; 63
    1846:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    184a:	88 23       	and	r24, r24
    184c:	2c f4       	brge	.+10     	; 0x1858 <CLCD_voidSendData+0x2fa>
		__ticks = 1;
    184e:	81 e0       	ldi	r24, 0x01	; 1
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	9c 8b       	std	Y+20, r25	; 0x14
    1854:	8b 8b       	std	Y+19, r24	; 0x13
    1856:	3f c0       	rjmp	.+126    	; 0x18d6 <CLCD_voidSendData+0x378>
	else if (__tmp > 65535)
    1858:	6d 89       	ldd	r22, Y+21	; 0x15
    185a:	7e 89       	ldd	r23, Y+22	; 0x16
    185c:	8f 89       	ldd	r24, Y+23	; 0x17
    185e:	98 8d       	ldd	r25, Y+24	; 0x18
    1860:	20 e0       	ldi	r18, 0x00	; 0
    1862:	3f ef       	ldi	r19, 0xFF	; 255
    1864:	4f e7       	ldi	r20, 0x7F	; 127
    1866:	57 e4       	ldi	r21, 0x47	; 71
    1868:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    186c:	18 16       	cp	r1, r24
    186e:	4c f5       	brge	.+82     	; 0x18c2 <CLCD_voidSendData+0x364>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1870:	69 8d       	ldd	r22, Y+25	; 0x19
    1872:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1874:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1876:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1878:	20 e0       	ldi	r18, 0x00	; 0
    187a:	30 e0       	ldi	r19, 0x00	; 0
    187c:	40 e2       	ldi	r20, 0x20	; 32
    187e:	51 e4       	ldi	r21, 0x41	; 65
    1880:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1884:	dc 01       	movw	r26, r24
    1886:	cb 01       	movw	r24, r22
    1888:	bc 01       	movw	r22, r24
    188a:	cd 01       	movw	r24, r26
    188c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1890:	dc 01       	movw	r26, r24
    1892:	cb 01       	movw	r24, r22
    1894:	9c 8b       	std	Y+20, r25	; 0x14
    1896:	8b 8b       	std	Y+19, r24	; 0x13
    1898:	0f c0       	rjmp	.+30     	; 0x18b8 <CLCD_voidSendData+0x35a>
    189a:	88 ec       	ldi	r24, 0xC8	; 200
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	9a 8b       	std	Y+18, r25	; 0x12
    18a0:	89 8b       	std	Y+17, r24	; 0x11
    18a2:	89 89       	ldd	r24, Y+17	; 0x11
    18a4:	9a 89       	ldd	r25, Y+18	; 0x12
    18a6:	01 97       	sbiw	r24, 0x01	; 1
    18a8:	f1 f7       	brne	.-4      	; 0x18a6 <CLCD_voidSendData+0x348>
    18aa:	9a 8b       	std	Y+18, r25	; 0x12
    18ac:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18ae:	8b 89       	ldd	r24, Y+19	; 0x13
    18b0:	9c 89       	ldd	r25, Y+20	; 0x14
    18b2:	01 97       	sbiw	r24, 0x01	; 1
    18b4:	9c 8b       	std	Y+20, r25	; 0x14
    18b6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18b8:	8b 89       	ldd	r24, Y+19	; 0x13
    18ba:	9c 89       	ldd	r25, Y+20	; 0x14
    18bc:	00 97       	sbiw	r24, 0x00	; 0
    18be:	69 f7       	brne	.-38     	; 0x189a <CLCD_voidSendData+0x33c>
    18c0:	14 c0       	rjmp	.+40     	; 0x18ea <CLCD_voidSendData+0x38c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18c2:	6d 89       	ldd	r22, Y+21	; 0x15
    18c4:	7e 89       	ldd	r23, Y+22	; 0x16
    18c6:	8f 89       	ldd	r24, Y+23	; 0x17
    18c8:	98 8d       	ldd	r25, Y+24	; 0x18
    18ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18ce:	dc 01       	movw	r26, r24
    18d0:	cb 01       	movw	r24, r22
    18d2:	9c 8b       	std	Y+20, r25	; 0x14
    18d4:	8b 8b       	std	Y+19, r24	; 0x13
    18d6:	8b 89       	ldd	r24, Y+19	; 0x13
    18d8:	9c 89       	ldd	r25, Y+20	; 0x14
    18da:	98 8b       	std	Y+16, r25	; 0x10
    18dc:	8f 87       	std	Y+15, r24	; 0x0f
    18de:	8f 85       	ldd	r24, Y+15	; 0x0f
    18e0:	98 89       	ldd	r25, Y+16	; 0x10
    18e2:	01 97       	sbiw	r24, 0x01	; 1
    18e4:	f1 f7       	brne	.-4      	; 0x18e2 <CLCD_voidSendData+0x384>
    18e6:	98 8b       	std	Y+16, r25	; 0x10
    18e8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    18ea:	80 e0       	ldi	r24, 0x00	; 0
    18ec:	62 e0       	ldi	r22, 0x02	; 2
    18ee:	40 e0       	ldi	r20, 0x00	; 0
    18f0:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <DIO_u8SetPinValue>
    18f4:	80 e0       	ldi	r24, 0x00	; 0
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	a0 e0       	ldi	r26, 0x00	; 0
    18fa:	b0 e4       	ldi	r27, 0x40	; 64
    18fc:	8b 87       	std	Y+11, r24	; 0x0b
    18fe:	9c 87       	std	Y+12, r25	; 0x0c
    1900:	ad 87       	std	Y+13, r26	; 0x0d
    1902:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1904:	6b 85       	ldd	r22, Y+11	; 0x0b
    1906:	7c 85       	ldd	r23, Y+12	; 0x0c
    1908:	8d 85       	ldd	r24, Y+13	; 0x0d
    190a:	9e 85       	ldd	r25, Y+14	; 0x0e
    190c:	20 e0       	ldi	r18, 0x00	; 0
    190e:	30 e0       	ldi	r19, 0x00	; 0
    1910:	4a ef       	ldi	r20, 0xFA	; 250
    1912:	54 e4       	ldi	r21, 0x44	; 68
    1914:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1918:	dc 01       	movw	r26, r24
    191a:	cb 01       	movw	r24, r22
    191c:	8f 83       	std	Y+7, r24	; 0x07
    191e:	98 87       	std	Y+8, r25	; 0x08
    1920:	a9 87       	std	Y+9, r26	; 0x09
    1922:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1924:	6f 81       	ldd	r22, Y+7	; 0x07
    1926:	78 85       	ldd	r23, Y+8	; 0x08
    1928:	89 85       	ldd	r24, Y+9	; 0x09
    192a:	9a 85       	ldd	r25, Y+10	; 0x0a
    192c:	20 e0       	ldi	r18, 0x00	; 0
    192e:	30 e0       	ldi	r19, 0x00	; 0
    1930:	40 e8       	ldi	r20, 0x80	; 128
    1932:	5f e3       	ldi	r21, 0x3F	; 63
    1934:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    1938:	88 23       	and	r24, r24
    193a:	2c f4       	brge	.+10     	; 0x1946 <CLCD_voidSendData+0x3e8>
		__ticks = 1;
    193c:	81 e0       	ldi	r24, 0x01	; 1
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	9e 83       	std	Y+6, r25	; 0x06
    1942:	8d 83       	std	Y+5, r24	; 0x05
    1944:	3f c0       	rjmp	.+126    	; 0x19c4 <CLCD_voidSendData+0x466>
	else if (__tmp > 65535)
    1946:	6f 81       	ldd	r22, Y+7	; 0x07
    1948:	78 85       	ldd	r23, Y+8	; 0x08
    194a:	89 85       	ldd	r24, Y+9	; 0x09
    194c:	9a 85       	ldd	r25, Y+10	; 0x0a
    194e:	20 e0       	ldi	r18, 0x00	; 0
    1950:	3f ef       	ldi	r19, 0xFF	; 255
    1952:	4f e7       	ldi	r20, 0x7F	; 127
    1954:	57 e4       	ldi	r21, 0x47	; 71
    1956:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    195a:	18 16       	cp	r1, r24
    195c:	4c f5       	brge	.+82     	; 0x19b0 <CLCD_voidSendData+0x452>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    195e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1960:	7c 85       	ldd	r23, Y+12	; 0x0c
    1962:	8d 85       	ldd	r24, Y+13	; 0x0d
    1964:	9e 85       	ldd	r25, Y+14	; 0x0e
    1966:	20 e0       	ldi	r18, 0x00	; 0
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	40 e2       	ldi	r20, 0x20	; 32
    196c:	51 e4       	ldi	r21, 0x41	; 65
    196e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1972:	dc 01       	movw	r26, r24
    1974:	cb 01       	movw	r24, r22
    1976:	bc 01       	movw	r22, r24
    1978:	cd 01       	movw	r24, r26
    197a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    197e:	dc 01       	movw	r26, r24
    1980:	cb 01       	movw	r24, r22
    1982:	9e 83       	std	Y+6, r25	; 0x06
    1984:	8d 83       	std	Y+5, r24	; 0x05
    1986:	0f c0       	rjmp	.+30     	; 0x19a6 <CLCD_voidSendData+0x448>
    1988:	88 ec       	ldi	r24, 0xC8	; 200
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	9c 83       	std	Y+4, r25	; 0x04
    198e:	8b 83       	std	Y+3, r24	; 0x03
    1990:	8b 81       	ldd	r24, Y+3	; 0x03
    1992:	9c 81       	ldd	r25, Y+4	; 0x04
    1994:	01 97       	sbiw	r24, 0x01	; 1
    1996:	f1 f7       	brne	.-4      	; 0x1994 <CLCD_voidSendData+0x436>
    1998:	9c 83       	std	Y+4, r25	; 0x04
    199a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    199c:	8d 81       	ldd	r24, Y+5	; 0x05
    199e:	9e 81       	ldd	r25, Y+6	; 0x06
    19a0:	01 97       	sbiw	r24, 0x01	; 1
    19a2:	9e 83       	std	Y+6, r25	; 0x06
    19a4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19a6:	8d 81       	ldd	r24, Y+5	; 0x05
    19a8:	9e 81       	ldd	r25, Y+6	; 0x06
    19aa:	00 97       	sbiw	r24, 0x00	; 0
    19ac:	69 f7       	brne	.-38     	; 0x1988 <CLCD_voidSendData+0x42a>
    19ae:	14 c0       	rjmp	.+40     	; 0x19d8 <CLCD_voidSendData+0x47a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19b0:	6f 81       	ldd	r22, Y+7	; 0x07
    19b2:	78 85       	ldd	r23, Y+8	; 0x08
    19b4:	89 85       	ldd	r24, Y+9	; 0x09
    19b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    19b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19bc:	dc 01       	movw	r26, r24
    19be:	cb 01       	movw	r24, r22
    19c0:	9e 83       	std	Y+6, r25	; 0x06
    19c2:	8d 83       	std	Y+5, r24	; 0x05
    19c4:	8d 81       	ldd	r24, Y+5	; 0x05
    19c6:	9e 81       	ldd	r25, Y+6	; 0x06
    19c8:	9a 83       	std	Y+2, r25	; 0x02
    19ca:	89 83       	std	Y+1, r24	; 0x01
    19cc:	89 81       	ldd	r24, Y+1	; 0x01
    19ce:	9a 81       	ldd	r25, Y+2	; 0x02
    19d0:	01 97       	sbiw	r24, 0x01	; 1
    19d2:	f1 f7       	brne	.-4      	; 0x19d0 <CLCD_voidSendData+0x472>
    19d4:	9a 83       	std	Y+2, r25	; 0x02
    19d6:	89 83       	std	Y+1, r24	; 0x01

	#else

	#endif

}
    19d8:	e9 96       	adiw	r28, 0x39	; 57
    19da:	0f b6       	in	r0, 0x3f	; 63
    19dc:	f8 94       	cli
    19de:	de bf       	out	0x3e, r29	; 62
    19e0:	0f be       	out	0x3f, r0	; 63
    19e2:	cd bf       	out	0x3d, r28	; 61
    19e4:	cf 91       	pop	r28
    19e6:	df 91       	pop	r29
    19e8:	08 95       	ret

000019ea <CLCD_voidSendString>:


void CLCD_voidSendString(const char* Copy_PtrString)
{
    19ea:	df 93       	push	r29
    19ec:	cf 93       	push	r28
    19ee:	00 d0       	rcall	.+0      	; 0x19f0 <CLCD_voidSendString+0x6>
    19f0:	0f 92       	push	r0
    19f2:	cd b7       	in	r28, 0x3d	; 61
    19f4:	de b7       	in	r29, 0x3e	; 62
    19f6:	9b 83       	std	Y+3, r25	; 0x03
    19f8:	8a 83       	std	Y+2, r24	; 0x02
	for (u8 i = 0; Copy_PtrString[i] !='\0'; i++)
    19fa:	19 82       	std	Y+1, r1	; 0x01
    19fc:	0e c0       	rjmp	.+28     	; 0x1a1a <CLCD_voidSendString+0x30>
	{
		CLCD_voidSendData(Copy_PtrString[i]);
    19fe:	89 81       	ldd	r24, Y+1	; 0x01
    1a00:	28 2f       	mov	r18, r24
    1a02:	30 e0       	ldi	r19, 0x00	; 0
    1a04:	8a 81       	ldd	r24, Y+2	; 0x02
    1a06:	9b 81       	ldd	r25, Y+3	; 0x03
    1a08:	fc 01       	movw	r30, r24
    1a0a:	e2 0f       	add	r30, r18
    1a0c:	f3 1f       	adc	r31, r19
    1a0e:	80 81       	ld	r24, Z
    1a10:	0e 94 af 0a 	call	0x155e	; 0x155e <CLCD_voidSendData>
}


void CLCD_voidSendString(const char* Copy_PtrString)
{
	for (u8 i = 0; Copy_PtrString[i] !='\0'; i++)
    1a14:	89 81       	ldd	r24, Y+1	; 0x01
    1a16:	8f 5f       	subi	r24, 0xFF	; 255
    1a18:	89 83       	std	Y+1, r24	; 0x01
    1a1a:	89 81       	ldd	r24, Y+1	; 0x01
    1a1c:	28 2f       	mov	r18, r24
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	8a 81       	ldd	r24, Y+2	; 0x02
    1a22:	9b 81       	ldd	r25, Y+3	; 0x03
    1a24:	fc 01       	movw	r30, r24
    1a26:	e2 0f       	add	r30, r18
    1a28:	f3 1f       	adc	r31, r19
    1a2a:	80 81       	ld	r24, Z
    1a2c:	88 23       	and	r24, r24
    1a2e:	39 f7       	brne	.-50     	; 0x19fe <CLCD_voidSendString+0x14>
	{
		CLCD_voidSendData(Copy_PtrString[i]);
	}
}
    1a30:	0f 90       	pop	r0
    1a32:	0f 90       	pop	r0
    1a34:	0f 90       	pop	r0
    1a36:	cf 91       	pop	r28
    1a38:	df 91       	pop	r29
    1a3a:	08 95       	ret

00001a3c <CLCD_voidSendInteger>:



void CLCD_voidSendInteger(u16 Copy_Number)
{
    1a3c:	df 93       	push	r29
    1a3e:	cf 93       	push	r28
    1a40:	cd b7       	in	r28, 0x3d	; 61
    1a42:	de b7       	in	r29, 0x3e	; 62
    1a44:	2b 97       	sbiw	r28, 0x0b	; 11
    1a46:	0f b6       	in	r0, 0x3f	; 63
    1a48:	f8 94       	cli
    1a4a:	de bf       	out	0x3e, r29	; 62
    1a4c:	0f be       	out	0x3f, r0	; 63
    1a4e:	cd bf       	out	0x3d, r28	; 61
    1a50:	9b 87       	std	Y+11, r25	; 0x0b
    1a52:	8a 87       	std	Y+10, r24	; 0x0a
	if (!Copy_Number)
    1a54:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a56:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a58:	00 97       	sbiw	r24, 0x00	; 0
    1a5a:	19 f4       	brne	.+6      	; 0x1a62 <CLCD_voidSendInteger+0x26>
		CLCD_voidSendData('0');
    1a5c:	80 e3       	ldi	r24, 0x30	; 48
    1a5e:	0e 94 af 0a 	call	0x155e	; 0x155e <CLCD_voidSendData>
	//reversing number
	u16 Local_u16Number = Copy_Number;
    1a62:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a64:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a66:	9c 83       	std	Y+4, r25	; 0x04
    1a68:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8Array[5];
	u8 Local_i1, Local_i2;
	for (Local_i1=0; Local_u16Number!=0; Local_i1++)
    1a6a:	1a 82       	std	Y+2, r1	; 0x02
    1a6c:	1d c0       	rjmp	.+58     	; 0x1aa8 <CLCD_voidSendInteger+0x6c>
	{
		Local_u8Array[Local_i1] = Local_u16Number % 10;
    1a6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a70:	e8 2f       	mov	r30, r24
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	8b 81       	ldd	r24, Y+3	; 0x03
    1a76:	9c 81       	ldd	r25, Y+4	; 0x04
    1a78:	2a e0       	ldi	r18, 0x0A	; 10
    1a7a:	30 e0       	ldi	r19, 0x00	; 0
    1a7c:	b9 01       	movw	r22, r18
    1a7e:	0e 94 8b 1f 	call	0x3f16	; 0x3f16 <__udivmodhi4>
    1a82:	28 2f       	mov	r18, r24
    1a84:	ce 01       	movw	r24, r28
    1a86:	05 96       	adiw	r24, 0x05	; 5
    1a88:	e8 0f       	add	r30, r24
    1a8a:	f9 1f       	adc	r31, r25
    1a8c:	20 83       	st	Z, r18
		Local_u16Number /=10;
    1a8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a90:	9c 81       	ldd	r25, Y+4	; 0x04
    1a92:	2a e0       	ldi	r18, 0x0A	; 10
    1a94:	30 e0       	ldi	r19, 0x00	; 0
    1a96:	b9 01       	movw	r22, r18
    1a98:	0e 94 8b 1f 	call	0x3f16	; 0x3f16 <__udivmodhi4>
    1a9c:	cb 01       	movw	r24, r22
    1a9e:	9c 83       	std	Y+4, r25	; 0x04
    1aa0:	8b 83       	std	Y+3, r24	; 0x03
		CLCD_voidSendData('0');
	//reversing number
	u16 Local_u16Number = Copy_Number;
	u8 Local_u8Array[5];
	u8 Local_i1, Local_i2;
	for (Local_i1=0; Local_u16Number!=0; Local_i1++)
    1aa2:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa4:	8f 5f       	subi	r24, 0xFF	; 255
    1aa6:	8a 83       	std	Y+2, r24	; 0x02
    1aa8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aaa:	9c 81       	ldd	r25, Y+4	; 0x04
    1aac:	00 97       	sbiw	r24, 0x00	; 0
    1aae:	f9 f6       	brne	.-66     	; 0x1a6e <CLCD_voidSendInteger+0x32>
	{
		Local_u8Array[Local_i1] = Local_u16Number % 10;
		Local_u16Number /=10;
	}
	for (Local_i2 = Local_i1; Local_i2!=0; Local_i2--)
    1ab0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab2:	89 83       	std	Y+1, r24	; 0x01
    1ab4:	12 c0       	rjmp	.+36     	; 0x1ada <CLCD_voidSendInteger+0x9e>
	{
		CLCD_voidSendData(Local_u8Array[Local_i2-1]+'0');
    1ab6:	89 81       	ldd	r24, Y+1	; 0x01
    1ab8:	88 2f       	mov	r24, r24
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	9c 01       	movw	r18, r24
    1abe:	21 50       	subi	r18, 0x01	; 1
    1ac0:	30 40       	sbci	r19, 0x00	; 0
    1ac2:	ce 01       	movw	r24, r28
    1ac4:	05 96       	adiw	r24, 0x05	; 5
    1ac6:	fc 01       	movw	r30, r24
    1ac8:	e2 0f       	add	r30, r18
    1aca:	f3 1f       	adc	r31, r19
    1acc:	80 81       	ld	r24, Z
    1ace:	80 5d       	subi	r24, 0xD0	; 208
    1ad0:	0e 94 af 0a 	call	0x155e	; 0x155e <CLCD_voidSendData>
	for (Local_i1=0; Local_u16Number!=0; Local_i1++)
	{
		Local_u8Array[Local_i1] = Local_u16Number % 10;
		Local_u16Number /=10;
	}
	for (Local_i2 = Local_i1; Local_i2!=0; Local_i2--)
    1ad4:	89 81       	ldd	r24, Y+1	; 0x01
    1ad6:	81 50       	subi	r24, 0x01	; 1
    1ad8:	89 83       	std	Y+1, r24	; 0x01
    1ada:	89 81       	ldd	r24, Y+1	; 0x01
    1adc:	88 23       	and	r24, r24
    1ade:	59 f7       	brne	.-42     	; 0x1ab6 <CLCD_voidSendInteger+0x7a>
	{
		CLCD_voidSendData(Local_u8Array[Local_i2-1]+'0');
	}

}
    1ae0:	2b 96       	adiw	r28, 0x0b	; 11
    1ae2:	0f b6       	in	r0, 0x3f	; 63
    1ae4:	f8 94       	cli
    1ae6:	de bf       	out	0x3e, r29	; 62
    1ae8:	0f be       	out	0x3f, r0	; 63
    1aea:	cd bf       	out	0x3d, r28	; 61
    1aec:	cf 91       	pop	r28
    1aee:	df 91       	pop	r29
    1af0:	08 95       	ret

00001af2 <CLCD_voidSendDecimalNumber>:

void CLCD_voidSendDecimalNumber(f32 Copy_Number)
{
    1af2:	0f 93       	push	r16
    1af4:	1f 93       	push	r17
    1af6:	df 93       	push	r29
    1af8:	cf 93       	push	r28
    1afa:	cd b7       	in	r28, 0x3d	; 61
    1afc:	de b7       	in	r29, 0x3e	; 62
    1afe:	6a 97       	sbiw	r28, 0x1a	; 26
    1b00:	0f b6       	in	r0, 0x3f	; 63
    1b02:	f8 94       	cli
    1b04:	de bf       	out	0x3e, r29	; 62
    1b06:	0f be       	out	0x3f, r0	; 63
    1b08:	cd bf       	out	0x3d, r28	; 61
    1b0a:	6e 8b       	std	Y+22, r22	; 0x16
    1b0c:	7f 8b       	std	Y+23, r23	; 0x17
    1b0e:	88 8f       	std	Y+24, r24	; 0x18
    1b10:	99 8f       	std	Y+25, r25	; 0x19
	if (!Copy_Number)
    1b12:	1a 8e       	std	Y+26, r1	; 0x1a
    1b14:	6e 89       	ldd	r22, Y+22	; 0x16
    1b16:	7f 89       	ldd	r23, Y+23	; 0x17
    1b18:	88 8d       	ldd	r24, Y+24	; 0x18
    1b1a:	99 8d       	ldd	r25, Y+25	; 0x19
    1b1c:	20 e0       	ldi	r18, 0x00	; 0
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	40 e0       	ldi	r20, 0x00	; 0
    1b22:	50 e0       	ldi	r21, 0x00	; 0
    1b24:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__nesf2>
    1b28:	88 23       	and	r24, r24
    1b2a:	11 f0       	breq	.+4      	; 0x1b30 <CLCD_voidSendDecimalNumber+0x3e>
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
    1b2e:	8a 8f       	std	Y+26, r24	; 0x1a
    1b30:	81 e0       	ldi	r24, 0x01	; 1
    1b32:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1b34:	89 27       	eor	r24, r25
    1b36:	88 23       	and	r24, r24
    1b38:	19 f0       	breq	.+6      	; 0x1b40 <CLCD_voidSendDecimalNumber+0x4e>
		CLCD_voidSendData('0');
    1b3a:	80 e3       	ldi	r24, 0x30	; 48
    1b3c:	0e 94 af 0a 	call	0x155e	; 0x155e <CLCD_voidSendData>
	//reversing number
	f32 Local_f32Number = Copy_Number;
    1b40:	8e 89       	ldd	r24, Y+22	; 0x16
    1b42:	9f 89       	ldd	r25, Y+23	; 0x17
    1b44:	a8 8d       	ldd	r26, Y+24	; 0x18
    1b46:	b9 8d       	ldd	r27, Y+25	; 0x19
    1b48:	88 87       	std	Y+8, r24	; 0x08
    1b4a:	99 87       	std	Y+9, r25	; 0x09
    1b4c:	aa 87       	std	Y+10, r26	; 0x0a
    1b4e:	bb 87       	std	Y+11, r27	; 0x0b
	u8 Local_u8Array[10];
	u8 Local_i1, Local_i2;
	u8 Local_NumOfTens=0;
    1b50:	1d 82       	std	Y+5, r1	; 0x05
    1b52:	13 c0       	rjmp	.+38     	; 0x1b7a <CLCD_voidSendDecimalNumber+0x88>

	while (Local_f32Number-(u32)Local_f32Number)
	{
		Local_f32Number*=10;
    1b54:	68 85       	ldd	r22, Y+8	; 0x08
    1b56:	79 85       	ldd	r23, Y+9	; 0x09
    1b58:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b5a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b5c:	20 e0       	ldi	r18, 0x00	; 0
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	40 e2       	ldi	r20, 0x20	; 32
    1b62:	51 e4       	ldi	r21, 0x41	; 65
    1b64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b68:	dc 01       	movw	r26, r24
    1b6a:	cb 01       	movw	r24, r22
    1b6c:	88 87       	std	Y+8, r24	; 0x08
    1b6e:	99 87       	std	Y+9, r25	; 0x09
    1b70:	aa 87       	std	Y+10, r26	; 0x0a
    1b72:	bb 87       	std	Y+11, r27	; 0x0b
		Local_NumOfTens++;
    1b74:	8d 81       	ldd	r24, Y+5	; 0x05
    1b76:	8f 5f       	subi	r24, 0xFF	; 255
    1b78:	8d 83       	std	Y+5, r24	; 0x05
	f32 Local_f32Number = Copy_Number;
	u8 Local_u8Array[10];
	u8 Local_i1, Local_i2;
	u8 Local_NumOfTens=0;

	while (Local_f32Number-(u32)Local_f32Number)
    1b7a:	68 85       	ldd	r22, Y+8	; 0x08
    1b7c:	79 85       	ldd	r23, Y+9	; 0x09
    1b7e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b80:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b86:	dc 01       	movw	r26, r24
    1b88:	cb 01       	movw	r24, r22
    1b8a:	bc 01       	movw	r22, r24
    1b8c:	cd 01       	movw	r24, r26
    1b8e:	0e 94 67 05 	call	0xace	; 0xace <__floatunsisf>
    1b92:	9b 01       	movw	r18, r22
    1b94:	ac 01       	movw	r20, r24
    1b96:	68 85       	ldd	r22, Y+8	; 0x08
    1b98:	79 85       	ldd	r23, Y+9	; 0x09
    1b9a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b9c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b9e:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1ba2:	dc 01       	movw	r26, r24
    1ba4:	cb 01       	movw	r24, r22
    1ba6:	bc 01       	movw	r22, r24
    1ba8:	cd 01       	movw	r24, r26
    1baa:	20 e0       	ldi	r18, 0x00	; 0
    1bac:	30 e0       	ldi	r19, 0x00	; 0
    1bae:	40 e0       	ldi	r20, 0x00	; 0
    1bb0:	50 e0       	ldi	r21, 0x00	; 0
    1bb2:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__nesf2>
    1bb6:	88 23       	and	r24, r24
    1bb8:	69 f6       	brne	.-102    	; 0x1b54 <CLCD_voidSendDecimalNumber+0x62>
		Local_f32Number*=10;
		Local_NumOfTens++;
	}

	//casting
	u32 Local_u32Number = Local_f32Number;
    1bba:	68 85       	ldd	r22, Y+8	; 0x08
    1bbc:	79 85       	ldd	r23, Y+9	; 0x09
    1bbe:	8a 85       	ldd	r24, Y+10	; 0x0a
    1bc0:	9b 85       	ldd	r25, Y+11	; 0x0b
    1bc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bc6:	dc 01       	movw	r26, r24
    1bc8:	cb 01       	movw	r24, r22
    1bca:	89 83       	std	Y+1, r24	; 0x01
    1bcc:	9a 83       	std	Y+2, r25	; 0x02
    1bce:	ab 83       	std	Y+3, r26	; 0x03
    1bd0:	bc 83       	std	Y+4, r27	; 0x04

	for (Local_i1=0; Local_u32Number!=0; Local_i1++)
    1bd2:	1f 82       	std	Y+7, r1	; 0x07
    1bd4:	2d c0       	rjmp	.+90     	; 0x1c30 <CLCD_voidSendDecimalNumber+0x13e>
	{
		Local_u8Array[Local_i1] = Local_u32Number % 10;
    1bd6:	8f 81       	ldd	r24, Y+7	; 0x07
    1bd8:	08 2f       	mov	r16, r24
    1bda:	10 e0       	ldi	r17, 0x00	; 0
    1bdc:	89 81       	ldd	r24, Y+1	; 0x01
    1bde:	9a 81       	ldd	r25, Y+2	; 0x02
    1be0:	ab 81       	ldd	r26, Y+3	; 0x03
    1be2:	bc 81       	ldd	r27, Y+4	; 0x04
    1be4:	2a e0       	ldi	r18, 0x0A	; 10
    1be6:	30 e0       	ldi	r19, 0x00	; 0
    1be8:	40 e0       	ldi	r20, 0x00	; 0
    1bea:	50 e0       	ldi	r21, 0x00	; 0
    1bec:	bc 01       	movw	r22, r24
    1bee:	cd 01       	movw	r24, r26
    1bf0:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <__udivmodsi4>
    1bf4:	dc 01       	movw	r26, r24
    1bf6:	cb 01       	movw	r24, r22
    1bf8:	28 2f       	mov	r18, r24
    1bfa:	ce 01       	movw	r24, r28
    1bfc:	0c 96       	adiw	r24, 0x0c	; 12
    1bfe:	fc 01       	movw	r30, r24
    1c00:	e0 0f       	add	r30, r16
    1c02:	f1 1f       	adc	r31, r17
    1c04:	20 83       	st	Z, r18
		Local_u32Number /=10;
    1c06:	89 81       	ldd	r24, Y+1	; 0x01
    1c08:	9a 81       	ldd	r25, Y+2	; 0x02
    1c0a:	ab 81       	ldd	r26, Y+3	; 0x03
    1c0c:	bc 81       	ldd	r27, Y+4	; 0x04
    1c0e:	2a e0       	ldi	r18, 0x0A	; 10
    1c10:	30 e0       	ldi	r19, 0x00	; 0
    1c12:	40 e0       	ldi	r20, 0x00	; 0
    1c14:	50 e0       	ldi	r21, 0x00	; 0
    1c16:	bc 01       	movw	r22, r24
    1c18:	cd 01       	movw	r24, r26
    1c1a:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <__udivmodsi4>
    1c1e:	da 01       	movw	r26, r20
    1c20:	c9 01       	movw	r24, r18
    1c22:	89 83       	std	Y+1, r24	; 0x01
    1c24:	9a 83       	std	Y+2, r25	; 0x02
    1c26:	ab 83       	std	Y+3, r26	; 0x03
    1c28:	bc 83       	std	Y+4, r27	; 0x04
	}

	//casting
	u32 Local_u32Number = Local_f32Number;

	for (Local_i1=0; Local_u32Number!=0; Local_i1++)
    1c2a:	8f 81       	ldd	r24, Y+7	; 0x07
    1c2c:	8f 5f       	subi	r24, 0xFF	; 255
    1c2e:	8f 83       	std	Y+7, r24	; 0x07
    1c30:	89 81       	ldd	r24, Y+1	; 0x01
    1c32:	9a 81       	ldd	r25, Y+2	; 0x02
    1c34:	ab 81       	ldd	r26, Y+3	; 0x03
    1c36:	bc 81       	ldd	r27, Y+4	; 0x04
    1c38:	00 97       	sbiw	r24, 0x00	; 0
    1c3a:	a1 05       	cpc	r26, r1
    1c3c:	b1 05       	cpc	r27, r1
    1c3e:	59 f6       	brne	.-106    	; 0x1bd6 <CLCD_voidSendDecimalNumber+0xe4>
	{
		Local_u8Array[Local_i1] = Local_u32Number % 10;
		Local_u32Number /=10;
	}

	if (Local_i1 == Local_NumOfTens)
    1c40:	9f 81       	ldd	r25, Y+7	; 0x07
    1c42:	8d 81       	ldd	r24, Y+5	; 0x05
    1c44:	98 17       	cp	r25, r24
    1c46:	19 f4       	brne	.+6      	; 0x1c4e <CLCD_voidSendDecimalNumber+0x15c>
		CLCD_voidSendData('0');
    1c48:	80 e3       	ldi	r24, 0x30	; 48
    1c4a:	0e 94 af 0a 	call	0x155e	; 0x155e <CLCD_voidSendData>

	for (Local_i2 = Local_i1; Local_i2!=0; Local_i2--)
    1c4e:	8f 81       	ldd	r24, Y+7	; 0x07
    1c50:	8e 83       	std	Y+6, r24	; 0x06
    1c52:	19 c0       	rjmp	.+50     	; 0x1c86 <CLCD_voidSendDecimalNumber+0x194>
	{
		if (Local_i2 == Local_NumOfTens)
    1c54:	9e 81       	ldd	r25, Y+6	; 0x06
    1c56:	8d 81       	ldd	r24, Y+5	; 0x05
    1c58:	98 17       	cp	r25, r24
    1c5a:	19 f4       	brne	.+6      	; 0x1c62 <CLCD_voidSendDecimalNumber+0x170>
			CLCD_voidSendData('.');
    1c5c:	8e e2       	ldi	r24, 0x2E	; 46
    1c5e:	0e 94 af 0a 	call	0x155e	; 0x155e <CLCD_voidSendData>
		CLCD_voidSendData(Local_u8Array[Local_i2-1]+'0');
    1c62:	8e 81       	ldd	r24, Y+6	; 0x06
    1c64:	88 2f       	mov	r24, r24
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	9c 01       	movw	r18, r24
    1c6a:	21 50       	subi	r18, 0x01	; 1
    1c6c:	30 40       	sbci	r19, 0x00	; 0
    1c6e:	ce 01       	movw	r24, r28
    1c70:	0c 96       	adiw	r24, 0x0c	; 12
    1c72:	fc 01       	movw	r30, r24
    1c74:	e2 0f       	add	r30, r18
    1c76:	f3 1f       	adc	r31, r19
    1c78:	80 81       	ld	r24, Z
    1c7a:	80 5d       	subi	r24, 0xD0	; 208
    1c7c:	0e 94 af 0a 	call	0x155e	; 0x155e <CLCD_voidSendData>
	}

	if (Local_i1 == Local_NumOfTens)
		CLCD_voidSendData('0');

	for (Local_i2 = Local_i1; Local_i2!=0; Local_i2--)
    1c80:	8e 81       	ldd	r24, Y+6	; 0x06
    1c82:	81 50       	subi	r24, 0x01	; 1
    1c84:	8e 83       	std	Y+6, r24	; 0x06
    1c86:	8e 81       	ldd	r24, Y+6	; 0x06
    1c88:	88 23       	and	r24, r24
    1c8a:	21 f7       	brne	.-56     	; 0x1c54 <CLCD_voidSendDecimalNumber+0x162>
		if (Local_i2 == Local_NumOfTens)
			CLCD_voidSendData('.');
		CLCD_voidSendData(Local_u8Array[Local_i2-1]+'0');
	}

	if (Local_NumOfTens == 0)
    1c8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c8e:	88 23       	and	r24, r24
    1c90:	31 f4       	brne	.+12     	; 0x1c9e <CLCD_voidSendDecimalNumber+0x1ac>
	{
		CLCD_voidSendData('.');
    1c92:	8e e2       	ldi	r24, 0x2E	; 46
    1c94:	0e 94 af 0a 	call	0x155e	; 0x155e <CLCD_voidSendData>
		CLCD_voidSendData('0');
    1c98:	80 e3       	ldi	r24, 0x30	; 48
    1c9a:	0e 94 af 0a 	call	0x155e	; 0x155e <CLCD_voidSendData>
	}
}
    1c9e:	6a 96       	adiw	r28, 0x1a	; 26
    1ca0:	0f b6       	in	r0, 0x3f	; 63
    1ca2:	f8 94       	cli
    1ca4:	de bf       	out	0x3e, r29	; 62
    1ca6:	0f be       	out	0x3f, r0	; 63
    1ca8:	cd bf       	out	0x3d, r28	; 61
    1caa:	cf 91       	pop	r28
    1cac:	df 91       	pop	r29
    1cae:	1f 91       	pop	r17
    1cb0:	0f 91       	pop	r16
    1cb2:	08 95       	ret

00001cb4 <CLCD_voidGoToRowColumn>:


void CLCD_voidGoToRowColumn(u8 Copy_u8xPosition, u8 Copy_u8yPosition)
{
    1cb4:	df 93       	push	r29
    1cb6:	cf 93       	push	r28
    1cb8:	00 d0       	rcall	.+0      	; 0x1cba <CLCD_voidGoToRowColumn+0x6>
    1cba:	00 d0       	rcall	.+0      	; 0x1cbc <CLCD_voidGoToRowColumn+0x8>
    1cbc:	0f 92       	push	r0
    1cbe:	cd b7       	in	r28, 0x3d	; 61
    1cc0:	de b7       	in	r29, 0x3e	; 62
    1cc2:	8a 83       	std	Y+2, r24	; 0x02
    1cc4:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Adress;
	switch(Copy_u8xPosition)
    1cc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc8:	28 2f       	mov	r18, r24
    1cca:	30 e0       	ldi	r19, 0x00	; 0
    1ccc:	3d 83       	std	Y+5, r19	; 0x05
    1cce:	2c 83       	std	Y+4, r18	; 0x04
    1cd0:	8c 81       	ldd	r24, Y+4	; 0x04
    1cd2:	9d 81       	ldd	r25, Y+5	; 0x05
    1cd4:	81 30       	cpi	r24, 0x01	; 1
    1cd6:	91 05       	cpc	r25, r1
    1cd8:	c1 f0       	breq	.+48     	; 0x1d0a <CLCD_voidGoToRowColumn+0x56>
    1cda:	2c 81       	ldd	r18, Y+4	; 0x04
    1cdc:	3d 81       	ldd	r19, Y+5	; 0x05
    1cde:	22 30       	cpi	r18, 0x02	; 2
    1ce0:	31 05       	cpc	r19, r1
    1ce2:	2c f4       	brge	.+10     	; 0x1cee <CLCD_voidGoToRowColumn+0x3a>
    1ce4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ce6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ce8:	00 97       	sbiw	r24, 0x00	; 0
    1cea:	61 f0       	breq	.+24     	; 0x1d04 <CLCD_voidGoToRowColumn+0x50>
    1cec:	19 c0       	rjmp	.+50     	; 0x1d20 <CLCD_voidGoToRowColumn+0x6c>
    1cee:	2c 81       	ldd	r18, Y+4	; 0x04
    1cf0:	3d 81       	ldd	r19, Y+5	; 0x05
    1cf2:	22 30       	cpi	r18, 0x02	; 2
    1cf4:	31 05       	cpc	r19, r1
    1cf6:	69 f0       	breq	.+26     	; 0x1d12 <CLCD_voidGoToRowColumn+0x5e>
    1cf8:	8c 81       	ldd	r24, Y+4	; 0x04
    1cfa:	9d 81       	ldd	r25, Y+5	; 0x05
    1cfc:	83 30       	cpi	r24, 0x03	; 3
    1cfe:	91 05       	cpc	r25, r1
    1d00:	61 f0       	breq	.+24     	; 0x1d1a <CLCD_voidGoToRowColumn+0x66>
    1d02:	0e c0       	rjmp	.+28     	; 0x1d20 <CLCD_voidGoToRowColumn+0x6c>
	{
		case 0:  Local_u8Adress = Copy_u8yPosition;  		break;
    1d04:	8b 81       	ldd	r24, Y+3	; 0x03
    1d06:	89 83       	std	Y+1, r24	; 0x01
    1d08:	0b c0       	rjmp	.+22     	; 0x1d20 <CLCD_voidGoToRowColumn+0x6c>
		case 1:  Local_u8Adress = Copy_u8yPosition + 0x40;  break;
    1d0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0c:	80 5c       	subi	r24, 0xC0	; 192
    1d0e:	89 83       	std	Y+1, r24	; 0x01
    1d10:	07 c0       	rjmp	.+14     	; 0x1d20 <CLCD_voidGoToRowColumn+0x6c>
		case 2:  Local_u8Adress = Copy_u8yPosition + 0x14;  break;
    1d12:	8b 81       	ldd	r24, Y+3	; 0x03
    1d14:	8c 5e       	subi	r24, 0xEC	; 236
    1d16:	89 83       	std	Y+1, r24	; 0x01
    1d18:	03 c0       	rjmp	.+6      	; 0x1d20 <CLCD_voidGoToRowColumn+0x6c>
		case 3:  Local_u8Adress = Copy_u8yPosition + 0x54;	break;
    1d1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1c:	8c 5a       	subi	r24, 0xAC	; 172
    1d1e:	89 83       	std	Y+1, r24	; 0x01
		default: break;
	}

	/* setting the last bit ,As the command is (1 bit[7] , Address counter bits[6:0])*/
	SET_BIT(Local_u8Adress,7);
    1d20:	89 81       	ldd	r24, Y+1	; 0x01
    1d22:	80 68       	ori	r24, 0x80	; 128
    1d24:	89 83       	std	Y+1, r24	; 0x01

	CLCD_voidSendCommand(Local_u8Adress);
    1d26:	89 81       	ldd	r24, Y+1	; 0x01
    1d28:	0e 94 69 08 	call	0x10d2	; 0x10d2 <CLCD_voidSendCommand>
}
    1d2c:	0f 90       	pop	r0
    1d2e:	0f 90       	pop	r0
    1d30:	0f 90       	pop	r0
    1d32:	0f 90       	pop	r0
    1d34:	0f 90       	pop	r0
    1d36:	cf 91       	pop	r28
    1d38:	df 91       	pop	r29
    1d3a:	08 95       	ret

00001d3c <CLCD_voidSendSpecialCharacter>:



void CLCD_voidSendSpecialCharacter(const u8* Copy_u8Arr, u8 Copy_u8PatternNumber)
{
    1d3c:	df 93       	push	r29
    1d3e:	cf 93       	push	r28
    1d40:	00 d0       	rcall	.+0      	; 0x1d42 <CLCD_voidSendSpecialCharacter+0x6>
    1d42:	00 d0       	rcall	.+0      	; 0x1d44 <CLCD_voidSendSpecialCharacter+0x8>
    1d44:	0f 92       	push	r0
    1d46:	cd b7       	in	r28, 0x3d	; 61
    1d48:	de b7       	in	r29, 0x3e	; 62
    1d4a:	9c 83       	std	Y+4, r25	; 0x04
    1d4c:	8b 83       	std	Y+3, r24	; 0x03
    1d4e:	6d 83       	std	Y+5, r22	; 0x05
	u8 Local_u8CGRAMAddress = 0;
    1d50:	1a 82       	std	Y+2, r1	; 0x02
	Local_u8CGRAMAddress = Copy_u8PatternNumber*8;
    1d52:	8d 81       	ldd	r24, Y+5	; 0x05
    1d54:	88 2f       	mov	r24, r24
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	88 0f       	add	r24, r24
    1d5a:	99 1f       	adc	r25, r25
    1d5c:	88 0f       	add	r24, r24
    1d5e:	99 1f       	adc	r25, r25
    1d60:	88 0f       	add	r24, r24
    1d62:	99 1f       	adc	r25, r25
    1d64:	8a 83       	std	Y+2, r24	; 0x02
	SET_BIT(Local_u8CGRAMAddress,6);
    1d66:	8a 81       	ldd	r24, Y+2	; 0x02
    1d68:	80 64       	ori	r24, 0x40	; 64
    1d6a:	8a 83       	std	Y+2, r24	; 0x02

	/*moving to CGRAM to write the special character inside it*/
	CLCD_voidSendCommand(Local_u8CGRAMAddress);
    1d6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d6e:	0e 94 69 08 	call	0x10d2	; 0x10d2 <CLCD_voidSendCommand>

	/* writing the special character*/
	for (u8 i = 0; i<8; i++)
    1d72:	19 82       	std	Y+1, r1	; 0x01
    1d74:	0e c0       	rjmp	.+28     	; 0x1d92 <CLCD_voidSendSpecialCharacter+0x56>
	{
		CLCD_voidSendData(Copy_u8Arr[i]);
    1d76:	89 81       	ldd	r24, Y+1	; 0x01
    1d78:	28 2f       	mov	r18, r24
    1d7a:	30 e0       	ldi	r19, 0x00	; 0
    1d7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d80:	fc 01       	movw	r30, r24
    1d82:	e2 0f       	add	r30, r18
    1d84:	f3 1f       	adc	r31, r19
    1d86:	80 81       	ld	r24, Z
    1d88:	0e 94 af 0a 	call	0x155e	; 0x155e <CLCD_voidSendData>

	/*moving to CGRAM to write the special character inside it*/
	CLCD_voidSendCommand(Local_u8CGRAMAddress);

	/* writing the special character*/
	for (u8 i = 0; i<8; i++)
    1d8c:	89 81       	ldd	r24, Y+1	; 0x01
    1d8e:	8f 5f       	subi	r24, 0xFF	; 255
    1d90:	89 83       	std	Y+1, r24	; 0x01
    1d92:	89 81       	ldd	r24, Y+1	; 0x01
    1d94:	88 30       	cpi	r24, 0x08	; 8
    1d96:	78 f3       	brcs	.-34     	; 0x1d76 <CLCD_voidSendSpecialCharacter+0x3a>
	{
		CLCD_voidSendData(Copy_u8Arr[i]);
	}

	/* switching again to DDRAM */
	CLCD_voidGoToRowColumn (0,0);  // 0,0 can be changed
    1d98:	80 e0       	ldi	r24, 0x00	; 0
    1d9a:	60 e0       	ldi	r22, 0x00	; 0
    1d9c:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <CLCD_voidGoToRowColumn>
}
    1da0:	0f 90       	pop	r0
    1da2:	0f 90       	pop	r0
    1da4:	0f 90       	pop	r0
    1da6:	0f 90       	pop	r0
    1da8:	0f 90       	pop	r0
    1daa:	cf 91       	pop	r28
    1dac:	df 91       	pop	r29
    1dae:	08 95       	ret

00001db0 <CLCD_voidDisplaySpecialCharacter>:

void CLCD_voidDisplaySpecialCharacter(u8 Copy_u8PatternNumber,u8 Copy_u8XPosition,u8 Copy_u8YPosition)
{
    1db0:	df 93       	push	r29
    1db2:	cf 93       	push	r28
    1db4:	00 d0       	rcall	.+0      	; 0x1db6 <CLCD_voidDisplaySpecialCharacter+0x6>
    1db6:	0f 92       	push	r0
    1db8:	cd b7       	in	r28, 0x3d	; 61
    1dba:	de b7       	in	r29, 0x3e	; 62
    1dbc:	89 83       	std	Y+1, r24	; 0x01
    1dbe:	6a 83       	std	Y+2, r22	; 0x02
    1dc0:	4b 83       	std	Y+3, r20	; 0x03
	CLCD_voidGoToRowColumn (Copy_u8XPosition,Copy_u8YPosition);
    1dc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc4:	6b 81       	ldd	r22, Y+3	; 0x03
    1dc6:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <CLCD_voidGoToRowColumn>
	CLCD_voidSendData(Copy_u8PatternNumber);
    1dca:	89 81       	ldd	r24, Y+1	; 0x01
    1dcc:	0e 94 af 0a 	call	0x155e	; 0x155e <CLCD_voidSendData>
}
    1dd0:	0f 90       	pop	r0
    1dd2:	0f 90       	pop	r0
    1dd4:	0f 90       	pop	r0
    1dd6:	cf 91       	pop	r28
    1dd8:	df 91       	pop	r29
    1dda:	08 95       	ret

00001ddc <DIO_voidInit>:
#include "DIO_interface.h"

/*****************************************************************************************/
#if DIO_CONFIG == 1
void DIO_voidInit()
{
    1ddc:	df 93       	push	r29
    1dde:	cf 93       	push	r28
    1de0:	cd b7       	in	r28, 0x3d	; 61
    1de2:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPortDirection(DIO_u8PORTA, CONC(A7,A6,A5,A4,A3,A2,A1,A0));
    1de4:	80 e0       	ldi	r24, 0x00	; 0
    1de6:	6c ef       	ldi	r22, 0xFC	; 252
    1de8:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <DIO_u8SetPortDirection>
	DIO_u8SetPortDirection(DIO_u8PORTB, CONC(B7,B6,B5,B4,B3,B2,B1,B0));
    1dec:	81 e0       	ldi	r24, 0x01	; 1
    1dee:	6f ef       	ldi	r22, 0xFF	; 255
    1df0:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <DIO_u8SetPortDirection>
	DIO_u8SetPortDirection(DIO_u8PORTC, CONC(C7,C6,C5,C4,C3,C2,C1,C0));
    1df4:	82 e0       	ldi	r24, 0x02	; 2
    1df6:	6f ef       	ldi	r22, 0xFF	; 255
    1df8:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <DIO_u8SetPortDirection>
	DIO_u8SetPortDirection(DIO_u8PORTD, CONC(D7,D6,D5,D4,D3,D2,D1,D0));
    1dfc:	83 e0       	ldi	r24, 0x03	; 3
    1dfe:	63 e1       	ldi	r22, 0x13	; 19
    1e00:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <DIO_u8SetPortDirection>
}
    1e04:	cf 91       	pop	r28
    1e06:	df 91       	pop	r29
    1e08:	08 95       	ret

00001e0a <DIO_u8SetPortDirection>:
#endif

/*****************************************************************************************/

u8 DIO_u8SetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
    1e0a:	df 93       	push	r29
    1e0c:	cf 93       	push	r28
    1e0e:	00 d0       	rcall	.+0      	; 0x1e10 <DIO_u8SetPortDirection+0x6>
    1e10:	00 d0       	rcall	.+0      	; 0x1e12 <DIO_u8SetPortDirection+0x8>
    1e12:	0f 92       	push	r0
    1e14:	cd b7       	in	r28, 0x3d	; 61
    1e16:	de b7       	in	r29, 0x3e	; 62
    1e18:	8a 83       	std	Y+2, r24	; 0x02
    1e1a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = 0;
    1e1c:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
    1e1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e20:	28 2f       	mov	r18, r24
    1e22:	30 e0       	ldi	r19, 0x00	; 0
    1e24:	3d 83       	std	Y+5, r19	; 0x05
    1e26:	2c 83       	std	Y+4, r18	; 0x04
    1e28:	8c 81       	ldd	r24, Y+4	; 0x04
    1e2a:	9d 81       	ldd	r25, Y+5	; 0x05
    1e2c:	81 30       	cpi	r24, 0x01	; 1
    1e2e:	91 05       	cpc	r25, r1
    1e30:	d1 f0       	breq	.+52     	; 0x1e66 <DIO_u8SetPortDirection+0x5c>
    1e32:	2c 81       	ldd	r18, Y+4	; 0x04
    1e34:	3d 81       	ldd	r19, Y+5	; 0x05
    1e36:	22 30       	cpi	r18, 0x02	; 2
    1e38:	31 05       	cpc	r19, r1
    1e3a:	2c f4       	brge	.+10     	; 0x1e46 <DIO_u8SetPortDirection+0x3c>
    1e3c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e3e:	9d 81       	ldd	r25, Y+5	; 0x05
    1e40:	00 97       	sbiw	r24, 0x00	; 0
    1e42:	61 f0       	breq	.+24     	; 0x1e5c <DIO_u8SetPortDirection+0x52>
    1e44:	1f c0       	rjmp	.+62     	; 0x1e84 <DIO_u8SetPortDirection+0x7a>
    1e46:	2c 81       	ldd	r18, Y+4	; 0x04
    1e48:	3d 81       	ldd	r19, Y+5	; 0x05
    1e4a:	22 30       	cpi	r18, 0x02	; 2
    1e4c:	31 05       	cpc	r19, r1
    1e4e:	81 f0       	breq	.+32     	; 0x1e70 <DIO_u8SetPortDirection+0x66>
    1e50:	8c 81       	ldd	r24, Y+4	; 0x04
    1e52:	9d 81       	ldd	r25, Y+5	; 0x05
    1e54:	83 30       	cpi	r24, 0x03	; 3
    1e56:	91 05       	cpc	r25, r1
    1e58:	81 f0       	breq	.+32     	; 0x1e7a <DIO_u8SetPortDirection+0x70>
    1e5a:	14 c0       	rjmp	.+40     	; 0x1e84 <DIO_u8SetPortDirection+0x7a>
	{ 
		case DIO_u8PORTA:	DDRA_REG = Copy_u8Direction; 	break;
    1e5c:	ea e3       	ldi	r30, 0x3A	; 58
    1e5e:	f0 e0       	ldi	r31, 0x00	; 0
    1e60:	8b 81       	ldd	r24, Y+3	; 0x03
    1e62:	80 83       	st	Z, r24
    1e64:	11 c0       	rjmp	.+34     	; 0x1e88 <DIO_u8SetPortDirection+0x7e>
		case DIO_u8PORTB:	DDRB_REG = Copy_u8Direction; 	break;
    1e66:	e7 e3       	ldi	r30, 0x37	; 55
    1e68:	f0 e0       	ldi	r31, 0x00	; 0
    1e6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e6c:	80 83       	st	Z, r24
    1e6e:	0c c0       	rjmp	.+24     	; 0x1e88 <DIO_u8SetPortDirection+0x7e>
		case DIO_u8PORTC:	DDRC_REG = Copy_u8Direction; 	break;
    1e70:	e4 e3       	ldi	r30, 0x34	; 52
    1e72:	f0 e0       	ldi	r31, 0x00	; 0
    1e74:	8b 81       	ldd	r24, Y+3	; 0x03
    1e76:	80 83       	st	Z, r24
    1e78:	07 c0       	rjmp	.+14     	; 0x1e88 <DIO_u8SetPortDirection+0x7e>
		case DIO_u8PORTD:	DDRD_REG = Copy_u8Direction; 	break;
    1e7a:	e1 e3       	ldi	r30, 0x31	; 49
    1e7c:	f0 e0       	ldi	r31, 0x00	; 0
    1e7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e80:	80 83       	st	Z, r24
    1e82:	02 c0       	rjmp	.+4      	; 0x1e88 <DIO_u8SetPortDirection+0x7e>
		default:			Local_u8ErrorState = 1; break;
    1e84:	81 e0       	ldi	r24, 0x01	; 1
    1e86:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1e88:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e8a:	0f 90       	pop	r0
    1e8c:	0f 90       	pop	r0
    1e8e:	0f 90       	pop	r0
    1e90:	0f 90       	pop	r0
    1e92:	0f 90       	pop	r0
    1e94:	cf 91       	pop	r28
    1e96:	df 91       	pop	r29
    1e98:	08 95       	ret

00001e9a <DIO_u8GetPinValue>:

/*****************************************************************************************/
u8 DIO_u8GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8* Copy_u8Value)

{
    1e9a:	df 93       	push	r29
    1e9c:	cf 93       	push	r28
    1e9e:	cd b7       	in	r28, 0x3d	; 61
    1ea0:	de b7       	in	r29, 0x3e	; 62
    1ea2:	27 97       	sbiw	r28, 0x07	; 7
    1ea4:	0f b6       	in	r0, 0x3f	; 63
    1ea6:	f8 94       	cli
    1ea8:	de bf       	out	0x3e, r29	; 62
    1eaa:	0f be       	out	0x3f, r0	; 63
    1eac:	cd bf       	out	0x3d, r28	; 61
    1eae:	8a 83       	std	Y+2, r24	; 0x02
    1eb0:	6b 83       	std	Y+3, r22	; 0x03
    1eb2:	5d 83       	std	Y+5, r21	; 0x05
    1eb4:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = 0;
    1eb6:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8Pin <= 7) && (Copy_u8Value !=NULL))
    1eb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eba:	88 30       	cpi	r24, 0x08	; 8
    1ebc:	08 f0       	brcs	.+2      	; 0x1ec0 <DIO_u8GetPinValue+0x26>
    1ebe:	79 c0       	rjmp	.+242    	; 0x1fb2 <DIO_u8GetPinValue+0x118>
    1ec0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ec2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ec4:	00 97       	sbiw	r24, 0x00	; 0
    1ec6:	09 f4       	brne	.+2      	; 0x1eca <DIO_u8GetPinValue+0x30>
    1ec8:	74 c0       	rjmp	.+232    	; 0x1fb2 <DIO_u8GetPinValue+0x118>
	{  
		switch(Copy_u8Port)
    1eca:	8a 81       	ldd	r24, Y+2	; 0x02
    1ecc:	28 2f       	mov	r18, r24
    1ece:	30 e0       	ldi	r19, 0x00	; 0
    1ed0:	3f 83       	std	Y+7, r19	; 0x07
    1ed2:	2e 83       	std	Y+6, r18	; 0x06
    1ed4:	4e 81       	ldd	r20, Y+6	; 0x06
    1ed6:	5f 81       	ldd	r21, Y+7	; 0x07
    1ed8:	41 30       	cpi	r20, 0x01	; 1
    1eda:	51 05       	cpc	r21, r1
    1edc:	59 f1       	breq	.+86     	; 0x1f34 <DIO_u8GetPinValue+0x9a>
    1ede:	8e 81       	ldd	r24, Y+6	; 0x06
    1ee0:	9f 81       	ldd	r25, Y+7	; 0x07
    1ee2:	82 30       	cpi	r24, 0x02	; 2
    1ee4:	91 05       	cpc	r25, r1
    1ee6:	34 f4       	brge	.+12     	; 0x1ef4 <DIO_u8GetPinValue+0x5a>
    1ee8:	2e 81       	ldd	r18, Y+6	; 0x06
    1eea:	3f 81       	ldd	r19, Y+7	; 0x07
    1eec:	21 15       	cp	r18, r1
    1eee:	31 05       	cpc	r19, r1
    1ef0:	69 f0       	breq	.+26     	; 0x1f0c <DIO_u8GetPinValue+0x72>
    1ef2:	5c c0       	rjmp	.+184    	; 0x1fac <DIO_u8GetPinValue+0x112>
    1ef4:	4e 81       	ldd	r20, Y+6	; 0x06
    1ef6:	5f 81       	ldd	r21, Y+7	; 0x07
    1ef8:	42 30       	cpi	r20, 0x02	; 2
    1efa:	51 05       	cpc	r21, r1
    1efc:	79 f1       	breq	.+94     	; 0x1f5c <DIO_u8GetPinValue+0xc2>
    1efe:	8e 81       	ldd	r24, Y+6	; 0x06
    1f00:	9f 81       	ldd	r25, Y+7	; 0x07
    1f02:	83 30       	cpi	r24, 0x03	; 3
    1f04:	91 05       	cpc	r25, r1
    1f06:	09 f4       	brne	.+2      	; 0x1f0a <DIO_u8GetPinValue+0x70>
    1f08:	3d c0       	rjmp	.+122    	; 0x1f84 <DIO_u8GetPinValue+0xea>
    1f0a:	50 c0       	rjmp	.+160    	; 0x1fac <DIO_u8GetPinValue+0x112>
		{    
		  case DIO_u8PORTA:	*Copy_u8Value = GET_BIT(PINA_REG, Copy_u8Pin);	break;
    1f0c:	e9 e3       	ldi	r30, 0x39	; 57
    1f0e:	f0 e0       	ldi	r31, 0x00	; 0
    1f10:	80 81       	ld	r24, Z
    1f12:	28 2f       	mov	r18, r24
    1f14:	30 e0       	ldi	r19, 0x00	; 0
    1f16:	8b 81       	ldd	r24, Y+3	; 0x03
    1f18:	88 2f       	mov	r24, r24
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	a9 01       	movw	r20, r18
    1f1e:	02 c0       	rjmp	.+4      	; 0x1f24 <DIO_u8GetPinValue+0x8a>
    1f20:	55 95       	asr	r21
    1f22:	47 95       	ror	r20
    1f24:	8a 95       	dec	r24
    1f26:	e2 f7       	brpl	.-8      	; 0x1f20 <DIO_u8GetPinValue+0x86>
    1f28:	ca 01       	movw	r24, r20
    1f2a:	81 70       	andi	r24, 0x01	; 1
    1f2c:	ec 81       	ldd	r30, Y+4	; 0x04
    1f2e:	fd 81       	ldd	r31, Y+5	; 0x05
    1f30:	80 83       	st	Z, r24
    1f32:	41 c0       	rjmp	.+130    	; 0x1fb6 <DIO_u8GetPinValue+0x11c>
		  case DIO_u8PORTB:	*Copy_u8Value = GET_BIT(PINB_REG, Copy_u8Pin);	break;
    1f34:	e6 e3       	ldi	r30, 0x36	; 54
    1f36:	f0 e0       	ldi	r31, 0x00	; 0
    1f38:	80 81       	ld	r24, Z
    1f3a:	28 2f       	mov	r18, r24
    1f3c:	30 e0       	ldi	r19, 0x00	; 0
    1f3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f40:	88 2f       	mov	r24, r24
    1f42:	90 e0       	ldi	r25, 0x00	; 0
    1f44:	a9 01       	movw	r20, r18
    1f46:	02 c0       	rjmp	.+4      	; 0x1f4c <DIO_u8GetPinValue+0xb2>
    1f48:	55 95       	asr	r21
    1f4a:	47 95       	ror	r20
    1f4c:	8a 95       	dec	r24
    1f4e:	e2 f7       	brpl	.-8      	; 0x1f48 <DIO_u8GetPinValue+0xae>
    1f50:	ca 01       	movw	r24, r20
    1f52:	81 70       	andi	r24, 0x01	; 1
    1f54:	ec 81       	ldd	r30, Y+4	; 0x04
    1f56:	fd 81       	ldd	r31, Y+5	; 0x05
    1f58:	80 83       	st	Z, r24
    1f5a:	2d c0       	rjmp	.+90     	; 0x1fb6 <DIO_u8GetPinValue+0x11c>
		  case DIO_u8PORTC:	*Copy_u8Value = GET_BIT(PINC_REG, Copy_u8Pin);	break;
    1f5c:	e3 e3       	ldi	r30, 0x33	; 51
    1f5e:	f0 e0       	ldi	r31, 0x00	; 0
    1f60:	80 81       	ld	r24, Z
    1f62:	28 2f       	mov	r18, r24
    1f64:	30 e0       	ldi	r19, 0x00	; 0
    1f66:	8b 81       	ldd	r24, Y+3	; 0x03
    1f68:	88 2f       	mov	r24, r24
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	a9 01       	movw	r20, r18
    1f6e:	02 c0       	rjmp	.+4      	; 0x1f74 <DIO_u8GetPinValue+0xda>
    1f70:	55 95       	asr	r21
    1f72:	47 95       	ror	r20
    1f74:	8a 95       	dec	r24
    1f76:	e2 f7       	brpl	.-8      	; 0x1f70 <DIO_u8GetPinValue+0xd6>
    1f78:	ca 01       	movw	r24, r20
    1f7a:	81 70       	andi	r24, 0x01	; 1
    1f7c:	ec 81       	ldd	r30, Y+4	; 0x04
    1f7e:	fd 81       	ldd	r31, Y+5	; 0x05
    1f80:	80 83       	st	Z, r24
    1f82:	19 c0       	rjmp	.+50     	; 0x1fb6 <DIO_u8GetPinValue+0x11c>
		  case DIO_u8PORTD:	*Copy_u8Value = GET_BIT(PIND_REG, Copy_u8Pin);	break;
    1f84:	e0 e3       	ldi	r30, 0x30	; 48
    1f86:	f0 e0       	ldi	r31, 0x00	; 0
    1f88:	80 81       	ld	r24, Z
    1f8a:	28 2f       	mov	r18, r24
    1f8c:	30 e0       	ldi	r19, 0x00	; 0
    1f8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f90:	88 2f       	mov	r24, r24
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	a9 01       	movw	r20, r18
    1f96:	02 c0       	rjmp	.+4      	; 0x1f9c <DIO_u8GetPinValue+0x102>
    1f98:	55 95       	asr	r21
    1f9a:	47 95       	ror	r20
    1f9c:	8a 95       	dec	r24
    1f9e:	e2 f7       	brpl	.-8      	; 0x1f98 <DIO_u8GetPinValue+0xfe>
    1fa0:	ca 01       	movw	r24, r20
    1fa2:	81 70       	andi	r24, 0x01	; 1
    1fa4:	ec 81       	ldd	r30, Y+4	; 0x04
    1fa6:	fd 81       	ldd	r31, Y+5	; 0x05
    1fa8:	80 83       	st	Z, r24
    1faa:	05 c0       	rjmp	.+10     	; 0x1fb6 <DIO_u8GetPinValue+0x11c>
		  default:			Local_u8ErrorState = 1; break;
    1fac:	81 e0       	ldi	r24, 0x01	; 1
    1fae:	89 83       	std	Y+1, r24	; 0x01
    1fb0:	02 c0       	rjmp	.+4      	; 0x1fb6 <DIO_u8GetPinValue+0x11c>
		}
	}
	else
	{
		Local_u8ErrorState = 1;
    1fb2:	81 e0       	ldi	r24, 0x01	; 1
    1fb4:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1fb6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fb8:	27 96       	adiw	r28, 0x07	; 7
    1fba:	0f b6       	in	r0, 0x3f	; 63
    1fbc:	f8 94       	cli
    1fbe:	de bf       	out	0x3e, r29	; 62
    1fc0:	0f be       	out	0x3f, r0	; 63
    1fc2:	cd bf       	out	0x3d, r28	; 61
    1fc4:	cf 91       	pop	r28
    1fc6:	df 91       	pop	r29
    1fc8:	08 95       	ret

00001fca <DIO_u8SetPinValue>:


/*****************************************************************************************/

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
    1fca:	df 93       	push	r29
    1fcc:	cf 93       	push	r28
    1fce:	cd b7       	in	r28, 0x3d	; 61
    1fd0:	de b7       	in	r29, 0x3e	; 62
    1fd2:	28 97       	sbiw	r28, 0x08	; 8
    1fd4:	0f b6       	in	r0, 0x3f	; 63
    1fd6:	f8 94       	cli
    1fd8:	de bf       	out	0x3e, r29	; 62
    1fda:	0f be       	out	0x3f, r0	; 63
    1fdc:	cd bf       	out	0x3d, r28	; 61
    1fde:	8a 83       	std	Y+2, r24	; 0x02
    1fe0:	6b 83       	std	Y+3, r22	; 0x03
    1fe2:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = 0;
    1fe4:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin <= 7)
    1fe6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe8:	88 30       	cpi	r24, 0x08	; 8
    1fea:	08 f0       	brcs	.+2      	; 0x1fee <DIO_u8SetPinValue+0x24>
    1fec:	f4 c0       	rjmp	.+488    	; 0x21d6 <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value == DIO_u8PIN_HIGH)
    1fee:	8c 81       	ldd	r24, Y+4	; 0x04
    1ff0:	81 30       	cpi	r24, 0x01	; 1
    1ff2:	09 f0       	breq	.+2      	; 0x1ff6 <DIO_u8SetPinValue+0x2c>
    1ff4:	72 c0       	rjmp	.+228    	; 0x20da <DIO_u8SetPinValue+0x110>
		{
			switch(Copy_u8Port)
    1ff6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff8:	28 2f       	mov	r18, r24
    1ffa:	30 e0       	ldi	r19, 0x00	; 0
    1ffc:	38 87       	std	Y+8, r19	; 0x08
    1ffe:	2f 83       	std	Y+7, r18	; 0x07
    2000:	8f 81       	ldd	r24, Y+7	; 0x07
    2002:	98 85       	ldd	r25, Y+8	; 0x08
    2004:	81 30       	cpi	r24, 0x01	; 1
    2006:	91 05       	cpc	r25, r1
    2008:	49 f1       	breq	.+82     	; 0x205c <DIO_u8SetPinValue+0x92>
    200a:	2f 81       	ldd	r18, Y+7	; 0x07
    200c:	38 85       	ldd	r19, Y+8	; 0x08
    200e:	22 30       	cpi	r18, 0x02	; 2
    2010:	31 05       	cpc	r19, r1
    2012:	2c f4       	brge	.+10     	; 0x201e <DIO_u8SetPinValue+0x54>
    2014:	8f 81       	ldd	r24, Y+7	; 0x07
    2016:	98 85       	ldd	r25, Y+8	; 0x08
    2018:	00 97       	sbiw	r24, 0x00	; 0
    201a:	61 f0       	breq	.+24     	; 0x2034 <DIO_u8SetPinValue+0x6a>
    201c:	5b c0       	rjmp	.+182    	; 0x20d4 <DIO_u8SetPinValue+0x10a>
    201e:	2f 81       	ldd	r18, Y+7	; 0x07
    2020:	38 85       	ldd	r19, Y+8	; 0x08
    2022:	22 30       	cpi	r18, 0x02	; 2
    2024:	31 05       	cpc	r19, r1
    2026:	71 f1       	breq	.+92     	; 0x2084 <DIO_u8SetPinValue+0xba>
    2028:	8f 81       	ldd	r24, Y+7	; 0x07
    202a:	98 85       	ldd	r25, Y+8	; 0x08
    202c:	83 30       	cpi	r24, 0x03	; 3
    202e:	91 05       	cpc	r25, r1
    2030:	e9 f1       	breq	.+122    	; 0x20ac <DIO_u8SetPinValue+0xe2>
    2032:	50 c0       	rjmp	.+160    	; 0x20d4 <DIO_u8SetPinValue+0x10a>
			{
				case DIO_u8PORTA:  SET_BIT(PORTA_REG,Copy_u8Pin);	break;
    2034:	ab e3       	ldi	r26, 0x3B	; 59
    2036:	b0 e0       	ldi	r27, 0x00	; 0
    2038:	eb e3       	ldi	r30, 0x3B	; 59
    203a:	f0 e0       	ldi	r31, 0x00	; 0
    203c:	80 81       	ld	r24, Z
    203e:	48 2f       	mov	r20, r24
    2040:	8b 81       	ldd	r24, Y+3	; 0x03
    2042:	28 2f       	mov	r18, r24
    2044:	30 e0       	ldi	r19, 0x00	; 0
    2046:	81 e0       	ldi	r24, 0x01	; 1
    2048:	90 e0       	ldi	r25, 0x00	; 0
    204a:	02 2e       	mov	r0, r18
    204c:	02 c0       	rjmp	.+4      	; 0x2052 <DIO_u8SetPinValue+0x88>
    204e:	88 0f       	add	r24, r24
    2050:	99 1f       	adc	r25, r25
    2052:	0a 94       	dec	r0
    2054:	e2 f7       	brpl	.-8      	; 0x204e <DIO_u8SetPinValue+0x84>
    2056:	84 2b       	or	r24, r20
    2058:	8c 93       	st	X, r24
    205a:	bf c0       	rjmp	.+382    	; 0x21da <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTB:  SET_BIT(PORTB_REG,Copy_u8Pin);	break;
    205c:	a8 e3       	ldi	r26, 0x38	; 56
    205e:	b0 e0       	ldi	r27, 0x00	; 0
    2060:	e8 e3       	ldi	r30, 0x38	; 56
    2062:	f0 e0       	ldi	r31, 0x00	; 0
    2064:	80 81       	ld	r24, Z
    2066:	48 2f       	mov	r20, r24
    2068:	8b 81       	ldd	r24, Y+3	; 0x03
    206a:	28 2f       	mov	r18, r24
    206c:	30 e0       	ldi	r19, 0x00	; 0
    206e:	81 e0       	ldi	r24, 0x01	; 1
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	02 2e       	mov	r0, r18
    2074:	02 c0       	rjmp	.+4      	; 0x207a <DIO_u8SetPinValue+0xb0>
    2076:	88 0f       	add	r24, r24
    2078:	99 1f       	adc	r25, r25
    207a:	0a 94       	dec	r0
    207c:	e2 f7       	brpl	.-8      	; 0x2076 <DIO_u8SetPinValue+0xac>
    207e:	84 2b       	or	r24, r20
    2080:	8c 93       	st	X, r24
    2082:	ab c0       	rjmp	.+342    	; 0x21da <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTC:  SET_BIT(PORTC_REG,Copy_u8Pin);	break;
    2084:	a5 e3       	ldi	r26, 0x35	; 53
    2086:	b0 e0       	ldi	r27, 0x00	; 0
    2088:	e5 e3       	ldi	r30, 0x35	; 53
    208a:	f0 e0       	ldi	r31, 0x00	; 0
    208c:	80 81       	ld	r24, Z
    208e:	48 2f       	mov	r20, r24
    2090:	8b 81       	ldd	r24, Y+3	; 0x03
    2092:	28 2f       	mov	r18, r24
    2094:	30 e0       	ldi	r19, 0x00	; 0
    2096:	81 e0       	ldi	r24, 0x01	; 1
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	02 2e       	mov	r0, r18
    209c:	02 c0       	rjmp	.+4      	; 0x20a2 <DIO_u8SetPinValue+0xd8>
    209e:	88 0f       	add	r24, r24
    20a0:	99 1f       	adc	r25, r25
    20a2:	0a 94       	dec	r0
    20a4:	e2 f7       	brpl	.-8      	; 0x209e <DIO_u8SetPinValue+0xd4>
    20a6:	84 2b       	or	r24, r20
    20a8:	8c 93       	st	X, r24
    20aa:	97 c0       	rjmp	.+302    	; 0x21da <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTD:  SET_BIT(PORTD_REG,Copy_u8Pin);	break;
    20ac:	a2 e3       	ldi	r26, 0x32	; 50
    20ae:	b0 e0       	ldi	r27, 0x00	; 0
    20b0:	e2 e3       	ldi	r30, 0x32	; 50
    20b2:	f0 e0       	ldi	r31, 0x00	; 0
    20b4:	80 81       	ld	r24, Z
    20b6:	48 2f       	mov	r20, r24
    20b8:	8b 81       	ldd	r24, Y+3	; 0x03
    20ba:	28 2f       	mov	r18, r24
    20bc:	30 e0       	ldi	r19, 0x00	; 0
    20be:	81 e0       	ldi	r24, 0x01	; 1
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	02 2e       	mov	r0, r18
    20c4:	02 c0       	rjmp	.+4      	; 0x20ca <DIO_u8SetPinValue+0x100>
    20c6:	88 0f       	add	r24, r24
    20c8:	99 1f       	adc	r25, r25
    20ca:	0a 94       	dec	r0
    20cc:	e2 f7       	brpl	.-8      	; 0x20c6 <DIO_u8SetPinValue+0xfc>
    20ce:	84 2b       	or	r24, r20
    20d0:	8c 93       	st	X, r24
    20d2:	83 c0       	rjmp	.+262    	; 0x21da <DIO_u8SetPinValue+0x210>
				default:		   Local_u8ErrorState = 1; break;	
    20d4:	81 e0       	ldi	r24, 0x01	; 1
    20d6:	89 83       	std	Y+1, r24	; 0x01
    20d8:	80 c0       	rjmp	.+256    	; 0x21da <DIO_u8SetPinValue+0x210>
			}
		}
		else if (Copy_u8Value == DIO_u8PIN_LOW)
    20da:	8c 81       	ldd	r24, Y+4	; 0x04
    20dc:	88 23       	and	r24, r24
    20de:	09 f0       	breq	.+2      	; 0x20e2 <DIO_u8SetPinValue+0x118>
    20e0:	77 c0       	rjmp	.+238    	; 0x21d0 <DIO_u8SetPinValue+0x206>
		{
			switch(Copy_u8Port)
    20e2:	8a 81       	ldd	r24, Y+2	; 0x02
    20e4:	28 2f       	mov	r18, r24
    20e6:	30 e0       	ldi	r19, 0x00	; 0
    20e8:	3e 83       	std	Y+6, r19	; 0x06
    20ea:	2d 83       	std	Y+5, r18	; 0x05
    20ec:	8d 81       	ldd	r24, Y+5	; 0x05
    20ee:	9e 81       	ldd	r25, Y+6	; 0x06
    20f0:	81 30       	cpi	r24, 0x01	; 1
    20f2:	91 05       	cpc	r25, r1
    20f4:	59 f1       	breq	.+86     	; 0x214c <DIO_u8SetPinValue+0x182>
    20f6:	2d 81       	ldd	r18, Y+5	; 0x05
    20f8:	3e 81       	ldd	r19, Y+6	; 0x06
    20fa:	22 30       	cpi	r18, 0x02	; 2
    20fc:	31 05       	cpc	r19, r1
    20fe:	2c f4       	brge	.+10     	; 0x210a <DIO_u8SetPinValue+0x140>
    2100:	8d 81       	ldd	r24, Y+5	; 0x05
    2102:	9e 81       	ldd	r25, Y+6	; 0x06
    2104:	00 97       	sbiw	r24, 0x00	; 0
    2106:	69 f0       	breq	.+26     	; 0x2122 <DIO_u8SetPinValue+0x158>
    2108:	60 c0       	rjmp	.+192    	; 0x21ca <DIO_u8SetPinValue+0x200>
    210a:	2d 81       	ldd	r18, Y+5	; 0x05
    210c:	3e 81       	ldd	r19, Y+6	; 0x06
    210e:	22 30       	cpi	r18, 0x02	; 2
    2110:	31 05       	cpc	r19, r1
    2112:	89 f1       	breq	.+98     	; 0x2176 <DIO_u8SetPinValue+0x1ac>
    2114:	8d 81       	ldd	r24, Y+5	; 0x05
    2116:	9e 81       	ldd	r25, Y+6	; 0x06
    2118:	83 30       	cpi	r24, 0x03	; 3
    211a:	91 05       	cpc	r25, r1
    211c:	09 f4       	brne	.+2      	; 0x2120 <DIO_u8SetPinValue+0x156>
    211e:	40 c0       	rjmp	.+128    	; 0x21a0 <DIO_u8SetPinValue+0x1d6>
    2120:	54 c0       	rjmp	.+168    	; 0x21ca <DIO_u8SetPinValue+0x200>
			{
				case DIO_u8PORTA:	CLR_BIT(PORTA_REG,Copy_u8Pin);  break;
    2122:	ab e3       	ldi	r26, 0x3B	; 59
    2124:	b0 e0       	ldi	r27, 0x00	; 0
    2126:	eb e3       	ldi	r30, 0x3B	; 59
    2128:	f0 e0       	ldi	r31, 0x00	; 0
    212a:	80 81       	ld	r24, Z
    212c:	48 2f       	mov	r20, r24
    212e:	8b 81       	ldd	r24, Y+3	; 0x03
    2130:	28 2f       	mov	r18, r24
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	81 e0       	ldi	r24, 0x01	; 1
    2136:	90 e0       	ldi	r25, 0x00	; 0
    2138:	02 2e       	mov	r0, r18
    213a:	02 c0       	rjmp	.+4      	; 0x2140 <DIO_u8SetPinValue+0x176>
    213c:	88 0f       	add	r24, r24
    213e:	99 1f       	adc	r25, r25
    2140:	0a 94       	dec	r0
    2142:	e2 f7       	brpl	.-8      	; 0x213c <DIO_u8SetPinValue+0x172>
    2144:	80 95       	com	r24
    2146:	84 23       	and	r24, r20
    2148:	8c 93       	st	X, r24
    214a:	47 c0       	rjmp	.+142    	; 0x21da <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTB:	CLR_BIT(PORTB_REG,Copy_u8Pin);  break;
    214c:	a8 e3       	ldi	r26, 0x38	; 56
    214e:	b0 e0       	ldi	r27, 0x00	; 0
    2150:	e8 e3       	ldi	r30, 0x38	; 56
    2152:	f0 e0       	ldi	r31, 0x00	; 0
    2154:	80 81       	ld	r24, Z
    2156:	48 2f       	mov	r20, r24
    2158:	8b 81       	ldd	r24, Y+3	; 0x03
    215a:	28 2f       	mov	r18, r24
    215c:	30 e0       	ldi	r19, 0x00	; 0
    215e:	81 e0       	ldi	r24, 0x01	; 1
    2160:	90 e0       	ldi	r25, 0x00	; 0
    2162:	02 2e       	mov	r0, r18
    2164:	02 c0       	rjmp	.+4      	; 0x216a <DIO_u8SetPinValue+0x1a0>
    2166:	88 0f       	add	r24, r24
    2168:	99 1f       	adc	r25, r25
    216a:	0a 94       	dec	r0
    216c:	e2 f7       	brpl	.-8      	; 0x2166 <DIO_u8SetPinValue+0x19c>
    216e:	80 95       	com	r24
    2170:	84 23       	and	r24, r20
    2172:	8c 93       	st	X, r24
    2174:	32 c0       	rjmp	.+100    	; 0x21da <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTC:	CLR_BIT(PORTC_REG,Copy_u8Pin);  break;
    2176:	a5 e3       	ldi	r26, 0x35	; 53
    2178:	b0 e0       	ldi	r27, 0x00	; 0
    217a:	e5 e3       	ldi	r30, 0x35	; 53
    217c:	f0 e0       	ldi	r31, 0x00	; 0
    217e:	80 81       	ld	r24, Z
    2180:	48 2f       	mov	r20, r24
    2182:	8b 81       	ldd	r24, Y+3	; 0x03
    2184:	28 2f       	mov	r18, r24
    2186:	30 e0       	ldi	r19, 0x00	; 0
    2188:	81 e0       	ldi	r24, 0x01	; 1
    218a:	90 e0       	ldi	r25, 0x00	; 0
    218c:	02 2e       	mov	r0, r18
    218e:	02 c0       	rjmp	.+4      	; 0x2194 <DIO_u8SetPinValue+0x1ca>
    2190:	88 0f       	add	r24, r24
    2192:	99 1f       	adc	r25, r25
    2194:	0a 94       	dec	r0
    2196:	e2 f7       	brpl	.-8      	; 0x2190 <DIO_u8SetPinValue+0x1c6>
    2198:	80 95       	com	r24
    219a:	84 23       	and	r24, r20
    219c:	8c 93       	st	X, r24
    219e:	1d c0       	rjmp	.+58     	; 0x21da <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTD:	CLR_BIT(PORTD_REG,Copy_u8Pin);  break;
    21a0:	a2 e3       	ldi	r26, 0x32	; 50
    21a2:	b0 e0       	ldi	r27, 0x00	; 0
    21a4:	e2 e3       	ldi	r30, 0x32	; 50
    21a6:	f0 e0       	ldi	r31, 0x00	; 0
    21a8:	80 81       	ld	r24, Z
    21aa:	48 2f       	mov	r20, r24
    21ac:	8b 81       	ldd	r24, Y+3	; 0x03
    21ae:	28 2f       	mov	r18, r24
    21b0:	30 e0       	ldi	r19, 0x00	; 0
    21b2:	81 e0       	ldi	r24, 0x01	; 1
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	02 2e       	mov	r0, r18
    21b8:	02 c0       	rjmp	.+4      	; 0x21be <DIO_u8SetPinValue+0x1f4>
    21ba:	88 0f       	add	r24, r24
    21bc:	99 1f       	adc	r25, r25
    21be:	0a 94       	dec	r0
    21c0:	e2 f7       	brpl	.-8      	; 0x21ba <DIO_u8SetPinValue+0x1f0>
    21c2:	80 95       	com	r24
    21c4:	84 23       	and	r24, r20
    21c6:	8c 93       	st	X, r24
    21c8:	08 c0       	rjmp	.+16     	; 0x21da <DIO_u8SetPinValue+0x210>
				default : 			Local_u8ErrorState = 1; break;	
    21ca:	81 e0       	ldi	r24, 0x01	; 1
    21cc:	89 83       	std	Y+1, r24	; 0x01
    21ce:	05 c0       	rjmp	.+10     	; 0x21da <DIO_u8SetPinValue+0x210>
			}
		}
		else
		{
			Local_u8ErrorState = 1;
    21d0:	81 e0       	ldi	r24, 0x01	; 1
    21d2:	89 83       	std	Y+1, r24	; 0x01
    21d4:	02 c0       	rjmp	.+4      	; 0x21da <DIO_u8SetPinValue+0x210>
		}
		
	}
	else
	{
		Local_u8ErrorState = 1;
    21d6:	81 e0       	ldi	r24, 0x01	; 1
    21d8:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    21da:	89 81       	ldd	r24, Y+1	; 0x01
}
    21dc:	28 96       	adiw	r28, 0x08	; 8
    21de:	0f b6       	in	r0, 0x3f	; 63
    21e0:	f8 94       	cli
    21e2:	de bf       	out	0x3e, r29	; 62
    21e4:	0f be       	out	0x3f, r0	; 63
    21e6:	cd bf       	out	0x3d, r28	; 61
    21e8:	cf 91       	pop	r28
    21ea:	df 91       	pop	r29
    21ec:	08 95       	ret

000021ee <DIO_u8SetPortValue>:

/*****************************************************************************************/

u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
    21ee:	df 93       	push	r29
    21f0:	cf 93       	push	r28
    21f2:	00 d0       	rcall	.+0      	; 0x21f4 <DIO_u8SetPortValue+0x6>
    21f4:	00 d0       	rcall	.+0      	; 0x21f6 <DIO_u8SetPortValue+0x8>
    21f6:	0f 92       	push	r0
    21f8:	cd b7       	in	r28, 0x3d	; 61
    21fa:	de b7       	in	r29, 0x3e	; 62
    21fc:	8a 83       	std	Y+2, r24	; 0x02
    21fe:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = 0;
    2200:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
    2202:	8a 81       	ldd	r24, Y+2	; 0x02
    2204:	28 2f       	mov	r18, r24
    2206:	30 e0       	ldi	r19, 0x00	; 0
    2208:	3d 83       	std	Y+5, r19	; 0x05
    220a:	2c 83       	std	Y+4, r18	; 0x04
    220c:	8c 81       	ldd	r24, Y+4	; 0x04
    220e:	9d 81       	ldd	r25, Y+5	; 0x05
    2210:	81 30       	cpi	r24, 0x01	; 1
    2212:	91 05       	cpc	r25, r1
    2214:	d1 f0       	breq	.+52     	; 0x224a <DIO_u8SetPortValue+0x5c>
    2216:	2c 81       	ldd	r18, Y+4	; 0x04
    2218:	3d 81       	ldd	r19, Y+5	; 0x05
    221a:	22 30       	cpi	r18, 0x02	; 2
    221c:	31 05       	cpc	r19, r1
    221e:	2c f4       	brge	.+10     	; 0x222a <DIO_u8SetPortValue+0x3c>
    2220:	8c 81       	ldd	r24, Y+4	; 0x04
    2222:	9d 81       	ldd	r25, Y+5	; 0x05
    2224:	00 97       	sbiw	r24, 0x00	; 0
    2226:	61 f0       	breq	.+24     	; 0x2240 <DIO_u8SetPortValue+0x52>
    2228:	1f c0       	rjmp	.+62     	; 0x2268 <DIO_u8SetPortValue+0x7a>
    222a:	2c 81       	ldd	r18, Y+4	; 0x04
    222c:	3d 81       	ldd	r19, Y+5	; 0x05
    222e:	22 30       	cpi	r18, 0x02	; 2
    2230:	31 05       	cpc	r19, r1
    2232:	81 f0       	breq	.+32     	; 0x2254 <DIO_u8SetPortValue+0x66>
    2234:	8c 81       	ldd	r24, Y+4	; 0x04
    2236:	9d 81       	ldd	r25, Y+5	; 0x05
    2238:	83 30       	cpi	r24, 0x03	; 3
    223a:	91 05       	cpc	r25, r1
    223c:	81 f0       	breq	.+32     	; 0x225e <DIO_u8SetPortValue+0x70>
    223e:	14 c0       	rjmp	.+40     	; 0x2268 <DIO_u8SetPortValue+0x7a>
	{
		case DIO_u8PORTA:  PORTA_REG = Copy_u8Value;	break;
    2240:	eb e3       	ldi	r30, 0x3B	; 59
    2242:	f0 e0       	ldi	r31, 0x00	; 0
    2244:	8b 81       	ldd	r24, Y+3	; 0x03
    2246:	80 83       	st	Z, r24
    2248:	11 c0       	rjmp	.+34     	; 0x226c <DIO_u8SetPortValue+0x7e>
		case DIO_u8PORTB:  PORTB_REG = Copy_u8Value;	break;
    224a:	e8 e3       	ldi	r30, 0x38	; 56
    224c:	f0 e0       	ldi	r31, 0x00	; 0
    224e:	8b 81       	ldd	r24, Y+3	; 0x03
    2250:	80 83       	st	Z, r24
    2252:	0c c0       	rjmp	.+24     	; 0x226c <DIO_u8SetPortValue+0x7e>
		case DIO_u8PORTC:  PORTC_REG = Copy_u8Value;	break;
    2254:	e5 e3       	ldi	r30, 0x35	; 53
    2256:	f0 e0       	ldi	r31, 0x00	; 0
    2258:	8b 81       	ldd	r24, Y+3	; 0x03
    225a:	80 83       	st	Z, r24
    225c:	07 c0       	rjmp	.+14     	; 0x226c <DIO_u8SetPortValue+0x7e>
		case DIO_u8PORTD:  PORTD_REG = Copy_u8Value;	break;
    225e:	e2 e3       	ldi	r30, 0x32	; 50
    2260:	f0 e0       	ldi	r31, 0x00	; 0
    2262:	8b 81       	ldd	r24, Y+3	; 0x03
    2264:	80 83       	st	Z, r24
    2266:	02 c0       	rjmp	.+4      	; 0x226c <DIO_u8SetPortValue+0x7e>
		default:		   Local_u8ErrorState = 1; break;	
    2268:	81 e0       	ldi	r24, 0x01	; 1
    226a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    226c:	89 81       	ldd	r24, Y+1	; 0x01
}
    226e:	0f 90       	pop	r0
    2270:	0f 90       	pop	r0
    2272:	0f 90       	pop	r0
    2274:	0f 90       	pop	r0
    2276:	0f 90       	pop	r0
    2278:	cf 91       	pop	r28
    227a:	df 91       	pop	r29
    227c:	08 95       	ret

0000227e <DIO_u8TogglePin>:

/*****************************************************************************************/


u8 DIO_u8TogglePin(u8 Copy_u8Port, u8 Copy_u8Pin )
{
    227e:	df 93       	push	r29
    2280:	cf 93       	push	r28
    2282:	00 d0       	rcall	.+0      	; 0x2284 <DIO_u8TogglePin+0x6>
    2284:	00 d0       	rcall	.+0      	; 0x2286 <DIO_u8TogglePin+0x8>
    2286:	0f 92       	push	r0
    2288:	cd b7       	in	r28, 0x3d	; 61
    228a:	de b7       	in	r29, 0x3e	; 62
    228c:	8a 83       	std	Y+2, r24	; 0x02
    228e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = 0;
    2290:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin <= 7)
    2292:	8b 81       	ldd	r24, Y+3	; 0x03
    2294:	88 30       	cpi	r24, 0x08	; 8
    2296:	08 f0       	brcs	.+2      	; 0x229a <DIO_u8TogglePin+0x1c>
    2298:	72 c0       	rjmp	.+228    	; 0x237e <DIO_u8TogglePin+0x100>
	{
		switch (Copy_u8Port)
    229a:	8a 81       	ldd	r24, Y+2	; 0x02
    229c:	28 2f       	mov	r18, r24
    229e:	30 e0       	ldi	r19, 0x00	; 0
    22a0:	3d 83       	std	Y+5, r19	; 0x05
    22a2:	2c 83       	std	Y+4, r18	; 0x04
    22a4:	8c 81       	ldd	r24, Y+4	; 0x04
    22a6:	9d 81       	ldd	r25, Y+5	; 0x05
    22a8:	81 30       	cpi	r24, 0x01	; 1
    22aa:	91 05       	cpc	r25, r1
    22ac:	49 f1       	breq	.+82     	; 0x2300 <DIO_u8TogglePin+0x82>
    22ae:	2c 81       	ldd	r18, Y+4	; 0x04
    22b0:	3d 81       	ldd	r19, Y+5	; 0x05
    22b2:	22 30       	cpi	r18, 0x02	; 2
    22b4:	31 05       	cpc	r19, r1
    22b6:	2c f4       	brge	.+10     	; 0x22c2 <DIO_u8TogglePin+0x44>
    22b8:	8c 81       	ldd	r24, Y+4	; 0x04
    22ba:	9d 81       	ldd	r25, Y+5	; 0x05
    22bc:	00 97       	sbiw	r24, 0x00	; 0
    22be:	61 f0       	breq	.+24     	; 0x22d8 <DIO_u8TogglePin+0x5a>
    22c0:	5b c0       	rjmp	.+182    	; 0x2378 <DIO_u8TogglePin+0xfa>
    22c2:	2c 81       	ldd	r18, Y+4	; 0x04
    22c4:	3d 81       	ldd	r19, Y+5	; 0x05
    22c6:	22 30       	cpi	r18, 0x02	; 2
    22c8:	31 05       	cpc	r19, r1
    22ca:	71 f1       	breq	.+92     	; 0x2328 <DIO_u8TogglePin+0xaa>
    22cc:	8c 81       	ldd	r24, Y+4	; 0x04
    22ce:	9d 81       	ldd	r25, Y+5	; 0x05
    22d0:	83 30       	cpi	r24, 0x03	; 3
    22d2:	91 05       	cpc	r25, r1
    22d4:	e9 f1       	breq	.+122    	; 0x2350 <DIO_u8TogglePin+0xd2>
    22d6:	50 c0       	rjmp	.+160    	; 0x2378 <DIO_u8TogglePin+0xfa>
		{
			case DIO_u8PORTA: TOGGLE_BIT(PORTA_REG,Copy_u8Pin);  break;
    22d8:	ab e3       	ldi	r26, 0x3B	; 59
    22da:	b0 e0       	ldi	r27, 0x00	; 0
    22dc:	eb e3       	ldi	r30, 0x3B	; 59
    22de:	f0 e0       	ldi	r31, 0x00	; 0
    22e0:	80 81       	ld	r24, Z
    22e2:	48 2f       	mov	r20, r24
    22e4:	8b 81       	ldd	r24, Y+3	; 0x03
    22e6:	28 2f       	mov	r18, r24
    22e8:	30 e0       	ldi	r19, 0x00	; 0
    22ea:	81 e0       	ldi	r24, 0x01	; 1
    22ec:	90 e0       	ldi	r25, 0x00	; 0
    22ee:	02 2e       	mov	r0, r18
    22f0:	02 c0       	rjmp	.+4      	; 0x22f6 <DIO_u8TogglePin+0x78>
    22f2:	88 0f       	add	r24, r24
    22f4:	99 1f       	adc	r25, r25
    22f6:	0a 94       	dec	r0
    22f8:	e2 f7       	brpl	.-8      	; 0x22f2 <DIO_u8TogglePin+0x74>
    22fa:	84 27       	eor	r24, r20
    22fc:	8c 93       	st	X, r24
    22fe:	41 c0       	rjmp	.+130    	; 0x2382 <DIO_u8TogglePin+0x104>
			case DIO_u8PORTB: TOGGLE_BIT(PORTB_REG,Copy_u8Pin);  break;
    2300:	a8 e3       	ldi	r26, 0x38	; 56
    2302:	b0 e0       	ldi	r27, 0x00	; 0
    2304:	e8 e3       	ldi	r30, 0x38	; 56
    2306:	f0 e0       	ldi	r31, 0x00	; 0
    2308:	80 81       	ld	r24, Z
    230a:	48 2f       	mov	r20, r24
    230c:	8b 81       	ldd	r24, Y+3	; 0x03
    230e:	28 2f       	mov	r18, r24
    2310:	30 e0       	ldi	r19, 0x00	; 0
    2312:	81 e0       	ldi	r24, 0x01	; 1
    2314:	90 e0       	ldi	r25, 0x00	; 0
    2316:	02 2e       	mov	r0, r18
    2318:	02 c0       	rjmp	.+4      	; 0x231e <DIO_u8TogglePin+0xa0>
    231a:	88 0f       	add	r24, r24
    231c:	99 1f       	adc	r25, r25
    231e:	0a 94       	dec	r0
    2320:	e2 f7       	brpl	.-8      	; 0x231a <DIO_u8TogglePin+0x9c>
    2322:	84 27       	eor	r24, r20
    2324:	8c 93       	st	X, r24
    2326:	2d c0       	rjmp	.+90     	; 0x2382 <DIO_u8TogglePin+0x104>
			case DIO_u8PORTC: TOGGLE_BIT(PORTC_REG,Copy_u8Pin);  break;
    2328:	a5 e3       	ldi	r26, 0x35	; 53
    232a:	b0 e0       	ldi	r27, 0x00	; 0
    232c:	e5 e3       	ldi	r30, 0x35	; 53
    232e:	f0 e0       	ldi	r31, 0x00	; 0
    2330:	80 81       	ld	r24, Z
    2332:	48 2f       	mov	r20, r24
    2334:	8b 81       	ldd	r24, Y+3	; 0x03
    2336:	28 2f       	mov	r18, r24
    2338:	30 e0       	ldi	r19, 0x00	; 0
    233a:	81 e0       	ldi	r24, 0x01	; 1
    233c:	90 e0       	ldi	r25, 0x00	; 0
    233e:	02 2e       	mov	r0, r18
    2340:	02 c0       	rjmp	.+4      	; 0x2346 <DIO_u8TogglePin+0xc8>
    2342:	88 0f       	add	r24, r24
    2344:	99 1f       	adc	r25, r25
    2346:	0a 94       	dec	r0
    2348:	e2 f7       	brpl	.-8      	; 0x2342 <DIO_u8TogglePin+0xc4>
    234a:	84 27       	eor	r24, r20
    234c:	8c 93       	st	X, r24
    234e:	19 c0       	rjmp	.+50     	; 0x2382 <DIO_u8TogglePin+0x104>
			case DIO_u8PORTD: TOGGLE_BIT(PORTD_REG,Copy_u8Pin);  break;
    2350:	a2 e3       	ldi	r26, 0x32	; 50
    2352:	b0 e0       	ldi	r27, 0x00	; 0
    2354:	e2 e3       	ldi	r30, 0x32	; 50
    2356:	f0 e0       	ldi	r31, 0x00	; 0
    2358:	80 81       	ld	r24, Z
    235a:	48 2f       	mov	r20, r24
    235c:	8b 81       	ldd	r24, Y+3	; 0x03
    235e:	28 2f       	mov	r18, r24
    2360:	30 e0       	ldi	r19, 0x00	; 0
    2362:	81 e0       	ldi	r24, 0x01	; 1
    2364:	90 e0       	ldi	r25, 0x00	; 0
    2366:	02 2e       	mov	r0, r18
    2368:	02 c0       	rjmp	.+4      	; 0x236e <DIO_u8TogglePin+0xf0>
    236a:	88 0f       	add	r24, r24
    236c:	99 1f       	adc	r25, r25
    236e:	0a 94       	dec	r0
    2370:	e2 f7       	brpl	.-8      	; 0x236a <DIO_u8TogglePin+0xec>
    2372:	84 27       	eor	r24, r20
    2374:	8c 93       	st	X, r24
    2376:	05 c0       	rjmp	.+10     	; 0x2382 <DIO_u8TogglePin+0x104>
			default: 	      Local_u8ErrorState = 1;
    2378:	81 e0       	ldi	r24, 0x01	; 1
    237a:	89 83       	std	Y+1, r24	; 0x01
    237c:	02 c0       	rjmp	.+4      	; 0x2382 <DIO_u8TogglePin+0x104>
		}
	}
	else
	{
		Local_u8ErrorState = 1;
    237e:	81 e0       	ldi	r24, 0x01	; 1
    2380:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    2382:	89 81       	ldd	r24, Y+1	; 0x01
}
    2384:	0f 90       	pop	r0
    2386:	0f 90       	pop	r0
    2388:	0f 90       	pop	r0
    238a:	0f 90       	pop	r0
    238c:	0f 90       	pop	r0
    238e:	cf 91       	pop	r28
    2390:	df 91       	pop	r29
    2392:	08 95       	ret

00002394 <KPD_u8GetPressedKey>:




u8 KPD_u8GetPressedKey(void)
{
    2394:	df 93       	push	r29
    2396:	cf 93       	push	r28
    2398:	cd b7       	in	r28, 0x3d	; 61
    239a:	de b7       	in	r29, 0x3e	; 62
    239c:	a4 97       	sbiw	r28, 0x24	; 36
    239e:	0f b6       	in	r0, 0x3f	; 63
    23a0:	f8 94       	cli
    23a2:	de bf       	out	0x3e, r29	; 62
    23a4:	0f be       	out	0x3f, r0	; 63
    23a6:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8PressedKey = NO_PRESSED_KEY;
    23a8:	1d 82       	std	Y+5, r1	; 0x05
	u8 Local_u8RowIndex,Local_u8ColumnIndex;
	u8 Local_u8SwitchValue;
	u8 Local_u8Array[NUMBER_OF_ROWS][NUMBER_OF_COLUMNS] = KPD_ARRAY;
    23aa:	ce 01       	movw	r24, r28
    23ac:	07 96       	adiw	r24, 0x07	; 7
    23ae:	99 a3       	std	Y+33, r25	; 0x21
    23b0:	88 a3       	std	Y+32, r24	; 0x20
    23b2:	e3 e7       	ldi	r30, 0x73	; 115
    23b4:	f1 e0       	ldi	r31, 0x01	; 1
    23b6:	fb a3       	std	Y+35, r31	; 0x23
    23b8:	ea a3       	std	Y+34, r30	; 0x22
    23ba:	f0 e1       	ldi	r31, 0x10	; 16
    23bc:	fc a3       	std	Y+36, r31	; 0x24
    23be:	ea a1       	ldd	r30, Y+34	; 0x22
    23c0:	fb a1       	ldd	r31, Y+35	; 0x23
    23c2:	00 80       	ld	r0, Z
    23c4:	8a a1       	ldd	r24, Y+34	; 0x22
    23c6:	9b a1       	ldd	r25, Y+35	; 0x23
    23c8:	01 96       	adiw	r24, 0x01	; 1
    23ca:	9b a3       	std	Y+35, r25	; 0x23
    23cc:	8a a3       	std	Y+34, r24	; 0x22
    23ce:	e8 a1       	ldd	r30, Y+32	; 0x20
    23d0:	f9 a1       	ldd	r31, Y+33	; 0x21
    23d2:	00 82       	st	Z, r0
    23d4:	88 a1       	ldd	r24, Y+32	; 0x20
    23d6:	99 a1       	ldd	r25, Y+33	; 0x21
    23d8:	01 96       	adiw	r24, 0x01	; 1
    23da:	99 a3       	std	Y+33, r25	; 0x21
    23dc:	88 a3       	std	Y+32, r24	; 0x20
    23de:	9c a1       	ldd	r25, Y+36	; 0x24
    23e0:	91 50       	subi	r25, 0x01	; 1
    23e2:	9c a3       	std	Y+36, r25	; 0x24
    23e4:	ec a1       	ldd	r30, Y+36	; 0x24
    23e6:	ee 23       	and	r30, r30
    23e8:	51 f7       	brne	.-44     	; 0x23be <KPD_u8GetPressedKey+0x2a>
	u8 Local_u8RowsArray[NUMBER_OF_ROWS] = {KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};
    23ea:	85 e0       	ldi	r24, 0x05	; 5
    23ec:	8f 8b       	std	Y+23, r24	; 0x17
    23ee:	84 e0       	ldi	r24, 0x04	; 4
    23f0:	88 8f       	std	Y+24, r24	; 0x18
    23f2:	83 e0       	ldi	r24, 0x03	; 3
    23f4:	89 8f       	std	Y+25, r24	; 0x19
    23f6:	82 e0       	ldi	r24, 0x02	; 2
    23f8:	8a 8f       	std	Y+26, r24	; 0x1a
	u8 Local_u8ColumnsArray[NUMBER_OF_COLUMNS] = {KPD_COL0_PIN,KPD_COL1_PIN,KPD_COL2_PIN,KPD_COL3_PIN};
    23fa:	87 e0       	ldi	r24, 0x07	; 7
    23fc:	8b 8f       	std	Y+27, r24	; 0x1b
    23fe:	86 e0       	ldi	r24, 0x06	; 6
    2400:	8c 8f       	std	Y+28, r24	; 0x1c
    2402:	85 e0       	ldi	r24, 0x05	; 5
    2404:	8d 8f       	std	Y+29, r24	; 0x1d
    2406:	83 e0       	ldi	r24, 0x03	; 3
    2408:	8e 8f       	std	Y+30, r24	; 0x1e


	//deactivate all rows
	for (int i = 0; i<NUMBER_OF_ROWS; i++)
    240a:	1a 82       	std	Y+2, r1	; 0x02
    240c:	19 82       	std	Y+1, r1	; 0x01
    240e:	12 c0       	rjmp	.+36     	; 0x2434 <KPD_u8GetPressedKey+0xa0>
	{
		DIO_u8SetPinValue(KPD_ROWS_PORT,Local_u8RowsArray[i],DIO_u8PIN_HIGH);
    2410:	29 81       	ldd	r18, Y+1	; 0x01
    2412:	3a 81       	ldd	r19, Y+2	; 0x02
    2414:	ce 01       	movw	r24, r28
    2416:	47 96       	adiw	r24, 0x17	; 23
    2418:	fc 01       	movw	r30, r24
    241a:	e2 0f       	add	r30, r18
    241c:	f3 1f       	adc	r31, r19
    241e:	90 81       	ld	r25, Z
    2420:	82 e0       	ldi	r24, 0x02	; 2
    2422:	69 2f       	mov	r22, r25
    2424:	41 e0       	ldi	r20, 0x01	; 1
    2426:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <DIO_u8SetPinValue>
	u8 Local_u8RowsArray[NUMBER_OF_ROWS] = {KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};
	u8 Local_u8ColumnsArray[NUMBER_OF_COLUMNS] = {KPD_COL0_PIN,KPD_COL1_PIN,KPD_COL2_PIN,KPD_COL3_PIN};


	//deactivate all rows
	for (int i = 0; i<NUMBER_OF_ROWS; i++)
    242a:	89 81       	ldd	r24, Y+1	; 0x01
    242c:	9a 81       	ldd	r25, Y+2	; 0x02
    242e:	01 96       	adiw	r24, 0x01	; 1
    2430:	9a 83       	std	Y+2, r25	; 0x02
    2432:	89 83       	std	Y+1, r24	; 0x01
    2434:	89 81       	ldd	r24, Y+1	; 0x01
    2436:	9a 81       	ldd	r25, Y+2	; 0x02
    2438:	84 30       	cpi	r24, 0x04	; 4
    243a:	91 05       	cpc	r25, r1
    243c:	4c f3       	brlt	.-46     	; 0x2410 <KPD_u8GetPressedKey+0x7c>
	{
		DIO_u8SetPinValue(KPD_ROWS_PORT,Local_u8RowsArray[i],DIO_u8PIN_HIGH);
	}

	//looping
	for (Local_u8RowIndex=0; Local_u8RowIndex < NUMBER_OF_ROWS; Local_u8RowIndex++)
    243e:	1c 82       	std	Y+4, r1	; 0x04
    2440:	68 c0       	rjmp	.+208    	; 0x2512 <KPD_u8GetPressedKey+0x17e>
	{
		// ACTIVATE THE ROW
		DIO_u8SetPinValue(KPD_ROWS_PORT,Local_u8RowsArray[Local_u8RowIndex],DIO_u8PIN_LOW);
    2442:	8c 81       	ldd	r24, Y+4	; 0x04
    2444:	28 2f       	mov	r18, r24
    2446:	30 e0       	ldi	r19, 0x00	; 0
    2448:	ce 01       	movw	r24, r28
    244a:	47 96       	adiw	r24, 0x17	; 23
    244c:	fc 01       	movw	r30, r24
    244e:	e2 0f       	add	r30, r18
    2450:	f3 1f       	adc	r31, r19
    2452:	90 81       	ld	r25, Z
    2454:	82 e0       	ldi	r24, 0x02	; 2
    2456:	69 2f       	mov	r22, r25
    2458:	40 e0       	ldi	r20, 0x00	; 0
    245a:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <DIO_u8SetPinValue>

		for (Local_u8ColumnIndex=0; Local_u8ColumnIndex<NUMBER_OF_COLUMNS; Local_u8ColumnIndex++)
    245e:	1b 82       	std	Y+3, r1	; 0x03
    2460:	43 c0       	rjmp	.+134    	; 0x24e8 <KPD_u8GetPressedKey+0x154>
		{
			DIO_u8GetPinValue(KPD_COLS_PORT,Local_u8ColumnsArray[Local_u8ColumnIndex],&Local_u8SwitchValue);
    2462:	8b 81       	ldd	r24, Y+3	; 0x03
    2464:	28 2f       	mov	r18, r24
    2466:	30 e0       	ldi	r19, 0x00	; 0
    2468:	ce 01       	movw	r24, r28
    246a:	4b 96       	adiw	r24, 0x1b	; 27
    246c:	fc 01       	movw	r30, r24
    246e:	e2 0f       	add	r30, r18
    2470:	f3 1f       	adc	r31, r19
    2472:	90 81       	ld	r25, Z
    2474:	9e 01       	movw	r18, r28
    2476:	2a 5f       	subi	r18, 0xFA	; 250
    2478:	3f 4f       	sbci	r19, 0xFF	; 255
    247a:	83 e0       	ldi	r24, 0x03	; 3
    247c:	69 2f       	mov	r22, r25
    247e:	a9 01       	movw	r20, r18
    2480:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <DIO_u8GetPinValue>
			if (!Local_u8SwitchValue)
    2484:	8e 81       	ldd	r24, Y+6	; 0x06
    2486:	88 23       	and	r24, r24
    2488:	61 f5       	brne	.+88     	; 0x24e2 <KPD_u8GetPressedKey+0x14e>
    248a:	11 c0       	rjmp	.+34     	; 0x24ae <KPD_u8GetPressedKey+0x11a>
			{
				while(!Local_u8SwitchValue)
				{
					DIO_u8GetPinValue(KPD_COLS_PORT,Local_u8ColumnsArray[Local_u8ColumnIndex],&Local_u8SwitchValue);
    248c:	8b 81       	ldd	r24, Y+3	; 0x03
    248e:	28 2f       	mov	r18, r24
    2490:	30 e0       	ldi	r19, 0x00	; 0
    2492:	ce 01       	movw	r24, r28
    2494:	4b 96       	adiw	r24, 0x1b	; 27
    2496:	fc 01       	movw	r30, r24
    2498:	e2 0f       	add	r30, r18
    249a:	f3 1f       	adc	r31, r19
    249c:	90 81       	ld	r25, Z
    249e:	9e 01       	movw	r18, r28
    24a0:	2a 5f       	subi	r18, 0xFA	; 250
    24a2:	3f 4f       	sbci	r19, 0xFF	; 255
    24a4:	83 e0       	ldi	r24, 0x03	; 3
    24a6:	69 2f       	mov	r22, r25
    24a8:	a9 01       	movw	r20, r18
    24aa:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <DIO_u8GetPinValue>
		for (Local_u8ColumnIndex=0; Local_u8ColumnIndex<NUMBER_OF_COLUMNS; Local_u8ColumnIndex++)
		{
			DIO_u8GetPinValue(KPD_COLS_PORT,Local_u8ColumnsArray[Local_u8ColumnIndex],&Local_u8SwitchValue);
			if (!Local_u8SwitchValue)
			{
				while(!Local_u8SwitchValue)
    24ae:	8e 81       	ldd	r24, Y+6	; 0x06
    24b0:	88 23       	and	r24, r24
    24b2:	61 f3       	breq	.-40     	; 0x248c <KPD_u8GetPressedKey+0xf8>
				{
					DIO_u8GetPinValue(KPD_COLS_PORT,Local_u8ColumnsArray[Local_u8ColumnIndex],&Local_u8SwitchValue);
				}
					Local_u8PressedKey= Local_u8Array[Local_u8RowIndex][Local_u8ColumnIndex];
    24b4:	8c 81       	ldd	r24, Y+4	; 0x04
    24b6:	28 2f       	mov	r18, r24
    24b8:	30 e0       	ldi	r19, 0x00	; 0
    24ba:	8b 81       	ldd	r24, Y+3	; 0x03
    24bc:	48 2f       	mov	r20, r24
    24be:	50 e0       	ldi	r21, 0x00	; 0
    24c0:	22 0f       	add	r18, r18
    24c2:	33 1f       	adc	r19, r19
    24c4:	22 0f       	add	r18, r18
    24c6:	33 1f       	adc	r19, r19
    24c8:	ce 01       	movw	r24, r28
    24ca:	01 96       	adiw	r24, 0x01	; 1
    24cc:	82 0f       	add	r24, r18
    24ce:	93 1f       	adc	r25, r19
    24d0:	84 0f       	add	r24, r20
    24d2:	95 1f       	adc	r25, r21
    24d4:	fc 01       	movw	r30, r24
    24d6:	36 96       	adiw	r30, 0x06	; 6
    24d8:	80 81       	ld	r24, Z
    24da:	8d 83       	std	Y+5, r24	; 0x05
					return Local_u8PressedKey;
    24dc:	fd 81       	ldd	r31, Y+5	; 0x05
    24de:	ff 8f       	std	Y+31, r31	; 0x1f
    24e0:	1e c0       	rjmp	.+60     	; 0x251e <KPD_u8GetPressedKey+0x18a>
	for (Local_u8RowIndex=0; Local_u8RowIndex < NUMBER_OF_ROWS; Local_u8RowIndex++)
	{
		// ACTIVATE THE ROW
		DIO_u8SetPinValue(KPD_ROWS_PORT,Local_u8RowsArray[Local_u8RowIndex],DIO_u8PIN_LOW);

		for (Local_u8ColumnIndex=0; Local_u8ColumnIndex<NUMBER_OF_COLUMNS; Local_u8ColumnIndex++)
    24e2:	8b 81       	ldd	r24, Y+3	; 0x03
    24e4:	8f 5f       	subi	r24, 0xFF	; 255
    24e6:	8b 83       	std	Y+3, r24	; 0x03
    24e8:	8b 81       	ldd	r24, Y+3	; 0x03
    24ea:	84 30       	cpi	r24, 0x04	; 4
    24ec:	08 f4       	brcc	.+2      	; 0x24f0 <KPD_u8GetPressedKey+0x15c>
    24ee:	b9 cf       	rjmp	.-142    	; 0x2462 <KPD_u8GetPressedKey+0xce>
					Local_u8PressedKey= Local_u8Array[Local_u8RowIndex][Local_u8ColumnIndex];
					return Local_u8PressedKey;
			}
		}
		//DEACTIVATE THE ROW
		DIO_u8SetPinValue(KPD_ROWS_PORT,Local_u8RowsArray[Local_u8RowIndex],DIO_u8PIN_HIGH);
    24f0:	8c 81       	ldd	r24, Y+4	; 0x04
    24f2:	28 2f       	mov	r18, r24
    24f4:	30 e0       	ldi	r19, 0x00	; 0
    24f6:	ce 01       	movw	r24, r28
    24f8:	47 96       	adiw	r24, 0x17	; 23
    24fa:	fc 01       	movw	r30, r24
    24fc:	e2 0f       	add	r30, r18
    24fe:	f3 1f       	adc	r31, r19
    2500:	90 81       	ld	r25, Z
    2502:	82 e0       	ldi	r24, 0x02	; 2
    2504:	69 2f       	mov	r22, r25
    2506:	41 e0       	ldi	r20, 0x01	; 1
    2508:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <DIO_u8SetPinValue>
	{
		DIO_u8SetPinValue(KPD_ROWS_PORT,Local_u8RowsArray[i],DIO_u8PIN_HIGH);
	}

	//looping
	for (Local_u8RowIndex=0; Local_u8RowIndex < NUMBER_OF_ROWS; Local_u8RowIndex++)
    250c:	8c 81       	ldd	r24, Y+4	; 0x04
    250e:	8f 5f       	subi	r24, 0xFF	; 255
    2510:	8c 83       	std	Y+4, r24	; 0x04
    2512:	8c 81       	ldd	r24, Y+4	; 0x04
    2514:	84 30       	cpi	r24, 0x04	; 4
    2516:	08 f4       	brcc	.+2      	; 0x251a <KPD_u8GetPressedKey+0x186>
    2518:	94 cf       	rjmp	.-216    	; 0x2442 <KPD_u8GetPressedKey+0xae>
			}
		}
		//DEACTIVATE THE ROW
		DIO_u8SetPinValue(KPD_ROWS_PORT,Local_u8RowsArray[Local_u8RowIndex],DIO_u8PIN_HIGH);
	}
	return Local_u8PressedKey;
    251a:	8d 81       	ldd	r24, Y+5	; 0x05
    251c:	8f 8f       	std	Y+31, r24	; 0x1f
    251e:	8f 8d       	ldd	r24, Y+31	; 0x1f
}
    2520:	a4 96       	adiw	r28, 0x24	; 36
    2522:	0f b6       	in	r0, 0x3f	; 63
    2524:	f8 94       	cli
    2526:	de bf       	out	0x3e, r29	; 62
    2528:	0f be       	out	0x3f, r0	; 63
    252a:	cd bf       	out	0x3d, r28	; 61
    252c:	cf 91       	pop	r28
    252e:	df 91       	pop	r29
    2530:	08 95       	ret

00002532 <main>:
void PerformMultiplicationAnDivision();
void PerformAdditionAndSubtraction();
 u8 flag=0;

void main(void)
{
    2532:	df 93       	push	r29
    2534:	cf 93       	push	r28
    2536:	00 d0       	rcall	.+0      	; 0x2538 <main+0x6>
    2538:	0f 92       	push	r0
    253a:	cd b7       	in	r28, 0x3d	; 61
    253c:	de b7       	in	r29, 0x3e	; 62
	DIO_voidInit();
    253e:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <DIO_voidInit>
	CLCD_voidInit();
    2542:	0e 94 d5 07 	call	0xfaa	; 0xfaa <CLCD_voidInit>

	INIT_VARS();
    2546:	1b 82       	std	Y+3, r1	; 0x03
    2548:	23 c0       	rjmp	.+70     	; 0x2590 <main+0x5e>
    254a:	8b 81       	ldd	r24, Y+3	; 0x03
    254c:	88 2f       	mov	r24, r24
    254e:	90 e0       	ldi	r25, 0x00	; 0
    2550:	fc 01       	movw	r30, r24
    2552:	e0 55       	subi	r30, 0x50	; 80
    2554:	fe 4f       	sbci	r31, 0xFE	; 254
    2556:	10 82       	st	Z, r1
    2558:	8b 81       	ldd	r24, Y+3	; 0x03
    255a:	88 2f       	mov	r24, r24
    255c:	90 e0       	ldi	r25, 0x00	; 0
    255e:	88 0f       	add	r24, r24
    2560:	99 1f       	adc	r25, r25
    2562:	88 0f       	add	r24, r24
    2564:	99 1f       	adc	r25, r25
    2566:	fc 01       	movw	r30, r24
    2568:	e9 57       	subi	r30, 0x79	; 121
    256a:	fe 4f       	sbci	r31, 0xFE	; 254
    256c:	80 e0       	ldi	r24, 0x00	; 0
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	a0 e0       	ldi	r26, 0x00	; 0
    2572:	b0 e0       	ldi	r27, 0x00	; 0
    2574:	80 83       	st	Z, r24
    2576:	91 83       	std	Z+1, r25	; 0x01
    2578:	a2 83       	std	Z+2, r26	; 0x02
    257a:	b3 83       	std	Z+3, r27	; 0x03
    257c:	8b 81       	ldd	r24, Y+3	; 0x03
    257e:	88 2f       	mov	r24, r24
    2580:	90 e0       	ldi	r25, 0x00	; 0
    2582:	fc 01       	movw	r30, r24
    2584:	ed 52       	subi	r30, 0x2D	; 45
    2586:	fe 4f       	sbci	r31, 0xFE	; 254
    2588:	10 82       	st	Z, r1
    258a:	8b 81       	ldd	r24, Y+3	; 0x03
    258c:	8f 5f       	subi	r24, 0xFF	; 255
    258e:	8b 83       	std	Y+3, r24	; 0x03
    2590:	8b 81       	ldd	r24, Y+3	; 0x03
    2592:	8a 30       	cpi	r24, 0x0A	; 10
    2594:	d0 f2       	brcs	.-76     	; 0x254a <main+0x18>
    2596:	8d ec       	ldi	r24, 0xCD	; 205
    2598:	9c ec       	ldi	r25, 0xCC	; 204
    259a:	ac ec       	ldi	r26, 0xCC	; 204
    259c:	bd e3       	ldi	r27, 0x3D	; 61
    259e:	80 93 cf 01 	sts	0x01CF, r24
    25a2:	90 93 d0 01 	sts	0x01D0, r25
    25a6:	a0 93 d1 01 	sts	0x01D1, r26
    25aa:	b0 93 d2 01 	sts	0x01D2, r27
    25ae:	10 92 86 01 	sts	0x0186, r1
    25b2:	10 92 dd 01 	sts	0x01DD, r1
    25b6:	10 92 ba 01 	sts	0x01BA, r1
    25ba:	10 92 af 01 	sts	0x01AF, r1

	GetExpression();
    25be:	0e 94 2f 13 	call	0x265e	; 0x265e <GetExpression>

	CLCD_voidGoToRowColumn(1,0);
    25c2:	81 e0       	ldi	r24, 0x01	; 1
    25c4:	60 e0       	ldi	r22, 0x00	; 0
    25c6:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <CLCD_voidGoToRowColumn>
	PRINT();
    25ca:	1a 82       	std	Y+2, r1	; 0x02
    25cc:	0c c0       	rjmp	.+24     	; 0x25e6 <main+0xb4>
    25ce:	8a 81       	ldd	r24, Y+2	; 0x02
    25d0:	88 2f       	mov	r24, r24
    25d2:	90 e0       	ldi	r25, 0x00	; 0
    25d4:	fc 01       	movw	r30, r24
    25d6:	e5 54       	subi	r30, 0x45	; 69
    25d8:	fe 4f       	sbci	r31, 0xFE	; 254
    25da:	80 81       	ld	r24, Z
    25dc:	0e 94 af 0a 	call	0x155e	; 0x155e <CLCD_voidSendData>
    25e0:	8a 81       	ldd	r24, Y+2	; 0x02
    25e2:	8f 5f       	subi	r24, 0xFF	; 255
    25e4:	8a 83       	std	Y+2, r24	; 0x02
    25e6:	90 91 dd 01 	lds	r25, 0x01DD
    25ea:	8a 81       	ldd	r24, Y+2	; 0x02
    25ec:	89 17       	cp	r24, r25
    25ee:	78 f3       	brcs	.-34     	; 0x25ce <main+0x9c>

	CleanExpressionAndCheckErrors();
    25f0:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <CleanExpressionAndCheckErrors>

	CLCD_voidGoToRowColumn(2,0);
    25f4:	82 e0       	ldi	r24, 0x02	; 2
    25f6:	60 e0       	ldi	r22, 0x00	; 0
    25f8:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <CLCD_voidGoToRowColumn>
	PRINT();
    25fc:	19 82       	std	Y+1, r1	; 0x01
    25fe:	0c c0       	rjmp	.+24     	; 0x2618 <main+0xe6>
    2600:	89 81       	ldd	r24, Y+1	; 0x01
    2602:	88 2f       	mov	r24, r24
    2604:	90 e0       	ldi	r25, 0x00	; 0
    2606:	fc 01       	movw	r30, r24
    2608:	e5 54       	subi	r30, 0x45	; 69
    260a:	fe 4f       	sbci	r31, 0xFE	; 254
    260c:	80 81       	ld	r24, Z
    260e:	0e 94 af 0a 	call	0x155e	; 0x155e <CLCD_voidSendData>
    2612:	89 81       	ldd	r24, Y+1	; 0x01
    2614:	8f 5f       	subi	r24, 0xFF	; 255
    2616:	89 83       	std	Y+1, r24	; 0x01
    2618:	90 91 dd 01 	lds	r25, 0x01DD
    261c:	89 81       	ldd	r24, Y+1	; 0x01
    261e:	89 17       	cp	r24, r25
    2620:	78 f3       	brcs	.-34     	; 0x2600 <main+0xce>

	TranslateExpression();
    2622:	0e 94 4f 1a 	call	0x349e	; 0x349e <TranslateExpression>

	PerformMultiplicationAnDivision();
    2626:	0e 94 c0 1b 	call	0x3780	; 0x3780 <PerformMultiplicationAnDivision>

	PerformAdditionAndSubtraction();
    262a:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <PerformAdditionAndSubtraction>


	CLCD_voidGoToRowColumn(3,13);
    262e:	83 e0       	ldi	r24, 0x03	; 3
    2630:	6d e0       	ldi	r22, 0x0D	; 13
    2632:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <CLCD_voidGoToRowColumn>

if(NegativeFlag)
    2636:	80 91 af 01 	lds	r24, 0x01AF
    263a:	88 23       	and	r24, r24
    263c:	19 f0       	breq	.+6      	; 0x2644 <main+0x112>
	CLCD_voidSendData('-');
    263e:	8d e2       	ldi	r24, 0x2D	; 45
    2640:	0e 94 af 0a 	call	0x155e	; 0x155e <CLCD_voidSendData>

CLCD_voidSendDecimalNumber(NumbersArray[0]);
    2644:	80 91 87 01 	lds	r24, 0x0187
    2648:	90 91 88 01 	lds	r25, 0x0188
    264c:	a0 91 89 01 	lds	r26, 0x0189
    2650:	b0 91 8a 01 	lds	r27, 0x018A
    2654:	bc 01       	movw	r22, r24
    2656:	cd 01       	movw	r24, r26
    2658:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <CLCD_voidSendDecimalNumber>
    265c:	ff cf       	rjmp	.-2      	; 0x265c <main+0x12a>

0000265e <GetExpression>:
//do not forget to clear operand and numbers
while(1){}
}

void GetExpression()
{
    265e:	df 93       	push	r29
    2660:	cf 93       	push	r28
    2662:	cd b7       	in	r28, 0x3d	; 61
    2664:	de b7       	in	r29, 0x3e	; 62
    2666:	1b c0       	rjmp	.+54     	; 0x269e <GetExpression+0x40>
	while (Button != '=')
	{
		Button = KPD_u8GetPressedKey();
    2668:	0e 94 ca 11 	call	0x2394	; 0x2394 <KPD_u8GetPressedKey>
    266c:	80 93 84 01 	sts	0x0184, r24
		if (Button != '\0')
    2670:	80 91 84 01 	lds	r24, 0x0184
    2674:	88 23       	and	r24, r24
    2676:	99 f0       	breq	.+38     	; 0x269e <GetExpression+0x40>
		{
			CLCD_voidSendData(Button);
    2678:	80 91 84 01 	lds	r24, 0x0184
    267c:	0e 94 af 0a 	call	0x155e	; 0x155e <CLCD_voidSendData>
			ExpressionArray[ExpressionCounter] = Button;
    2680:	80 91 dd 01 	lds	r24, 0x01DD
    2684:	88 2f       	mov	r24, r24
    2686:	90 e0       	ldi	r25, 0x00	; 0
    2688:	20 91 84 01 	lds	r18, 0x0184
    268c:	fc 01       	movw	r30, r24
    268e:	e5 54       	subi	r30, 0x45	; 69
    2690:	fe 4f       	sbci	r31, 0xFE	; 254
    2692:	20 83       	st	Z, r18
			ExpressionCounter++;
    2694:	80 91 dd 01 	lds	r24, 0x01DD
    2698:	8f 5f       	subi	r24, 0xFF	; 255
    269a:	80 93 dd 01 	sts	0x01DD, r24
while(1){}
}

void GetExpression()
{
	while (Button != '=')
    269e:	80 91 84 01 	lds	r24, 0x0184
    26a2:	8d 33       	cpi	r24, 0x3D	; 61
    26a4:	09 f7       	brne	.-62     	; 0x2668 <GetExpression+0xa>
			ExpressionArray[ExpressionCounter] = Button;
			ExpressionCounter++;
		}
	}

	ExpressionCounter--;  // to exclude '=' character
    26a6:	80 91 dd 01 	lds	r24, 0x01DD
    26aa:	81 50       	subi	r24, 0x01	; 1
    26ac:	80 93 dd 01 	sts	0x01DD, r24
}
    26b0:	cf 91       	pop	r28
    26b2:	df 91       	pop	r29
    26b4:	08 95       	ret

000026b6 <CleanExpressionAndCheckErrors>:

void CleanExpressionAndCheckErrors()
{
    26b6:	df 93       	push	r29
    26b8:	cf 93       	push	r28
    26ba:	cd b7       	in	r28, 0x3d	; 61
    26bc:	de b7       	in	r29, 0x3e	; 62
    26be:	6b 97       	sbiw	r28, 0x1b	; 27
    26c0:	0f b6       	in	r0, 0x3f	; 63
    26c2:	f8 94       	cli
    26c4:	de bf       	out	0x3e, r29	; 62
    26c6:	0f be       	out	0x3f, r0	; 63
    26c8:	cd bf       	out	0x3d, r28	; 61
	if ( ExpressionArray[0] == '*' ||  ExpressionArray[0]== '/')
    26ca:	80 91 bb 01 	lds	r24, 0x01BB
    26ce:	8a 32       	cpi	r24, 0x2A	; 42
    26d0:	29 f0       	breq	.+10     	; 0x26dc <CleanExpressionAndCheckErrors+0x26>
    26d2:	80 91 bb 01 	lds	r24, 0x01BB
    26d6:	8f 32       	cpi	r24, 0x2F	; 47
    26d8:	09 f0       	breq	.+2      	; 0x26dc <CleanExpressionAndCheckErrors+0x26>
    26da:	45 c0       	rjmp	.+138    	; 0x2766 <CleanExpressionAndCheckErrors+0xb0>
		MATHERROR();
    26dc:	82 e0       	ldi	r24, 0x02	; 2
    26de:	64 e0       	ldi	r22, 0x04	; 4
    26e0:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <CLCD_voidGoToRowColumn>
    26e4:	80 e6       	ldi	r24, 0x60	; 96
    26e6:	90 e0       	ldi	r25, 0x00	; 0
    26e8:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <CLCD_voidSendString>
    26ec:	1b 8e       	std	Y+27, r1	; 0x1b
    26ee:	23 c0       	rjmp	.+70     	; 0x2736 <CleanExpressionAndCheckErrors+0x80>
    26f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26f2:	88 2f       	mov	r24, r24
    26f4:	90 e0       	ldi	r25, 0x00	; 0
    26f6:	fc 01       	movw	r30, r24
    26f8:	e0 55       	subi	r30, 0x50	; 80
    26fa:	fe 4f       	sbci	r31, 0xFE	; 254
    26fc:	10 82       	st	Z, r1
    26fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2700:	88 2f       	mov	r24, r24
    2702:	90 e0       	ldi	r25, 0x00	; 0
    2704:	88 0f       	add	r24, r24
    2706:	99 1f       	adc	r25, r25
    2708:	88 0f       	add	r24, r24
    270a:	99 1f       	adc	r25, r25
    270c:	fc 01       	movw	r30, r24
    270e:	e9 57       	subi	r30, 0x79	; 121
    2710:	fe 4f       	sbci	r31, 0xFE	; 254
    2712:	80 e0       	ldi	r24, 0x00	; 0
    2714:	90 e0       	ldi	r25, 0x00	; 0
    2716:	a0 e0       	ldi	r26, 0x00	; 0
    2718:	b0 e0       	ldi	r27, 0x00	; 0
    271a:	80 83       	st	Z, r24
    271c:	91 83       	std	Z+1, r25	; 0x01
    271e:	a2 83       	std	Z+2, r26	; 0x02
    2720:	b3 83       	std	Z+3, r27	; 0x03
    2722:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2724:	88 2f       	mov	r24, r24
    2726:	90 e0       	ldi	r25, 0x00	; 0
    2728:	fc 01       	movw	r30, r24
    272a:	ed 52       	subi	r30, 0x2D	; 45
    272c:	fe 4f       	sbci	r31, 0xFE	; 254
    272e:	10 82       	st	Z, r1
    2730:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2732:	8f 5f       	subi	r24, 0xFF	; 255
    2734:	8b 8f       	std	Y+27, r24	; 0x1b
    2736:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2738:	8a 30       	cpi	r24, 0x0A	; 10
    273a:	d0 f2       	brcs	.-76     	; 0x26f0 <CleanExpressionAndCheckErrors+0x3a>
    273c:	8d ec       	ldi	r24, 0xCD	; 205
    273e:	9c ec       	ldi	r25, 0xCC	; 204
    2740:	ac ec       	ldi	r26, 0xCC	; 204
    2742:	bd e3       	ldi	r27, 0x3D	; 61
    2744:	80 93 cf 01 	sts	0x01CF, r24
    2748:	90 93 d0 01 	sts	0x01D0, r25
    274c:	a0 93 d1 01 	sts	0x01D1, r26
    2750:	b0 93 d2 01 	sts	0x01D2, r27
    2754:	10 92 86 01 	sts	0x0186, r1
    2758:	10 92 dd 01 	sts	0x01DD, r1
    275c:	10 92 ba 01 	sts	0x01BA, r1
    2760:	10 92 af 01 	sts	0x01AF, r1
    2764:	48 c0       	rjmp	.+144    	; 0x27f6 <CleanExpressionAndCheckErrors+0x140>
	else if (ExpressionArray[0] == '+')
    2766:	80 91 bb 01 	lds	r24, 0x01BB
    276a:	8b 32       	cpi	r24, 0x2B	; 43
    276c:	f9 f4       	brne	.+62     	; 0x27ac <CleanExpressionAndCheckErrors+0xf6>
		REARRANGE_EXPRESSION(' ',-1);
    276e:	1a 8e       	std	Y+26, r1	; 0x1a
    2770:	12 c0       	rjmp	.+36     	; 0x2796 <CleanExpressionAndCheckErrors+0xe0>
    2772:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2774:	28 2f       	mov	r18, r24
    2776:	30 e0       	ldi	r19, 0x00	; 0
    2778:	8a 8d       	ldd	r24, Y+26	; 0x1a
    277a:	88 2f       	mov	r24, r24
    277c:	90 e0       	ldi	r25, 0x00	; 0
    277e:	01 96       	adiw	r24, 0x01	; 1
    2780:	fc 01       	movw	r30, r24
    2782:	e5 54       	subi	r30, 0x45	; 69
    2784:	fe 4f       	sbci	r31, 0xFE	; 254
    2786:	80 81       	ld	r24, Z
    2788:	f9 01       	movw	r30, r18
    278a:	e5 54       	subi	r30, 0x45	; 69
    278c:	fe 4f       	sbci	r31, 0xFE	; 254
    278e:	80 83       	st	Z, r24
    2790:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2792:	8f 5f       	subi	r24, 0xFF	; 255
    2794:	8a 8f       	std	Y+26, r24	; 0x1a
    2796:	90 91 dd 01 	lds	r25, 0x01DD
    279a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    279c:	89 17       	cp	r24, r25
    279e:	48 f3       	brcs	.-46     	; 0x2772 <CleanExpressionAndCheckErrors+0xbc>
    27a0:	80 91 dd 01 	lds	r24, 0x01DD
    27a4:	81 50       	subi	r24, 0x01	; 1
    27a6:	80 93 dd 01 	sts	0x01DD, r24
    27aa:	25 c0       	rjmp	.+74     	; 0x27f6 <CleanExpressionAndCheckErrors+0x140>
	else if (ExpressionArray[0] == '-')
    27ac:	80 91 bb 01 	lds	r24, 0x01BB
    27b0:	8d 32       	cpi	r24, 0x2D	; 45
    27b2:	09 f5       	brne	.+66     	; 0x27f6 <CleanExpressionAndCheckErrors+0x140>
	{
		REARRANGE_EXPRESSION(' ',-1);
    27b4:	19 8e       	std	Y+25, r1	; 0x19
    27b6:	12 c0       	rjmp	.+36     	; 0x27dc <CleanExpressionAndCheckErrors+0x126>
    27b8:	89 8d       	ldd	r24, Y+25	; 0x19
    27ba:	28 2f       	mov	r18, r24
    27bc:	30 e0       	ldi	r19, 0x00	; 0
    27be:	89 8d       	ldd	r24, Y+25	; 0x19
    27c0:	88 2f       	mov	r24, r24
    27c2:	90 e0       	ldi	r25, 0x00	; 0
    27c4:	01 96       	adiw	r24, 0x01	; 1
    27c6:	fc 01       	movw	r30, r24
    27c8:	e5 54       	subi	r30, 0x45	; 69
    27ca:	fe 4f       	sbci	r31, 0xFE	; 254
    27cc:	80 81       	ld	r24, Z
    27ce:	f9 01       	movw	r30, r18
    27d0:	e5 54       	subi	r30, 0x45	; 69
    27d2:	fe 4f       	sbci	r31, 0xFE	; 254
    27d4:	80 83       	st	Z, r24
    27d6:	89 8d       	ldd	r24, Y+25	; 0x19
    27d8:	8f 5f       	subi	r24, 0xFF	; 255
    27da:	89 8f       	std	Y+25, r24	; 0x19
    27dc:	90 91 dd 01 	lds	r25, 0x01DD
    27e0:	89 8d       	ldd	r24, Y+25	; 0x19
    27e2:	89 17       	cp	r24, r25
    27e4:	48 f3       	brcs	.-46     	; 0x27b8 <CleanExpressionAndCheckErrors+0x102>
    27e6:	80 91 dd 01 	lds	r24, 0x01DD
    27ea:	81 50       	subi	r24, 0x01	; 1
    27ec:	80 93 dd 01 	sts	0x01DD, r24
		NegativeFlag = 1;
    27f0:	81 e0       	ldi	r24, 0x01	; 1
    27f2:	80 93 af 01 	sts	0x01AF, r24
	}

	for (u8 i = 0; i<=ExpressionCounter; i++)
    27f6:	18 8e       	std	Y+24, r1	; 0x18
    27f8:	2d c5       	rjmp	.+2650   	; 0x3254 <CleanExpressionAndCheckErrors+0xb9e>
	{
		if (ExpressionArray[i] == '+' && ExpressionArray[i+1] == '*')
    27fa:	88 8d       	ldd	r24, Y+24	; 0x18
    27fc:	88 2f       	mov	r24, r24
    27fe:	90 e0       	ldi	r25, 0x00	; 0
    2800:	fc 01       	movw	r30, r24
    2802:	e5 54       	subi	r30, 0x45	; 69
    2804:	fe 4f       	sbci	r31, 0xFE	; 254
    2806:	80 81       	ld	r24, Z
    2808:	8b 32       	cpi	r24, 0x2B	; 43
    280a:	09 f0       	breq	.+2      	; 0x280e <CleanExpressionAndCheckErrors+0x158>
    280c:	50 c0       	rjmp	.+160    	; 0x28ae <CleanExpressionAndCheckErrors+0x1f8>
    280e:	88 8d       	ldd	r24, Y+24	; 0x18
    2810:	88 2f       	mov	r24, r24
    2812:	90 e0       	ldi	r25, 0x00	; 0
    2814:	01 96       	adiw	r24, 0x01	; 1
    2816:	fc 01       	movw	r30, r24
    2818:	e5 54       	subi	r30, 0x45	; 69
    281a:	fe 4f       	sbci	r31, 0xFE	; 254
    281c:	80 81       	ld	r24, Z
    281e:	8a 32       	cpi	r24, 0x2A	; 42
    2820:	09 f0       	breq	.+2      	; 0x2824 <CleanExpressionAndCheckErrors+0x16e>
    2822:	45 c0       	rjmp	.+138    	; 0x28ae <CleanExpressionAndCheckErrors+0x1f8>
			MATHERROR();
    2824:	82 e0       	ldi	r24, 0x02	; 2
    2826:	64 e0       	ldi	r22, 0x04	; 4
    2828:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <CLCD_voidGoToRowColumn>
    282c:	80 e6       	ldi	r24, 0x60	; 96
    282e:	90 e0       	ldi	r25, 0x00	; 0
    2830:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <CLCD_voidSendString>
    2834:	1f 8a       	std	Y+23, r1	; 0x17
    2836:	23 c0       	rjmp	.+70     	; 0x287e <CleanExpressionAndCheckErrors+0x1c8>
    2838:	8f 89       	ldd	r24, Y+23	; 0x17
    283a:	88 2f       	mov	r24, r24
    283c:	90 e0       	ldi	r25, 0x00	; 0
    283e:	fc 01       	movw	r30, r24
    2840:	e0 55       	subi	r30, 0x50	; 80
    2842:	fe 4f       	sbci	r31, 0xFE	; 254
    2844:	10 82       	st	Z, r1
    2846:	8f 89       	ldd	r24, Y+23	; 0x17
    2848:	88 2f       	mov	r24, r24
    284a:	90 e0       	ldi	r25, 0x00	; 0
    284c:	88 0f       	add	r24, r24
    284e:	99 1f       	adc	r25, r25
    2850:	88 0f       	add	r24, r24
    2852:	99 1f       	adc	r25, r25
    2854:	fc 01       	movw	r30, r24
    2856:	e9 57       	subi	r30, 0x79	; 121
    2858:	fe 4f       	sbci	r31, 0xFE	; 254
    285a:	80 e0       	ldi	r24, 0x00	; 0
    285c:	90 e0       	ldi	r25, 0x00	; 0
    285e:	a0 e0       	ldi	r26, 0x00	; 0
    2860:	b0 e0       	ldi	r27, 0x00	; 0
    2862:	80 83       	st	Z, r24
    2864:	91 83       	std	Z+1, r25	; 0x01
    2866:	a2 83       	std	Z+2, r26	; 0x02
    2868:	b3 83       	std	Z+3, r27	; 0x03
    286a:	8f 89       	ldd	r24, Y+23	; 0x17
    286c:	88 2f       	mov	r24, r24
    286e:	90 e0       	ldi	r25, 0x00	; 0
    2870:	fc 01       	movw	r30, r24
    2872:	ed 52       	subi	r30, 0x2D	; 45
    2874:	fe 4f       	sbci	r31, 0xFE	; 254
    2876:	10 82       	st	Z, r1
    2878:	8f 89       	ldd	r24, Y+23	; 0x17
    287a:	8f 5f       	subi	r24, 0xFF	; 255
    287c:	8f 8b       	std	Y+23, r24	; 0x17
    287e:	8f 89       	ldd	r24, Y+23	; 0x17
    2880:	8a 30       	cpi	r24, 0x0A	; 10
    2882:	d0 f2       	brcs	.-76     	; 0x2838 <CleanExpressionAndCheckErrors+0x182>
    2884:	8d ec       	ldi	r24, 0xCD	; 205
    2886:	9c ec       	ldi	r25, 0xCC	; 204
    2888:	ac ec       	ldi	r26, 0xCC	; 204
    288a:	bd e3       	ldi	r27, 0x3D	; 61
    288c:	80 93 cf 01 	sts	0x01CF, r24
    2890:	90 93 d0 01 	sts	0x01D0, r25
    2894:	a0 93 d1 01 	sts	0x01D1, r26
    2898:	b0 93 d2 01 	sts	0x01D2, r27
    289c:	10 92 86 01 	sts	0x0186, r1
    28a0:	10 92 dd 01 	sts	0x01DD, r1
    28a4:	10 92 ba 01 	sts	0x01BA, r1
    28a8:	10 92 af 01 	sts	0x01AF, r1
    28ac:	d0 c4       	rjmp	.+2464   	; 0x324e <CleanExpressionAndCheckErrors+0xb98>

		else if (ExpressionArray[i] == '+' && ExpressionArray[i+1] == '/')
    28ae:	88 8d       	ldd	r24, Y+24	; 0x18
    28b0:	88 2f       	mov	r24, r24
    28b2:	90 e0       	ldi	r25, 0x00	; 0
    28b4:	fc 01       	movw	r30, r24
    28b6:	e5 54       	subi	r30, 0x45	; 69
    28b8:	fe 4f       	sbci	r31, 0xFE	; 254
    28ba:	80 81       	ld	r24, Z
    28bc:	8b 32       	cpi	r24, 0x2B	; 43
    28be:	09 f0       	breq	.+2      	; 0x28c2 <CleanExpressionAndCheckErrors+0x20c>
    28c0:	50 c0       	rjmp	.+160    	; 0x2962 <CleanExpressionAndCheckErrors+0x2ac>
    28c2:	88 8d       	ldd	r24, Y+24	; 0x18
    28c4:	88 2f       	mov	r24, r24
    28c6:	90 e0       	ldi	r25, 0x00	; 0
    28c8:	01 96       	adiw	r24, 0x01	; 1
    28ca:	fc 01       	movw	r30, r24
    28cc:	e5 54       	subi	r30, 0x45	; 69
    28ce:	fe 4f       	sbci	r31, 0xFE	; 254
    28d0:	80 81       	ld	r24, Z
    28d2:	8f 32       	cpi	r24, 0x2F	; 47
    28d4:	09 f0       	breq	.+2      	; 0x28d8 <CleanExpressionAndCheckErrors+0x222>
    28d6:	45 c0       	rjmp	.+138    	; 0x2962 <CleanExpressionAndCheckErrors+0x2ac>
			MATHERROR();
    28d8:	82 e0       	ldi	r24, 0x02	; 2
    28da:	64 e0       	ldi	r22, 0x04	; 4
    28dc:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <CLCD_voidGoToRowColumn>
    28e0:	80 e6       	ldi	r24, 0x60	; 96
    28e2:	90 e0       	ldi	r25, 0x00	; 0
    28e4:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <CLCD_voidSendString>
    28e8:	1e 8a       	std	Y+22, r1	; 0x16
    28ea:	23 c0       	rjmp	.+70     	; 0x2932 <CleanExpressionAndCheckErrors+0x27c>
    28ec:	8e 89       	ldd	r24, Y+22	; 0x16
    28ee:	88 2f       	mov	r24, r24
    28f0:	90 e0       	ldi	r25, 0x00	; 0
    28f2:	fc 01       	movw	r30, r24
    28f4:	e0 55       	subi	r30, 0x50	; 80
    28f6:	fe 4f       	sbci	r31, 0xFE	; 254
    28f8:	10 82       	st	Z, r1
    28fa:	8e 89       	ldd	r24, Y+22	; 0x16
    28fc:	88 2f       	mov	r24, r24
    28fe:	90 e0       	ldi	r25, 0x00	; 0
    2900:	88 0f       	add	r24, r24
    2902:	99 1f       	adc	r25, r25
    2904:	88 0f       	add	r24, r24
    2906:	99 1f       	adc	r25, r25
    2908:	fc 01       	movw	r30, r24
    290a:	e9 57       	subi	r30, 0x79	; 121
    290c:	fe 4f       	sbci	r31, 0xFE	; 254
    290e:	80 e0       	ldi	r24, 0x00	; 0
    2910:	90 e0       	ldi	r25, 0x00	; 0
    2912:	a0 e0       	ldi	r26, 0x00	; 0
    2914:	b0 e0       	ldi	r27, 0x00	; 0
    2916:	80 83       	st	Z, r24
    2918:	91 83       	std	Z+1, r25	; 0x01
    291a:	a2 83       	std	Z+2, r26	; 0x02
    291c:	b3 83       	std	Z+3, r27	; 0x03
    291e:	8e 89       	ldd	r24, Y+22	; 0x16
    2920:	88 2f       	mov	r24, r24
    2922:	90 e0       	ldi	r25, 0x00	; 0
    2924:	fc 01       	movw	r30, r24
    2926:	ed 52       	subi	r30, 0x2D	; 45
    2928:	fe 4f       	sbci	r31, 0xFE	; 254
    292a:	10 82       	st	Z, r1
    292c:	8e 89       	ldd	r24, Y+22	; 0x16
    292e:	8f 5f       	subi	r24, 0xFF	; 255
    2930:	8e 8b       	std	Y+22, r24	; 0x16
    2932:	8e 89       	ldd	r24, Y+22	; 0x16
    2934:	8a 30       	cpi	r24, 0x0A	; 10
    2936:	d0 f2       	brcs	.-76     	; 0x28ec <CleanExpressionAndCheckErrors+0x236>
    2938:	8d ec       	ldi	r24, 0xCD	; 205
    293a:	9c ec       	ldi	r25, 0xCC	; 204
    293c:	ac ec       	ldi	r26, 0xCC	; 204
    293e:	bd e3       	ldi	r27, 0x3D	; 61
    2940:	80 93 cf 01 	sts	0x01CF, r24
    2944:	90 93 d0 01 	sts	0x01D0, r25
    2948:	a0 93 d1 01 	sts	0x01D1, r26
    294c:	b0 93 d2 01 	sts	0x01D2, r27
    2950:	10 92 86 01 	sts	0x0186, r1
    2954:	10 92 dd 01 	sts	0x01DD, r1
    2958:	10 92 ba 01 	sts	0x01BA, r1
    295c:	10 92 af 01 	sts	0x01AF, r1
    2960:	76 c4       	rjmp	.+2284   	; 0x324e <CleanExpressionAndCheckErrors+0xb98>

		else if (ExpressionArray[i] == '-' && ExpressionArray[i+1] == '*')
    2962:	88 8d       	ldd	r24, Y+24	; 0x18
    2964:	88 2f       	mov	r24, r24
    2966:	90 e0       	ldi	r25, 0x00	; 0
    2968:	fc 01       	movw	r30, r24
    296a:	e5 54       	subi	r30, 0x45	; 69
    296c:	fe 4f       	sbci	r31, 0xFE	; 254
    296e:	80 81       	ld	r24, Z
    2970:	8d 32       	cpi	r24, 0x2D	; 45
    2972:	09 f0       	breq	.+2      	; 0x2976 <CleanExpressionAndCheckErrors+0x2c0>
    2974:	50 c0       	rjmp	.+160    	; 0x2a16 <CleanExpressionAndCheckErrors+0x360>
    2976:	88 8d       	ldd	r24, Y+24	; 0x18
    2978:	88 2f       	mov	r24, r24
    297a:	90 e0       	ldi	r25, 0x00	; 0
    297c:	01 96       	adiw	r24, 0x01	; 1
    297e:	fc 01       	movw	r30, r24
    2980:	e5 54       	subi	r30, 0x45	; 69
    2982:	fe 4f       	sbci	r31, 0xFE	; 254
    2984:	80 81       	ld	r24, Z
    2986:	8a 32       	cpi	r24, 0x2A	; 42
    2988:	09 f0       	breq	.+2      	; 0x298c <CleanExpressionAndCheckErrors+0x2d6>
    298a:	45 c0       	rjmp	.+138    	; 0x2a16 <CleanExpressionAndCheckErrors+0x360>
			MATHERROR();
    298c:	82 e0       	ldi	r24, 0x02	; 2
    298e:	64 e0       	ldi	r22, 0x04	; 4
    2990:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <CLCD_voidGoToRowColumn>
    2994:	80 e6       	ldi	r24, 0x60	; 96
    2996:	90 e0       	ldi	r25, 0x00	; 0
    2998:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <CLCD_voidSendString>
    299c:	1d 8a       	std	Y+21, r1	; 0x15
    299e:	23 c0       	rjmp	.+70     	; 0x29e6 <CleanExpressionAndCheckErrors+0x330>
    29a0:	8d 89       	ldd	r24, Y+21	; 0x15
    29a2:	88 2f       	mov	r24, r24
    29a4:	90 e0       	ldi	r25, 0x00	; 0
    29a6:	fc 01       	movw	r30, r24
    29a8:	e0 55       	subi	r30, 0x50	; 80
    29aa:	fe 4f       	sbci	r31, 0xFE	; 254
    29ac:	10 82       	st	Z, r1
    29ae:	8d 89       	ldd	r24, Y+21	; 0x15
    29b0:	88 2f       	mov	r24, r24
    29b2:	90 e0       	ldi	r25, 0x00	; 0
    29b4:	88 0f       	add	r24, r24
    29b6:	99 1f       	adc	r25, r25
    29b8:	88 0f       	add	r24, r24
    29ba:	99 1f       	adc	r25, r25
    29bc:	fc 01       	movw	r30, r24
    29be:	e9 57       	subi	r30, 0x79	; 121
    29c0:	fe 4f       	sbci	r31, 0xFE	; 254
    29c2:	80 e0       	ldi	r24, 0x00	; 0
    29c4:	90 e0       	ldi	r25, 0x00	; 0
    29c6:	a0 e0       	ldi	r26, 0x00	; 0
    29c8:	b0 e0       	ldi	r27, 0x00	; 0
    29ca:	80 83       	st	Z, r24
    29cc:	91 83       	std	Z+1, r25	; 0x01
    29ce:	a2 83       	std	Z+2, r26	; 0x02
    29d0:	b3 83       	std	Z+3, r27	; 0x03
    29d2:	8d 89       	ldd	r24, Y+21	; 0x15
    29d4:	88 2f       	mov	r24, r24
    29d6:	90 e0       	ldi	r25, 0x00	; 0
    29d8:	fc 01       	movw	r30, r24
    29da:	ed 52       	subi	r30, 0x2D	; 45
    29dc:	fe 4f       	sbci	r31, 0xFE	; 254
    29de:	10 82       	st	Z, r1
    29e0:	8d 89       	ldd	r24, Y+21	; 0x15
    29e2:	8f 5f       	subi	r24, 0xFF	; 255
    29e4:	8d 8b       	std	Y+21, r24	; 0x15
    29e6:	8d 89       	ldd	r24, Y+21	; 0x15
    29e8:	8a 30       	cpi	r24, 0x0A	; 10
    29ea:	d0 f2       	brcs	.-76     	; 0x29a0 <CleanExpressionAndCheckErrors+0x2ea>
    29ec:	8d ec       	ldi	r24, 0xCD	; 205
    29ee:	9c ec       	ldi	r25, 0xCC	; 204
    29f0:	ac ec       	ldi	r26, 0xCC	; 204
    29f2:	bd e3       	ldi	r27, 0x3D	; 61
    29f4:	80 93 cf 01 	sts	0x01CF, r24
    29f8:	90 93 d0 01 	sts	0x01D0, r25
    29fc:	a0 93 d1 01 	sts	0x01D1, r26
    2a00:	b0 93 d2 01 	sts	0x01D2, r27
    2a04:	10 92 86 01 	sts	0x0186, r1
    2a08:	10 92 dd 01 	sts	0x01DD, r1
    2a0c:	10 92 ba 01 	sts	0x01BA, r1
    2a10:	10 92 af 01 	sts	0x01AF, r1
    2a14:	1c c4       	rjmp	.+2104   	; 0x324e <CleanExpressionAndCheckErrors+0xb98>

		else if (ExpressionArray[i] == '-' && ExpressionArray[i+1] == '/')
    2a16:	88 8d       	ldd	r24, Y+24	; 0x18
    2a18:	88 2f       	mov	r24, r24
    2a1a:	90 e0       	ldi	r25, 0x00	; 0
    2a1c:	fc 01       	movw	r30, r24
    2a1e:	e5 54       	subi	r30, 0x45	; 69
    2a20:	fe 4f       	sbci	r31, 0xFE	; 254
    2a22:	80 81       	ld	r24, Z
    2a24:	8d 32       	cpi	r24, 0x2D	; 45
    2a26:	09 f0       	breq	.+2      	; 0x2a2a <CleanExpressionAndCheckErrors+0x374>
    2a28:	50 c0       	rjmp	.+160    	; 0x2aca <CleanExpressionAndCheckErrors+0x414>
    2a2a:	88 8d       	ldd	r24, Y+24	; 0x18
    2a2c:	88 2f       	mov	r24, r24
    2a2e:	90 e0       	ldi	r25, 0x00	; 0
    2a30:	01 96       	adiw	r24, 0x01	; 1
    2a32:	fc 01       	movw	r30, r24
    2a34:	e5 54       	subi	r30, 0x45	; 69
    2a36:	fe 4f       	sbci	r31, 0xFE	; 254
    2a38:	80 81       	ld	r24, Z
    2a3a:	8f 32       	cpi	r24, 0x2F	; 47
    2a3c:	09 f0       	breq	.+2      	; 0x2a40 <CleanExpressionAndCheckErrors+0x38a>
    2a3e:	45 c0       	rjmp	.+138    	; 0x2aca <CleanExpressionAndCheckErrors+0x414>
			MATHERROR();
    2a40:	82 e0       	ldi	r24, 0x02	; 2
    2a42:	64 e0       	ldi	r22, 0x04	; 4
    2a44:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <CLCD_voidGoToRowColumn>
    2a48:	80 e6       	ldi	r24, 0x60	; 96
    2a4a:	90 e0       	ldi	r25, 0x00	; 0
    2a4c:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <CLCD_voidSendString>
    2a50:	1c 8a       	std	Y+20, r1	; 0x14
    2a52:	23 c0       	rjmp	.+70     	; 0x2a9a <CleanExpressionAndCheckErrors+0x3e4>
    2a54:	8c 89       	ldd	r24, Y+20	; 0x14
    2a56:	88 2f       	mov	r24, r24
    2a58:	90 e0       	ldi	r25, 0x00	; 0
    2a5a:	fc 01       	movw	r30, r24
    2a5c:	e0 55       	subi	r30, 0x50	; 80
    2a5e:	fe 4f       	sbci	r31, 0xFE	; 254
    2a60:	10 82       	st	Z, r1
    2a62:	8c 89       	ldd	r24, Y+20	; 0x14
    2a64:	88 2f       	mov	r24, r24
    2a66:	90 e0       	ldi	r25, 0x00	; 0
    2a68:	88 0f       	add	r24, r24
    2a6a:	99 1f       	adc	r25, r25
    2a6c:	88 0f       	add	r24, r24
    2a6e:	99 1f       	adc	r25, r25
    2a70:	fc 01       	movw	r30, r24
    2a72:	e9 57       	subi	r30, 0x79	; 121
    2a74:	fe 4f       	sbci	r31, 0xFE	; 254
    2a76:	80 e0       	ldi	r24, 0x00	; 0
    2a78:	90 e0       	ldi	r25, 0x00	; 0
    2a7a:	a0 e0       	ldi	r26, 0x00	; 0
    2a7c:	b0 e0       	ldi	r27, 0x00	; 0
    2a7e:	80 83       	st	Z, r24
    2a80:	91 83       	std	Z+1, r25	; 0x01
    2a82:	a2 83       	std	Z+2, r26	; 0x02
    2a84:	b3 83       	std	Z+3, r27	; 0x03
    2a86:	8c 89       	ldd	r24, Y+20	; 0x14
    2a88:	88 2f       	mov	r24, r24
    2a8a:	90 e0       	ldi	r25, 0x00	; 0
    2a8c:	fc 01       	movw	r30, r24
    2a8e:	ed 52       	subi	r30, 0x2D	; 45
    2a90:	fe 4f       	sbci	r31, 0xFE	; 254
    2a92:	10 82       	st	Z, r1
    2a94:	8c 89       	ldd	r24, Y+20	; 0x14
    2a96:	8f 5f       	subi	r24, 0xFF	; 255
    2a98:	8c 8b       	std	Y+20, r24	; 0x14
    2a9a:	8c 89       	ldd	r24, Y+20	; 0x14
    2a9c:	8a 30       	cpi	r24, 0x0A	; 10
    2a9e:	d0 f2       	brcs	.-76     	; 0x2a54 <CleanExpressionAndCheckErrors+0x39e>
    2aa0:	8d ec       	ldi	r24, 0xCD	; 205
    2aa2:	9c ec       	ldi	r25, 0xCC	; 204
    2aa4:	ac ec       	ldi	r26, 0xCC	; 204
    2aa6:	bd e3       	ldi	r27, 0x3D	; 61
    2aa8:	80 93 cf 01 	sts	0x01CF, r24
    2aac:	90 93 d0 01 	sts	0x01D0, r25
    2ab0:	a0 93 d1 01 	sts	0x01D1, r26
    2ab4:	b0 93 d2 01 	sts	0x01D2, r27
    2ab8:	10 92 86 01 	sts	0x0186, r1
    2abc:	10 92 dd 01 	sts	0x01DD, r1
    2ac0:	10 92 ba 01 	sts	0x01BA, r1
    2ac4:	10 92 af 01 	sts	0x01AF, r1
    2ac8:	c2 c3       	rjmp	.+1924   	; 0x324e <CleanExpressionAndCheckErrors+0xb98>

		else if (ExpressionArray[i] == '*' && ExpressionArray[i+1] == '*')
    2aca:	88 8d       	ldd	r24, Y+24	; 0x18
    2acc:	88 2f       	mov	r24, r24
    2ace:	90 e0       	ldi	r25, 0x00	; 0
    2ad0:	fc 01       	movw	r30, r24
    2ad2:	e5 54       	subi	r30, 0x45	; 69
    2ad4:	fe 4f       	sbci	r31, 0xFE	; 254
    2ad6:	80 81       	ld	r24, Z
    2ad8:	8a 32       	cpi	r24, 0x2A	; 42
    2ada:	09 f0       	breq	.+2      	; 0x2ade <CleanExpressionAndCheckErrors+0x428>
    2adc:	50 c0       	rjmp	.+160    	; 0x2b7e <CleanExpressionAndCheckErrors+0x4c8>
    2ade:	88 8d       	ldd	r24, Y+24	; 0x18
    2ae0:	88 2f       	mov	r24, r24
    2ae2:	90 e0       	ldi	r25, 0x00	; 0
    2ae4:	01 96       	adiw	r24, 0x01	; 1
    2ae6:	fc 01       	movw	r30, r24
    2ae8:	e5 54       	subi	r30, 0x45	; 69
    2aea:	fe 4f       	sbci	r31, 0xFE	; 254
    2aec:	80 81       	ld	r24, Z
    2aee:	8a 32       	cpi	r24, 0x2A	; 42
    2af0:	09 f0       	breq	.+2      	; 0x2af4 <CleanExpressionAndCheckErrors+0x43e>
    2af2:	45 c0       	rjmp	.+138    	; 0x2b7e <CleanExpressionAndCheckErrors+0x4c8>
			MATHERROR();
    2af4:	82 e0       	ldi	r24, 0x02	; 2
    2af6:	64 e0       	ldi	r22, 0x04	; 4
    2af8:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <CLCD_voidGoToRowColumn>
    2afc:	80 e6       	ldi	r24, 0x60	; 96
    2afe:	90 e0       	ldi	r25, 0x00	; 0
    2b00:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <CLCD_voidSendString>
    2b04:	1b 8a       	std	Y+19, r1	; 0x13
    2b06:	23 c0       	rjmp	.+70     	; 0x2b4e <CleanExpressionAndCheckErrors+0x498>
    2b08:	8b 89       	ldd	r24, Y+19	; 0x13
    2b0a:	88 2f       	mov	r24, r24
    2b0c:	90 e0       	ldi	r25, 0x00	; 0
    2b0e:	fc 01       	movw	r30, r24
    2b10:	e0 55       	subi	r30, 0x50	; 80
    2b12:	fe 4f       	sbci	r31, 0xFE	; 254
    2b14:	10 82       	st	Z, r1
    2b16:	8b 89       	ldd	r24, Y+19	; 0x13
    2b18:	88 2f       	mov	r24, r24
    2b1a:	90 e0       	ldi	r25, 0x00	; 0
    2b1c:	88 0f       	add	r24, r24
    2b1e:	99 1f       	adc	r25, r25
    2b20:	88 0f       	add	r24, r24
    2b22:	99 1f       	adc	r25, r25
    2b24:	fc 01       	movw	r30, r24
    2b26:	e9 57       	subi	r30, 0x79	; 121
    2b28:	fe 4f       	sbci	r31, 0xFE	; 254
    2b2a:	80 e0       	ldi	r24, 0x00	; 0
    2b2c:	90 e0       	ldi	r25, 0x00	; 0
    2b2e:	a0 e0       	ldi	r26, 0x00	; 0
    2b30:	b0 e0       	ldi	r27, 0x00	; 0
    2b32:	80 83       	st	Z, r24
    2b34:	91 83       	std	Z+1, r25	; 0x01
    2b36:	a2 83       	std	Z+2, r26	; 0x02
    2b38:	b3 83       	std	Z+3, r27	; 0x03
    2b3a:	8b 89       	ldd	r24, Y+19	; 0x13
    2b3c:	88 2f       	mov	r24, r24
    2b3e:	90 e0       	ldi	r25, 0x00	; 0
    2b40:	fc 01       	movw	r30, r24
    2b42:	ed 52       	subi	r30, 0x2D	; 45
    2b44:	fe 4f       	sbci	r31, 0xFE	; 254
    2b46:	10 82       	st	Z, r1
    2b48:	8b 89       	ldd	r24, Y+19	; 0x13
    2b4a:	8f 5f       	subi	r24, 0xFF	; 255
    2b4c:	8b 8b       	std	Y+19, r24	; 0x13
    2b4e:	8b 89       	ldd	r24, Y+19	; 0x13
    2b50:	8a 30       	cpi	r24, 0x0A	; 10
    2b52:	d0 f2       	brcs	.-76     	; 0x2b08 <CleanExpressionAndCheckErrors+0x452>
    2b54:	8d ec       	ldi	r24, 0xCD	; 205
    2b56:	9c ec       	ldi	r25, 0xCC	; 204
    2b58:	ac ec       	ldi	r26, 0xCC	; 204
    2b5a:	bd e3       	ldi	r27, 0x3D	; 61
    2b5c:	80 93 cf 01 	sts	0x01CF, r24
    2b60:	90 93 d0 01 	sts	0x01D0, r25
    2b64:	a0 93 d1 01 	sts	0x01D1, r26
    2b68:	b0 93 d2 01 	sts	0x01D2, r27
    2b6c:	10 92 86 01 	sts	0x0186, r1
    2b70:	10 92 dd 01 	sts	0x01DD, r1
    2b74:	10 92 ba 01 	sts	0x01BA, r1
    2b78:	10 92 af 01 	sts	0x01AF, r1
    2b7c:	68 c3       	rjmp	.+1744   	; 0x324e <CleanExpressionAndCheckErrors+0xb98>

		else if (ExpressionArray[i] == '/' && ExpressionArray[i+1] == '/')
    2b7e:	88 8d       	ldd	r24, Y+24	; 0x18
    2b80:	88 2f       	mov	r24, r24
    2b82:	90 e0       	ldi	r25, 0x00	; 0
    2b84:	fc 01       	movw	r30, r24
    2b86:	e5 54       	subi	r30, 0x45	; 69
    2b88:	fe 4f       	sbci	r31, 0xFE	; 254
    2b8a:	80 81       	ld	r24, Z
    2b8c:	8f 32       	cpi	r24, 0x2F	; 47
    2b8e:	09 f0       	breq	.+2      	; 0x2b92 <CleanExpressionAndCheckErrors+0x4dc>
    2b90:	50 c0       	rjmp	.+160    	; 0x2c32 <CleanExpressionAndCheckErrors+0x57c>
    2b92:	88 8d       	ldd	r24, Y+24	; 0x18
    2b94:	88 2f       	mov	r24, r24
    2b96:	90 e0       	ldi	r25, 0x00	; 0
    2b98:	01 96       	adiw	r24, 0x01	; 1
    2b9a:	fc 01       	movw	r30, r24
    2b9c:	e5 54       	subi	r30, 0x45	; 69
    2b9e:	fe 4f       	sbci	r31, 0xFE	; 254
    2ba0:	80 81       	ld	r24, Z
    2ba2:	8f 32       	cpi	r24, 0x2F	; 47
    2ba4:	09 f0       	breq	.+2      	; 0x2ba8 <CleanExpressionAndCheckErrors+0x4f2>
    2ba6:	45 c0       	rjmp	.+138    	; 0x2c32 <CleanExpressionAndCheckErrors+0x57c>
			MATHERROR();
    2ba8:	82 e0       	ldi	r24, 0x02	; 2
    2baa:	64 e0       	ldi	r22, 0x04	; 4
    2bac:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <CLCD_voidGoToRowColumn>
    2bb0:	80 e6       	ldi	r24, 0x60	; 96
    2bb2:	90 e0       	ldi	r25, 0x00	; 0
    2bb4:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <CLCD_voidSendString>
    2bb8:	1a 8a       	std	Y+18, r1	; 0x12
    2bba:	23 c0       	rjmp	.+70     	; 0x2c02 <CleanExpressionAndCheckErrors+0x54c>
    2bbc:	8a 89       	ldd	r24, Y+18	; 0x12
    2bbe:	88 2f       	mov	r24, r24
    2bc0:	90 e0       	ldi	r25, 0x00	; 0
    2bc2:	fc 01       	movw	r30, r24
    2bc4:	e0 55       	subi	r30, 0x50	; 80
    2bc6:	fe 4f       	sbci	r31, 0xFE	; 254
    2bc8:	10 82       	st	Z, r1
    2bca:	8a 89       	ldd	r24, Y+18	; 0x12
    2bcc:	88 2f       	mov	r24, r24
    2bce:	90 e0       	ldi	r25, 0x00	; 0
    2bd0:	88 0f       	add	r24, r24
    2bd2:	99 1f       	adc	r25, r25
    2bd4:	88 0f       	add	r24, r24
    2bd6:	99 1f       	adc	r25, r25
    2bd8:	fc 01       	movw	r30, r24
    2bda:	e9 57       	subi	r30, 0x79	; 121
    2bdc:	fe 4f       	sbci	r31, 0xFE	; 254
    2bde:	80 e0       	ldi	r24, 0x00	; 0
    2be0:	90 e0       	ldi	r25, 0x00	; 0
    2be2:	a0 e0       	ldi	r26, 0x00	; 0
    2be4:	b0 e0       	ldi	r27, 0x00	; 0
    2be6:	80 83       	st	Z, r24
    2be8:	91 83       	std	Z+1, r25	; 0x01
    2bea:	a2 83       	std	Z+2, r26	; 0x02
    2bec:	b3 83       	std	Z+3, r27	; 0x03
    2bee:	8a 89       	ldd	r24, Y+18	; 0x12
    2bf0:	88 2f       	mov	r24, r24
    2bf2:	90 e0       	ldi	r25, 0x00	; 0
    2bf4:	fc 01       	movw	r30, r24
    2bf6:	ed 52       	subi	r30, 0x2D	; 45
    2bf8:	fe 4f       	sbci	r31, 0xFE	; 254
    2bfa:	10 82       	st	Z, r1
    2bfc:	8a 89       	ldd	r24, Y+18	; 0x12
    2bfe:	8f 5f       	subi	r24, 0xFF	; 255
    2c00:	8a 8b       	std	Y+18, r24	; 0x12
    2c02:	8a 89       	ldd	r24, Y+18	; 0x12
    2c04:	8a 30       	cpi	r24, 0x0A	; 10
    2c06:	d0 f2       	brcs	.-76     	; 0x2bbc <CleanExpressionAndCheckErrors+0x506>
    2c08:	8d ec       	ldi	r24, 0xCD	; 205
    2c0a:	9c ec       	ldi	r25, 0xCC	; 204
    2c0c:	ac ec       	ldi	r26, 0xCC	; 204
    2c0e:	bd e3       	ldi	r27, 0x3D	; 61
    2c10:	80 93 cf 01 	sts	0x01CF, r24
    2c14:	90 93 d0 01 	sts	0x01D0, r25
    2c18:	a0 93 d1 01 	sts	0x01D1, r26
    2c1c:	b0 93 d2 01 	sts	0x01D2, r27
    2c20:	10 92 86 01 	sts	0x0186, r1
    2c24:	10 92 dd 01 	sts	0x01DD, r1
    2c28:	10 92 ba 01 	sts	0x01BA, r1
    2c2c:	10 92 af 01 	sts	0x01AF, r1
    2c30:	0e c3       	rjmp	.+1564   	; 0x324e <CleanExpressionAndCheckErrors+0xb98>

		else if (ExpressionArray[i] == '.' && ExpressionArray[i+1] == '.')
    2c32:	88 8d       	ldd	r24, Y+24	; 0x18
    2c34:	88 2f       	mov	r24, r24
    2c36:	90 e0       	ldi	r25, 0x00	; 0
    2c38:	fc 01       	movw	r30, r24
    2c3a:	e5 54       	subi	r30, 0x45	; 69
    2c3c:	fe 4f       	sbci	r31, 0xFE	; 254
    2c3e:	80 81       	ld	r24, Z
    2c40:	8e 32       	cpi	r24, 0x2E	; 46
    2c42:	09 f0       	breq	.+2      	; 0x2c46 <CleanExpressionAndCheckErrors+0x590>
    2c44:	50 c0       	rjmp	.+160    	; 0x2ce6 <CleanExpressionAndCheckErrors+0x630>
    2c46:	88 8d       	ldd	r24, Y+24	; 0x18
    2c48:	88 2f       	mov	r24, r24
    2c4a:	90 e0       	ldi	r25, 0x00	; 0
    2c4c:	01 96       	adiw	r24, 0x01	; 1
    2c4e:	fc 01       	movw	r30, r24
    2c50:	e5 54       	subi	r30, 0x45	; 69
    2c52:	fe 4f       	sbci	r31, 0xFE	; 254
    2c54:	80 81       	ld	r24, Z
    2c56:	8e 32       	cpi	r24, 0x2E	; 46
    2c58:	09 f0       	breq	.+2      	; 0x2c5c <CleanExpressionAndCheckErrors+0x5a6>
    2c5a:	45 c0       	rjmp	.+138    	; 0x2ce6 <CleanExpressionAndCheckErrors+0x630>
			MATHERROR();
    2c5c:	82 e0       	ldi	r24, 0x02	; 2
    2c5e:	64 e0       	ldi	r22, 0x04	; 4
    2c60:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <CLCD_voidGoToRowColumn>
    2c64:	80 e6       	ldi	r24, 0x60	; 96
    2c66:	90 e0       	ldi	r25, 0x00	; 0
    2c68:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <CLCD_voidSendString>
    2c6c:	19 8a       	std	Y+17, r1	; 0x11
    2c6e:	23 c0       	rjmp	.+70     	; 0x2cb6 <CleanExpressionAndCheckErrors+0x600>
    2c70:	89 89       	ldd	r24, Y+17	; 0x11
    2c72:	88 2f       	mov	r24, r24
    2c74:	90 e0       	ldi	r25, 0x00	; 0
    2c76:	fc 01       	movw	r30, r24
    2c78:	e0 55       	subi	r30, 0x50	; 80
    2c7a:	fe 4f       	sbci	r31, 0xFE	; 254
    2c7c:	10 82       	st	Z, r1
    2c7e:	89 89       	ldd	r24, Y+17	; 0x11
    2c80:	88 2f       	mov	r24, r24
    2c82:	90 e0       	ldi	r25, 0x00	; 0
    2c84:	88 0f       	add	r24, r24
    2c86:	99 1f       	adc	r25, r25
    2c88:	88 0f       	add	r24, r24
    2c8a:	99 1f       	adc	r25, r25
    2c8c:	fc 01       	movw	r30, r24
    2c8e:	e9 57       	subi	r30, 0x79	; 121
    2c90:	fe 4f       	sbci	r31, 0xFE	; 254
    2c92:	80 e0       	ldi	r24, 0x00	; 0
    2c94:	90 e0       	ldi	r25, 0x00	; 0
    2c96:	a0 e0       	ldi	r26, 0x00	; 0
    2c98:	b0 e0       	ldi	r27, 0x00	; 0
    2c9a:	80 83       	st	Z, r24
    2c9c:	91 83       	std	Z+1, r25	; 0x01
    2c9e:	a2 83       	std	Z+2, r26	; 0x02
    2ca0:	b3 83       	std	Z+3, r27	; 0x03
    2ca2:	89 89       	ldd	r24, Y+17	; 0x11
    2ca4:	88 2f       	mov	r24, r24
    2ca6:	90 e0       	ldi	r25, 0x00	; 0
    2ca8:	fc 01       	movw	r30, r24
    2caa:	ed 52       	subi	r30, 0x2D	; 45
    2cac:	fe 4f       	sbci	r31, 0xFE	; 254
    2cae:	10 82       	st	Z, r1
    2cb0:	89 89       	ldd	r24, Y+17	; 0x11
    2cb2:	8f 5f       	subi	r24, 0xFF	; 255
    2cb4:	89 8b       	std	Y+17, r24	; 0x11
    2cb6:	89 89       	ldd	r24, Y+17	; 0x11
    2cb8:	8a 30       	cpi	r24, 0x0A	; 10
    2cba:	d0 f2       	brcs	.-76     	; 0x2c70 <CleanExpressionAndCheckErrors+0x5ba>
    2cbc:	8d ec       	ldi	r24, 0xCD	; 205
    2cbe:	9c ec       	ldi	r25, 0xCC	; 204
    2cc0:	ac ec       	ldi	r26, 0xCC	; 204
    2cc2:	bd e3       	ldi	r27, 0x3D	; 61
    2cc4:	80 93 cf 01 	sts	0x01CF, r24
    2cc8:	90 93 d0 01 	sts	0x01D0, r25
    2ccc:	a0 93 d1 01 	sts	0x01D1, r26
    2cd0:	b0 93 d2 01 	sts	0x01D2, r27
    2cd4:	10 92 86 01 	sts	0x0186, r1
    2cd8:	10 92 dd 01 	sts	0x01DD, r1
    2cdc:	10 92 ba 01 	sts	0x01BA, r1
    2ce0:	10 92 af 01 	sts	0x01AF, r1
    2ce4:	b4 c2       	rjmp	.+1384   	; 0x324e <CleanExpressionAndCheckErrors+0xb98>

		else if (ExpressionArray[i] == '*' && ExpressionArray[i+1] == '+')
    2ce6:	88 8d       	ldd	r24, Y+24	; 0x18
    2ce8:	88 2f       	mov	r24, r24
    2cea:	90 e0       	ldi	r25, 0x00	; 0
    2cec:	fc 01       	movw	r30, r24
    2cee:	e5 54       	subi	r30, 0x45	; 69
    2cf0:	fe 4f       	sbci	r31, 0xFE	; 254
    2cf2:	80 81       	ld	r24, Z
    2cf4:	8a 32       	cpi	r24, 0x2A	; 42
    2cf6:	b1 f5       	brne	.+108    	; 0x2d64 <CleanExpressionAndCheckErrors+0x6ae>
    2cf8:	88 8d       	ldd	r24, Y+24	; 0x18
    2cfa:	88 2f       	mov	r24, r24
    2cfc:	90 e0       	ldi	r25, 0x00	; 0
    2cfe:	01 96       	adiw	r24, 0x01	; 1
    2d00:	fc 01       	movw	r30, r24
    2d02:	e5 54       	subi	r30, 0x45	; 69
    2d04:	fe 4f       	sbci	r31, 0xFE	; 254
    2d06:	80 81       	ld	r24, Z
    2d08:	8b 32       	cpi	r24, 0x2B	; 43
    2d0a:	61 f5       	brne	.+88     	; 0x2d64 <CleanExpressionAndCheckErrors+0x6ae>
		{
			REARRANGE_EXPRESSION('*',i);	i--;
    2d0c:	88 8d       	ldd	r24, Y+24	; 0x18
    2d0e:	88 2f       	mov	r24, r24
    2d10:	90 e0       	ldi	r25, 0x00	; 0
    2d12:	fc 01       	movw	r30, r24
    2d14:	e5 54       	subi	r30, 0x45	; 69
    2d16:	fe 4f       	sbci	r31, 0xFE	; 254
    2d18:	8a e2       	ldi	r24, 0x2A	; 42
    2d1a:	80 83       	st	Z, r24
    2d1c:	88 8d       	ldd	r24, Y+24	; 0x18
    2d1e:	8f 5f       	subi	r24, 0xFF	; 255
    2d20:	88 8b       	std	Y+16, r24	; 0x10
    2d22:	12 c0       	rjmp	.+36     	; 0x2d48 <CleanExpressionAndCheckErrors+0x692>
    2d24:	88 89       	ldd	r24, Y+16	; 0x10
    2d26:	28 2f       	mov	r18, r24
    2d28:	30 e0       	ldi	r19, 0x00	; 0
    2d2a:	88 89       	ldd	r24, Y+16	; 0x10
    2d2c:	88 2f       	mov	r24, r24
    2d2e:	90 e0       	ldi	r25, 0x00	; 0
    2d30:	01 96       	adiw	r24, 0x01	; 1
    2d32:	fc 01       	movw	r30, r24
    2d34:	e5 54       	subi	r30, 0x45	; 69
    2d36:	fe 4f       	sbci	r31, 0xFE	; 254
    2d38:	80 81       	ld	r24, Z
    2d3a:	f9 01       	movw	r30, r18
    2d3c:	e5 54       	subi	r30, 0x45	; 69
    2d3e:	fe 4f       	sbci	r31, 0xFE	; 254
    2d40:	80 83       	st	Z, r24
    2d42:	88 89       	ldd	r24, Y+16	; 0x10
    2d44:	8f 5f       	subi	r24, 0xFF	; 255
    2d46:	88 8b       	std	Y+16, r24	; 0x10
    2d48:	90 91 dd 01 	lds	r25, 0x01DD
    2d4c:	88 89       	ldd	r24, Y+16	; 0x10
    2d4e:	89 17       	cp	r24, r25
    2d50:	48 f3       	brcs	.-46     	; 0x2d24 <CleanExpressionAndCheckErrors+0x66e>
    2d52:	80 91 dd 01 	lds	r24, 0x01DD
    2d56:	81 50       	subi	r24, 0x01	; 1
    2d58:	80 93 dd 01 	sts	0x01DD, r24
    2d5c:	88 8d       	ldd	r24, Y+24	; 0x18
    2d5e:	81 50       	subi	r24, 0x01	; 1
    2d60:	88 8f       	std	Y+24, r24	; 0x18
    2d62:	75 c2       	rjmp	.+1258   	; 0x324e <CleanExpressionAndCheckErrors+0xb98>
		}
		else if (ExpressionArray[i] == '/' && ExpressionArray[i+1] == '+')
    2d64:	88 8d       	ldd	r24, Y+24	; 0x18
    2d66:	88 2f       	mov	r24, r24
    2d68:	90 e0       	ldi	r25, 0x00	; 0
    2d6a:	fc 01       	movw	r30, r24
    2d6c:	e5 54       	subi	r30, 0x45	; 69
    2d6e:	fe 4f       	sbci	r31, 0xFE	; 254
    2d70:	80 81       	ld	r24, Z
    2d72:	8f 32       	cpi	r24, 0x2F	; 47
    2d74:	b1 f5       	brne	.+108    	; 0x2de2 <CleanExpressionAndCheckErrors+0x72c>
    2d76:	88 8d       	ldd	r24, Y+24	; 0x18
    2d78:	88 2f       	mov	r24, r24
    2d7a:	90 e0       	ldi	r25, 0x00	; 0
    2d7c:	01 96       	adiw	r24, 0x01	; 1
    2d7e:	fc 01       	movw	r30, r24
    2d80:	e5 54       	subi	r30, 0x45	; 69
    2d82:	fe 4f       	sbci	r31, 0xFE	; 254
    2d84:	80 81       	ld	r24, Z
    2d86:	8b 32       	cpi	r24, 0x2B	; 43
    2d88:	61 f5       	brne	.+88     	; 0x2de2 <CleanExpressionAndCheckErrors+0x72c>
		{
			REARRANGE_EXPRESSION('/',i);	i--;
    2d8a:	88 8d       	ldd	r24, Y+24	; 0x18
    2d8c:	88 2f       	mov	r24, r24
    2d8e:	90 e0       	ldi	r25, 0x00	; 0
    2d90:	fc 01       	movw	r30, r24
    2d92:	e5 54       	subi	r30, 0x45	; 69
    2d94:	fe 4f       	sbci	r31, 0xFE	; 254
    2d96:	8f e2       	ldi	r24, 0x2F	; 47
    2d98:	80 83       	st	Z, r24
    2d9a:	88 8d       	ldd	r24, Y+24	; 0x18
    2d9c:	8f 5f       	subi	r24, 0xFF	; 255
    2d9e:	8f 87       	std	Y+15, r24	; 0x0f
    2da0:	12 c0       	rjmp	.+36     	; 0x2dc6 <CleanExpressionAndCheckErrors+0x710>
    2da2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2da4:	28 2f       	mov	r18, r24
    2da6:	30 e0       	ldi	r19, 0x00	; 0
    2da8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2daa:	88 2f       	mov	r24, r24
    2dac:	90 e0       	ldi	r25, 0x00	; 0
    2dae:	01 96       	adiw	r24, 0x01	; 1
    2db0:	fc 01       	movw	r30, r24
    2db2:	e5 54       	subi	r30, 0x45	; 69
    2db4:	fe 4f       	sbci	r31, 0xFE	; 254
    2db6:	80 81       	ld	r24, Z
    2db8:	f9 01       	movw	r30, r18
    2dba:	e5 54       	subi	r30, 0x45	; 69
    2dbc:	fe 4f       	sbci	r31, 0xFE	; 254
    2dbe:	80 83       	st	Z, r24
    2dc0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2dc2:	8f 5f       	subi	r24, 0xFF	; 255
    2dc4:	8f 87       	std	Y+15, r24	; 0x0f
    2dc6:	90 91 dd 01 	lds	r25, 0x01DD
    2dca:	8f 85       	ldd	r24, Y+15	; 0x0f
    2dcc:	89 17       	cp	r24, r25
    2dce:	48 f3       	brcs	.-46     	; 0x2da2 <CleanExpressionAndCheckErrors+0x6ec>
    2dd0:	80 91 dd 01 	lds	r24, 0x01DD
    2dd4:	81 50       	subi	r24, 0x01	; 1
    2dd6:	80 93 dd 01 	sts	0x01DD, r24
    2dda:	88 8d       	ldd	r24, Y+24	; 0x18
    2ddc:	81 50       	subi	r24, 0x01	; 1
    2dde:	88 8f       	std	Y+24, r24	; 0x18
    2de0:	36 c2       	rjmp	.+1132   	; 0x324e <CleanExpressionAndCheckErrors+0xb98>
		}

		else if (ExpressionArray[i] == '+' && ExpressionArray[i+1] == '+')
    2de2:	88 8d       	ldd	r24, Y+24	; 0x18
    2de4:	88 2f       	mov	r24, r24
    2de6:	90 e0       	ldi	r25, 0x00	; 0
    2de8:	fc 01       	movw	r30, r24
    2dea:	e5 54       	subi	r30, 0x45	; 69
    2dec:	fe 4f       	sbci	r31, 0xFE	; 254
    2dee:	80 81       	ld	r24, Z
    2df0:	8b 32       	cpi	r24, 0x2B	; 43
    2df2:	b1 f5       	brne	.+108    	; 0x2e60 <CleanExpressionAndCheckErrors+0x7aa>
    2df4:	88 8d       	ldd	r24, Y+24	; 0x18
    2df6:	88 2f       	mov	r24, r24
    2df8:	90 e0       	ldi	r25, 0x00	; 0
    2dfa:	01 96       	adiw	r24, 0x01	; 1
    2dfc:	fc 01       	movw	r30, r24
    2dfe:	e5 54       	subi	r30, 0x45	; 69
    2e00:	fe 4f       	sbci	r31, 0xFE	; 254
    2e02:	80 81       	ld	r24, Z
    2e04:	8b 32       	cpi	r24, 0x2B	; 43
    2e06:	61 f5       	brne	.+88     	; 0x2e60 <CleanExpressionAndCheckErrors+0x7aa>
		{
			REARRANGE_EXPRESSION('+',i);	i--;
    2e08:	88 8d       	ldd	r24, Y+24	; 0x18
    2e0a:	88 2f       	mov	r24, r24
    2e0c:	90 e0       	ldi	r25, 0x00	; 0
    2e0e:	fc 01       	movw	r30, r24
    2e10:	e5 54       	subi	r30, 0x45	; 69
    2e12:	fe 4f       	sbci	r31, 0xFE	; 254
    2e14:	8b e2       	ldi	r24, 0x2B	; 43
    2e16:	80 83       	st	Z, r24
    2e18:	88 8d       	ldd	r24, Y+24	; 0x18
    2e1a:	8f 5f       	subi	r24, 0xFF	; 255
    2e1c:	8e 87       	std	Y+14, r24	; 0x0e
    2e1e:	12 c0       	rjmp	.+36     	; 0x2e44 <CleanExpressionAndCheckErrors+0x78e>
    2e20:	8e 85       	ldd	r24, Y+14	; 0x0e
    2e22:	28 2f       	mov	r18, r24
    2e24:	30 e0       	ldi	r19, 0x00	; 0
    2e26:	8e 85       	ldd	r24, Y+14	; 0x0e
    2e28:	88 2f       	mov	r24, r24
    2e2a:	90 e0       	ldi	r25, 0x00	; 0
    2e2c:	01 96       	adiw	r24, 0x01	; 1
    2e2e:	fc 01       	movw	r30, r24
    2e30:	e5 54       	subi	r30, 0x45	; 69
    2e32:	fe 4f       	sbci	r31, 0xFE	; 254
    2e34:	80 81       	ld	r24, Z
    2e36:	f9 01       	movw	r30, r18
    2e38:	e5 54       	subi	r30, 0x45	; 69
    2e3a:	fe 4f       	sbci	r31, 0xFE	; 254
    2e3c:	80 83       	st	Z, r24
    2e3e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2e40:	8f 5f       	subi	r24, 0xFF	; 255
    2e42:	8e 87       	std	Y+14, r24	; 0x0e
    2e44:	90 91 dd 01 	lds	r25, 0x01DD
    2e48:	8e 85       	ldd	r24, Y+14	; 0x0e
    2e4a:	89 17       	cp	r24, r25
    2e4c:	48 f3       	brcs	.-46     	; 0x2e20 <CleanExpressionAndCheckErrors+0x76a>
    2e4e:	80 91 dd 01 	lds	r24, 0x01DD
    2e52:	81 50       	subi	r24, 0x01	; 1
    2e54:	80 93 dd 01 	sts	0x01DD, r24
    2e58:	88 8d       	ldd	r24, Y+24	; 0x18
    2e5a:	81 50       	subi	r24, 0x01	; 1
    2e5c:	88 8f       	std	Y+24, r24	; 0x18
    2e5e:	f7 c1       	rjmp	.+1006   	; 0x324e <CleanExpressionAndCheckErrors+0xb98>
		}

		else if (ExpressionArray[i] == '+' && ExpressionArray[i+1] == '-')
    2e60:	88 8d       	ldd	r24, Y+24	; 0x18
    2e62:	88 2f       	mov	r24, r24
    2e64:	90 e0       	ldi	r25, 0x00	; 0
    2e66:	fc 01       	movw	r30, r24
    2e68:	e5 54       	subi	r30, 0x45	; 69
    2e6a:	fe 4f       	sbci	r31, 0xFE	; 254
    2e6c:	80 81       	ld	r24, Z
    2e6e:	8b 32       	cpi	r24, 0x2B	; 43
    2e70:	b1 f5       	brne	.+108    	; 0x2ede <CleanExpressionAndCheckErrors+0x828>
    2e72:	88 8d       	ldd	r24, Y+24	; 0x18
    2e74:	88 2f       	mov	r24, r24
    2e76:	90 e0       	ldi	r25, 0x00	; 0
    2e78:	01 96       	adiw	r24, 0x01	; 1
    2e7a:	fc 01       	movw	r30, r24
    2e7c:	e5 54       	subi	r30, 0x45	; 69
    2e7e:	fe 4f       	sbci	r31, 0xFE	; 254
    2e80:	80 81       	ld	r24, Z
    2e82:	8d 32       	cpi	r24, 0x2D	; 45
    2e84:	61 f5       	brne	.+88     	; 0x2ede <CleanExpressionAndCheckErrors+0x828>
		{
			REARRANGE_EXPRESSION('-',i);	i--;
    2e86:	88 8d       	ldd	r24, Y+24	; 0x18
    2e88:	88 2f       	mov	r24, r24
    2e8a:	90 e0       	ldi	r25, 0x00	; 0
    2e8c:	fc 01       	movw	r30, r24
    2e8e:	e5 54       	subi	r30, 0x45	; 69
    2e90:	fe 4f       	sbci	r31, 0xFE	; 254
    2e92:	8d e2       	ldi	r24, 0x2D	; 45
    2e94:	80 83       	st	Z, r24
    2e96:	88 8d       	ldd	r24, Y+24	; 0x18
    2e98:	8f 5f       	subi	r24, 0xFF	; 255
    2e9a:	8d 87       	std	Y+13, r24	; 0x0d
    2e9c:	12 c0       	rjmp	.+36     	; 0x2ec2 <CleanExpressionAndCheckErrors+0x80c>
    2e9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ea0:	28 2f       	mov	r18, r24
    2ea2:	30 e0       	ldi	r19, 0x00	; 0
    2ea4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ea6:	88 2f       	mov	r24, r24
    2ea8:	90 e0       	ldi	r25, 0x00	; 0
    2eaa:	01 96       	adiw	r24, 0x01	; 1
    2eac:	fc 01       	movw	r30, r24
    2eae:	e5 54       	subi	r30, 0x45	; 69
    2eb0:	fe 4f       	sbci	r31, 0xFE	; 254
    2eb2:	80 81       	ld	r24, Z
    2eb4:	f9 01       	movw	r30, r18
    2eb6:	e5 54       	subi	r30, 0x45	; 69
    2eb8:	fe 4f       	sbci	r31, 0xFE	; 254
    2eba:	80 83       	st	Z, r24
    2ebc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ebe:	8f 5f       	subi	r24, 0xFF	; 255
    2ec0:	8d 87       	std	Y+13, r24	; 0x0d
    2ec2:	90 91 dd 01 	lds	r25, 0x01DD
    2ec6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ec8:	89 17       	cp	r24, r25
    2eca:	48 f3       	brcs	.-46     	; 0x2e9e <CleanExpressionAndCheckErrors+0x7e8>
    2ecc:	80 91 dd 01 	lds	r24, 0x01DD
    2ed0:	81 50       	subi	r24, 0x01	; 1
    2ed2:	80 93 dd 01 	sts	0x01DD, r24
    2ed6:	88 8d       	ldd	r24, Y+24	; 0x18
    2ed8:	81 50       	subi	r24, 0x01	; 1
    2eda:	88 8f       	std	Y+24, r24	; 0x18
    2edc:	b8 c1       	rjmp	.+880    	; 0x324e <CleanExpressionAndCheckErrors+0xb98>
		}

		else if (ExpressionArray[i] == '-' && ExpressionArray[i+1] == '+')
    2ede:	88 8d       	ldd	r24, Y+24	; 0x18
    2ee0:	88 2f       	mov	r24, r24
    2ee2:	90 e0       	ldi	r25, 0x00	; 0
    2ee4:	fc 01       	movw	r30, r24
    2ee6:	e5 54       	subi	r30, 0x45	; 69
    2ee8:	fe 4f       	sbci	r31, 0xFE	; 254
    2eea:	80 81       	ld	r24, Z
    2eec:	8d 32       	cpi	r24, 0x2D	; 45
    2eee:	b1 f5       	brne	.+108    	; 0x2f5c <CleanExpressionAndCheckErrors+0x8a6>
    2ef0:	88 8d       	ldd	r24, Y+24	; 0x18
    2ef2:	88 2f       	mov	r24, r24
    2ef4:	90 e0       	ldi	r25, 0x00	; 0
    2ef6:	01 96       	adiw	r24, 0x01	; 1
    2ef8:	fc 01       	movw	r30, r24
    2efa:	e5 54       	subi	r30, 0x45	; 69
    2efc:	fe 4f       	sbci	r31, 0xFE	; 254
    2efe:	80 81       	ld	r24, Z
    2f00:	8b 32       	cpi	r24, 0x2B	; 43
    2f02:	61 f5       	brne	.+88     	; 0x2f5c <CleanExpressionAndCheckErrors+0x8a6>
		{
			REARRANGE_EXPRESSION('-',i);	i--;
    2f04:	88 8d       	ldd	r24, Y+24	; 0x18
    2f06:	88 2f       	mov	r24, r24
    2f08:	90 e0       	ldi	r25, 0x00	; 0
    2f0a:	fc 01       	movw	r30, r24
    2f0c:	e5 54       	subi	r30, 0x45	; 69
    2f0e:	fe 4f       	sbci	r31, 0xFE	; 254
    2f10:	8d e2       	ldi	r24, 0x2D	; 45
    2f12:	80 83       	st	Z, r24
    2f14:	88 8d       	ldd	r24, Y+24	; 0x18
    2f16:	8f 5f       	subi	r24, 0xFF	; 255
    2f18:	8c 87       	std	Y+12, r24	; 0x0c
    2f1a:	12 c0       	rjmp	.+36     	; 0x2f40 <CleanExpressionAndCheckErrors+0x88a>
    2f1c:	8c 85       	ldd	r24, Y+12	; 0x0c
    2f1e:	28 2f       	mov	r18, r24
    2f20:	30 e0       	ldi	r19, 0x00	; 0
    2f22:	8c 85       	ldd	r24, Y+12	; 0x0c
    2f24:	88 2f       	mov	r24, r24
    2f26:	90 e0       	ldi	r25, 0x00	; 0
    2f28:	01 96       	adiw	r24, 0x01	; 1
    2f2a:	fc 01       	movw	r30, r24
    2f2c:	e5 54       	subi	r30, 0x45	; 69
    2f2e:	fe 4f       	sbci	r31, 0xFE	; 254
    2f30:	80 81       	ld	r24, Z
    2f32:	f9 01       	movw	r30, r18
    2f34:	e5 54       	subi	r30, 0x45	; 69
    2f36:	fe 4f       	sbci	r31, 0xFE	; 254
    2f38:	80 83       	st	Z, r24
    2f3a:	8c 85       	ldd	r24, Y+12	; 0x0c
    2f3c:	8f 5f       	subi	r24, 0xFF	; 255
    2f3e:	8c 87       	std	Y+12, r24	; 0x0c
    2f40:	90 91 dd 01 	lds	r25, 0x01DD
    2f44:	8c 85       	ldd	r24, Y+12	; 0x0c
    2f46:	89 17       	cp	r24, r25
    2f48:	48 f3       	brcs	.-46     	; 0x2f1c <CleanExpressionAndCheckErrors+0x866>
    2f4a:	80 91 dd 01 	lds	r24, 0x01DD
    2f4e:	81 50       	subi	r24, 0x01	; 1
    2f50:	80 93 dd 01 	sts	0x01DD, r24
    2f54:	88 8d       	ldd	r24, Y+24	; 0x18
    2f56:	81 50       	subi	r24, 0x01	; 1
    2f58:	88 8f       	std	Y+24, r24	; 0x18
    2f5a:	79 c1       	rjmp	.+754    	; 0x324e <CleanExpressionAndCheckErrors+0xb98>
		}
		else if (ExpressionArray[i] == '-' && ExpressionArray[i+1] == '-')
    2f5c:	88 8d       	ldd	r24, Y+24	; 0x18
    2f5e:	88 2f       	mov	r24, r24
    2f60:	90 e0       	ldi	r25, 0x00	; 0
    2f62:	fc 01       	movw	r30, r24
    2f64:	e5 54       	subi	r30, 0x45	; 69
    2f66:	fe 4f       	sbci	r31, 0xFE	; 254
    2f68:	80 81       	ld	r24, Z
    2f6a:	8d 32       	cpi	r24, 0x2D	; 45
    2f6c:	b1 f5       	brne	.+108    	; 0x2fda <CleanExpressionAndCheckErrors+0x924>
    2f6e:	88 8d       	ldd	r24, Y+24	; 0x18
    2f70:	88 2f       	mov	r24, r24
    2f72:	90 e0       	ldi	r25, 0x00	; 0
    2f74:	01 96       	adiw	r24, 0x01	; 1
    2f76:	fc 01       	movw	r30, r24
    2f78:	e5 54       	subi	r30, 0x45	; 69
    2f7a:	fe 4f       	sbci	r31, 0xFE	; 254
    2f7c:	80 81       	ld	r24, Z
    2f7e:	8d 32       	cpi	r24, 0x2D	; 45
    2f80:	61 f5       	brne	.+88     	; 0x2fda <CleanExpressionAndCheckErrors+0x924>
		{
			REARRANGE_EXPRESSION('+',i);	i--;
    2f82:	88 8d       	ldd	r24, Y+24	; 0x18
    2f84:	88 2f       	mov	r24, r24
    2f86:	90 e0       	ldi	r25, 0x00	; 0
    2f88:	fc 01       	movw	r30, r24
    2f8a:	e5 54       	subi	r30, 0x45	; 69
    2f8c:	fe 4f       	sbci	r31, 0xFE	; 254
    2f8e:	8b e2       	ldi	r24, 0x2B	; 43
    2f90:	80 83       	st	Z, r24
    2f92:	88 8d       	ldd	r24, Y+24	; 0x18
    2f94:	8f 5f       	subi	r24, 0xFF	; 255
    2f96:	8b 87       	std	Y+11, r24	; 0x0b
    2f98:	12 c0       	rjmp	.+36     	; 0x2fbe <CleanExpressionAndCheckErrors+0x908>
    2f9a:	8b 85       	ldd	r24, Y+11	; 0x0b
    2f9c:	28 2f       	mov	r18, r24
    2f9e:	30 e0       	ldi	r19, 0x00	; 0
    2fa0:	8b 85       	ldd	r24, Y+11	; 0x0b
    2fa2:	88 2f       	mov	r24, r24
    2fa4:	90 e0       	ldi	r25, 0x00	; 0
    2fa6:	01 96       	adiw	r24, 0x01	; 1
    2fa8:	fc 01       	movw	r30, r24
    2faa:	e5 54       	subi	r30, 0x45	; 69
    2fac:	fe 4f       	sbci	r31, 0xFE	; 254
    2fae:	80 81       	ld	r24, Z
    2fb0:	f9 01       	movw	r30, r18
    2fb2:	e5 54       	subi	r30, 0x45	; 69
    2fb4:	fe 4f       	sbci	r31, 0xFE	; 254
    2fb6:	80 83       	st	Z, r24
    2fb8:	8b 85       	ldd	r24, Y+11	; 0x0b
    2fba:	8f 5f       	subi	r24, 0xFF	; 255
    2fbc:	8b 87       	std	Y+11, r24	; 0x0b
    2fbe:	90 91 dd 01 	lds	r25, 0x01DD
    2fc2:	8b 85       	ldd	r24, Y+11	; 0x0b
    2fc4:	89 17       	cp	r24, r25
    2fc6:	48 f3       	brcs	.-46     	; 0x2f9a <CleanExpressionAndCheckErrors+0x8e4>
    2fc8:	80 91 dd 01 	lds	r24, 0x01DD
    2fcc:	81 50       	subi	r24, 0x01	; 1
    2fce:	80 93 dd 01 	sts	0x01DD, r24
    2fd2:	88 8d       	ldd	r24, Y+24	; 0x18
    2fd4:	81 50       	subi	r24, 0x01	; 1
    2fd6:	88 8f       	std	Y+24, r24	; 0x18
    2fd8:	3a c1       	rjmp	.+628    	; 0x324e <CleanExpressionAndCheckErrors+0xb98>
		}
		else if (ExpressionArray[i] == '-' && ExpressionArray[i+1] == '-')
    2fda:	88 8d       	ldd	r24, Y+24	; 0x18
    2fdc:	88 2f       	mov	r24, r24
    2fde:	90 e0       	ldi	r25, 0x00	; 0
    2fe0:	fc 01       	movw	r30, r24
    2fe2:	e5 54       	subi	r30, 0x45	; 69
    2fe4:	fe 4f       	sbci	r31, 0xFE	; 254
    2fe6:	80 81       	ld	r24, Z
    2fe8:	8d 32       	cpi	r24, 0x2D	; 45
    2fea:	b1 f5       	brne	.+108    	; 0x3058 <CleanExpressionAndCheckErrors+0x9a2>
    2fec:	88 8d       	ldd	r24, Y+24	; 0x18
    2fee:	88 2f       	mov	r24, r24
    2ff0:	90 e0       	ldi	r25, 0x00	; 0
    2ff2:	01 96       	adiw	r24, 0x01	; 1
    2ff4:	fc 01       	movw	r30, r24
    2ff6:	e5 54       	subi	r30, 0x45	; 69
    2ff8:	fe 4f       	sbci	r31, 0xFE	; 254
    2ffa:	80 81       	ld	r24, Z
    2ffc:	8d 32       	cpi	r24, 0x2D	; 45
    2ffe:	61 f5       	brne	.+88     	; 0x3058 <CleanExpressionAndCheckErrors+0x9a2>
		{
			REARRANGE_EXPRESSION('+',i);	i--;
    3000:	88 8d       	ldd	r24, Y+24	; 0x18
    3002:	88 2f       	mov	r24, r24
    3004:	90 e0       	ldi	r25, 0x00	; 0
    3006:	fc 01       	movw	r30, r24
    3008:	e5 54       	subi	r30, 0x45	; 69
    300a:	fe 4f       	sbci	r31, 0xFE	; 254
    300c:	8b e2       	ldi	r24, 0x2B	; 43
    300e:	80 83       	st	Z, r24
    3010:	88 8d       	ldd	r24, Y+24	; 0x18
    3012:	8f 5f       	subi	r24, 0xFF	; 255
    3014:	8a 87       	std	Y+10, r24	; 0x0a
    3016:	12 c0       	rjmp	.+36     	; 0x303c <CleanExpressionAndCheckErrors+0x986>
    3018:	8a 85       	ldd	r24, Y+10	; 0x0a
    301a:	28 2f       	mov	r18, r24
    301c:	30 e0       	ldi	r19, 0x00	; 0
    301e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3020:	88 2f       	mov	r24, r24
    3022:	90 e0       	ldi	r25, 0x00	; 0
    3024:	01 96       	adiw	r24, 0x01	; 1
    3026:	fc 01       	movw	r30, r24
    3028:	e5 54       	subi	r30, 0x45	; 69
    302a:	fe 4f       	sbci	r31, 0xFE	; 254
    302c:	80 81       	ld	r24, Z
    302e:	f9 01       	movw	r30, r18
    3030:	e5 54       	subi	r30, 0x45	; 69
    3032:	fe 4f       	sbci	r31, 0xFE	; 254
    3034:	80 83       	st	Z, r24
    3036:	8a 85       	ldd	r24, Y+10	; 0x0a
    3038:	8f 5f       	subi	r24, 0xFF	; 255
    303a:	8a 87       	std	Y+10, r24	; 0x0a
    303c:	90 91 dd 01 	lds	r25, 0x01DD
    3040:	8a 85       	ldd	r24, Y+10	; 0x0a
    3042:	89 17       	cp	r24, r25
    3044:	48 f3       	brcs	.-46     	; 0x3018 <CleanExpressionAndCheckErrors+0x962>
    3046:	80 91 dd 01 	lds	r24, 0x01DD
    304a:	81 50       	subi	r24, 0x01	; 1
    304c:	80 93 dd 01 	sts	0x01DD, r24
    3050:	88 8d       	ldd	r24, Y+24	; 0x18
    3052:	81 50       	subi	r24, 0x01	; 1
    3054:	88 8f       	std	Y+24, r24	; 0x18
    3056:	fb c0       	rjmp	.+502    	; 0x324e <CleanExpressionAndCheckErrors+0xb98>
		}
		else if (ExpressionArray[i] == '.' && ExpressionArray[i+1] == '+')
    3058:	88 8d       	ldd	r24, Y+24	; 0x18
    305a:	88 2f       	mov	r24, r24
    305c:	90 e0       	ldi	r25, 0x00	; 0
    305e:	fc 01       	movw	r30, r24
    3060:	e5 54       	subi	r30, 0x45	; 69
    3062:	fe 4f       	sbci	r31, 0xFE	; 254
    3064:	80 81       	ld	r24, Z
    3066:	8e 32       	cpi	r24, 0x2E	; 46
    3068:	b1 f5       	brne	.+108    	; 0x30d6 <CleanExpressionAndCheckErrors+0xa20>
    306a:	88 8d       	ldd	r24, Y+24	; 0x18
    306c:	88 2f       	mov	r24, r24
    306e:	90 e0       	ldi	r25, 0x00	; 0
    3070:	01 96       	adiw	r24, 0x01	; 1
    3072:	fc 01       	movw	r30, r24
    3074:	e5 54       	subi	r30, 0x45	; 69
    3076:	fe 4f       	sbci	r31, 0xFE	; 254
    3078:	80 81       	ld	r24, Z
    307a:	8b 32       	cpi	r24, 0x2B	; 43
    307c:	61 f5       	brne	.+88     	; 0x30d6 <CleanExpressionAndCheckErrors+0xa20>
		{
			REARRANGE_EXPRESSION('+',i);	i--;
    307e:	88 8d       	ldd	r24, Y+24	; 0x18
    3080:	88 2f       	mov	r24, r24
    3082:	90 e0       	ldi	r25, 0x00	; 0
    3084:	fc 01       	movw	r30, r24
    3086:	e5 54       	subi	r30, 0x45	; 69
    3088:	fe 4f       	sbci	r31, 0xFE	; 254
    308a:	8b e2       	ldi	r24, 0x2B	; 43
    308c:	80 83       	st	Z, r24
    308e:	88 8d       	ldd	r24, Y+24	; 0x18
    3090:	8f 5f       	subi	r24, 0xFF	; 255
    3092:	89 87       	std	Y+9, r24	; 0x09
    3094:	12 c0       	rjmp	.+36     	; 0x30ba <CleanExpressionAndCheckErrors+0xa04>
    3096:	89 85       	ldd	r24, Y+9	; 0x09
    3098:	28 2f       	mov	r18, r24
    309a:	30 e0       	ldi	r19, 0x00	; 0
    309c:	89 85       	ldd	r24, Y+9	; 0x09
    309e:	88 2f       	mov	r24, r24
    30a0:	90 e0       	ldi	r25, 0x00	; 0
    30a2:	01 96       	adiw	r24, 0x01	; 1
    30a4:	fc 01       	movw	r30, r24
    30a6:	e5 54       	subi	r30, 0x45	; 69
    30a8:	fe 4f       	sbci	r31, 0xFE	; 254
    30aa:	80 81       	ld	r24, Z
    30ac:	f9 01       	movw	r30, r18
    30ae:	e5 54       	subi	r30, 0x45	; 69
    30b0:	fe 4f       	sbci	r31, 0xFE	; 254
    30b2:	80 83       	st	Z, r24
    30b4:	89 85       	ldd	r24, Y+9	; 0x09
    30b6:	8f 5f       	subi	r24, 0xFF	; 255
    30b8:	89 87       	std	Y+9, r24	; 0x09
    30ba:	90 91 dd 01 	lds	r25, 0x01DD
    30be:	89 85       	ldd	r24, Y+9	; 0x09
    30c0:	89 17       	cp	r24, r25
    30c2:	48 f3       	brcs	.-46     	; 0x3096 <CleanExpressionAndCheckErrors+0x9e0>
    30c4:	80 91 dd 01 	lds	r24, 0x01DD
    30c8:	81 50       	subi	r24, 0x01	; 1
    30ca:	80 93 dd 01 	sts	0x01DD, r24
    30ce:	88 8d       	ldd	r24, Y+24	; 0x18
    30d0:	81 50       	subi	r24, 0x01	; 1
    30d2:	88 8f       	std	Y+24, r24	; 0x18
    30d4:	bc c0       	rjmp	.+376    	; 0x324e <CleanExpressionAndCheckErrors+0xb98>
		}
		else if (ExpressionArray[i] == '.' && ExpressionArray[i+1] == '-')
    30d6:	88 8d       	ldd	r24, Y+24	; 0x18
    30d8:	88 2f       	mov	r24, r24
    30da:	90 e0       	ldi	r25, 0x00	; 0
    30dc:	fc 01       	movw	r30, r24
    30de:	e5 54       	subi	r30, 0x45	; 69
    30e0:	fe 4f       	sbci	r31, 0xFE	; 254
    30e2:	80 81       	ld	r24, Z
    30e4:	8e 32       	cpi	r24, 0x2E	; 46
    30e6:	b1 f5       	brne	.+108    	; 0x3154 <CleanExpressionAndCheckErrors+0xa9e>
    30e8:	88 8d       	ldd	r24, Y+24	; 0x18
    30ea:	88 2f       	mov	r24, r24
    30ec:	90 e0       	ldi	r25, 0x00	; 0
    30ee:	01 96       	adiw	r24, 0x01	; 1
    30f0:	fc 01       	movw	r30, r24
    30f2:	e5 54       	subi	r30, 0x45	; 69
    30f4:	fe 4f       	sbci	r31, 0xFE	; 254
    30f6:	80 81       	ld	r24, Z
    30f8:	8d 32       	cpi	r24, 0x2D	; 45
    30fa:	61 f5       	brne	.+88     	; 0x3154 <CleanExpressionAndCheckErrors+0xa9e>
		{
			REARRANGE_EXPRESSION('-',i);  	i--;
    30fc:	88 8d       	ldd	r24, Y+24	; 0x18
    30fe:	88 2f       	mov	r24, r24
    3100:	90 e0       	ldi	r25, 0x00	; 0
    3102:	fc 01       	movw	r30, r24
    3104:	e5 54       	subi	r30, 0x45	; 69
    3106:	fe 4f       	sbci	r31, 0xFE	; 254
    3108:	8d e2       	ldi	r24, 0x2D	; 45
    310a:	80 83       	st	Z, r24
    310c:	88 8d       	ldd	r24, Y+24	; 0x18
    310e:	8f 5f       	subi	r24, 0xFF	; 255
    3110:	88 87       	std	Y+8, r24	; 0x08
    3112:	12 c0       	rjmp	.+36     	; 0x3138 <CleanExpressionAndCheckErrors+0xa82>
    3114:	88 85       	ldd	r24, Y+8	; 0x08
    3116:	28 2f       	mov	r18, r24
    3118:	30 e0       	ldi	r19, 0x00	; 0
    311a:	88 85       	ldd	r24, Y+8	; 0x08
    311c:	88 2f       	mov	r24, r24
    311e:	90 e0       	ldi	r25, 0x00	; 0
    3120:	01 96       	adiw	r24, 0x01	; 1
    3122:	fc 01       	movw	r30, r24
    3124:	e5 54       	subi	r30, 0x45	; 69
    3126:	fe 4f       	sbci	r31, 0xFE	; 254
    3128:	80 81       	ld	r24, Z
    312a:	f9 01       	movw	r30, r18
    312c:	e5 54       	subi	r30, 0x45	; 69
    312e:	fe 4f       	sbci	r31, 0xFE	; 254
    3130:	80 83       	st	Z, r24
    3132:	88 85       	ldd	r24, Y+8	; 0x08
    3134:	8f 5f       	subi	r24, 0xFF	; 255
    3136:	88 87       	std	Y+8, r24	; 0x08
    3138:	90 91 dd 01 	lds	r25, 0x01DD
    313c:	88 85       	ldd	r24, Y+8	; 0x08
    313e:	89 17       	cp	r24, r25
    3140:	48 f3       	brcs	.-46     	; 0x3114 <CleanExpressionAndCheckErrors+0xa5e>
    3142:	80 91 dd 01 	lds	r24, 0x01DD
    3146:	81 50       	subi	r24, 0x01	; 1
    3148:	80 93 dd 01 	sts	0x01DD, r24
    314c:	88 8d       	ldd	r24, Y+24	; 0x18
    314e:	81 50       	subi	r24, 0x01	; 1
    3150:	88 8f       	std	Y+24, r24	; 0x18
    3152:	7d c0       	rjmp	.+250    	; 0x324e <CleanExpressionAndCheckErrors+0xb98>
		}
		else if (ExpressionArray[i] == '.' && ExpressionArray[i+1] == '*')
    3154:	88 8d       	ldd	r24, Y+24	; 0x18
    3156:	88 2f       	mov	r24, r24
    3158:	90 e0       	ldi	r25, 0x00	; 0
    315a:	fc 01       	movw	r30, r24
    315c:	e5 54       	subi	r30, 0x45	; 69
    315e:	fe 4f       	sbci	r31, 0xFE	; 254
    3160:	80 81       	ld	r24, Z
    3162:	8e 32       	cpi	r24, 0x2E	; 46
    3164:	b1 f5       	brne	.+108    	; 0x31d2 <CleanExpressionAndCheckErrors+0xb1c>
    3166:	88 8d       	ldd	r24, Y+24	; 0x18
    3168:	88 2f       	mov	r24, r24
    316a:	90 e0       	ldi	r25, 0x00	; 0
    316c:	01 96       	adiw	r24, 0x01	; 1
    316e:	fc 01       	movw	r30, r24
    3170:	e5 54       	subi	r30, 0x45	; 69
    3172:	fe 4f       	sbci	r31, 0xFE	; 254
    3174:	80 81       	ld	r24, Z
    3176:	8a 32       	cpi	r24, 0x2A	; 42
    3178:	61 f5       	brne	.+88     	; 0x31d2 <CleanExpressionAndCheckErrors+0xb1c>
		{
			REARRANGE_EXPRESSION('*',i);	i--;
    317a:	88 8d       	ldd	r24, Y+24	; 0x18
    317c:	88 2f       	mov	r24, r24
    317e:	90 e0       	ldi	r25, 0x00	; 0
    3180:	fc 01       	movw	r30, r24
    3182:	e5 54       	subi	r30, 0x45	; 69
    3184:	fe 4f       	sbci	r31, 0xFE	; 254
    3186:	8a e2       	ldi	r24, 0x2A	; 42
    3188:	80 83       	st	Z, r24
    318a:	88 8d       	ldd	r24, Y+24	; 0x18
    318c:	8f 5f       	subi	r24, 0xFF	; 255
    318e:	8f 83       	std	Y+7, r24	; 0x07
    3190:	12 c0       	rjmp	.+36     	; 0x31b6 <CleanExpressionAndCheckErrors+0xb00>
    3192:	8f 81       	ldd	r24, Y+7	; 0x07
    3194:	28 2f       	mov	r18, r24
    3196:	30 e0       	ldi	r19, 0x00	; 0
    3198:	8f 81       	ldd	r24, Y+7	; 0x07
    319a:	88 2f       	mov	r24, r24
    319c:	90 e0       	ldi	r25, 0x00	; 0
    319e:	01 96       	adiw	r24, 0x01	; 1
    31a0:	fc 01       	movw	r30, r24
    31a2:	e5 54       	subi	r30, 0x45	; 69
    31a4:	fe 4f       	sbci	r31, 0xFE	; 254
    31a6:	80 81       	ld	r24, Z
    31a8:	f9 01       	movw	r30, r18
    31aa:	e5 54       	subi	r30, 0x45	; 69
    31ac:	fe 4f       	sbci	r31, 0xFE	; 254
    31ae:	80 83       	st	Z, r24
    31b0:	8f 81       	ldd	r24, Y+7	; 0x07
    31b2:	8f 5f       	subi	r24, 0xFF	; 255
    31b4:	8f 83       	std	Y+7, r24	; 0x07
    31b6:	90 91 dd 01 	lds	r25, 0x01DD
    31ba:	8f 81       	ldd	r24, Y+7	; 0x07
    31bc:	89 17       	cp	r24, r25
    31be:	48 f3       	brcs	.-46     	; 0x3192 <CleanExpressionAndCheckErrors+0xadc>
    31c0:	80 91 dd 01 	lds	r24, 0x01DD
    31c4:	81 50       	subi	r24, 0x01	; 1
    31c6:	80 93 dd 01 	sts	0x01DD, r24
    31ca:	88 8d       	ldd	r24, Y+24	; 0x18
    31cc:	81 50       	subi	r24, 0x01	; 1
    31ce:	88 8f       	std	Y+24, r24	; 0x18
    31d0:	3e c0       	rjmp	.+124    	; 0x324e <CleanExpressionAndCheckErrors+0xb98>
		}
		else if (ExpressionArray[i] == '.' && ExpressionArray[i+1] == '/')
    31d2:	88 8d       	ldd	r24, Y+24	; 0x18
    31d4:	88 2f       	mov	r24, r24
    31d6:	90 e0       	ldi	r25, 0x00	; 0
    31d8:	fc 01       	movw	r30, r24
    31da:	e5 54       	subi	r30, 0x45	; 69
    31dc:	fe 4f       	sbci	r31, 0xFE	; 254
    31de:	80 81       	ld	r24, Z
    31e0:	8e 32       	cpi	r24, 0x2E	; 46
    31e2:	a9 f5       	brne	.+106    	; 0x324e <CleanExpressionAndCheckErrors+0xb98>
    31e4:	88 8d       	ldd	r24, Y+24	; 0x18
    31e6:	88 2f       	mov	r24, r24
    31e8:	90 e0       	ldi	r25, 0x00	; 0
    31ea:	01 96       	adiw	r24, 0x01	; 1
    31ec:	fc 01       	movw	r30, r24
    31ee:	e5 54       	subi	r30, 0x45	; 69
    31f0:	fe 4f       	sbci	r31, 0xFE	; 254
    31f2:	80 81       	ld	r24, Z
    31f4:	8f 32       	cpi	r24, 0x2F	; 47
    31f6:	59 f5       	brne	.+86     	; 0x324e <CleanExpressionAndCheckErrors+0xb98>
		{
			REARRANGE_EXPRESSION('/',i);	i--;
    31f8:	88 8d       	ldd	r24, Y+24	; 0x18
    31fa:	88 2f       	mov	r24, r24
    31fc:	90 e0       	ldi	r25, 0x00	; 0
    31fe:	fc 01       	movw	r30, r24
    3200:	e5 54       	subi	r30, 0x45	; 69
    3202:	fe 4f       	sbci	r31, 0xFE	; 254
    3204:	8f e2       	ldi	r24, 0x2F	; 47
    3206:	80 83       	st	Z, r24
    3208:	88 8d       	ldd	r24, Y+24	; 0x18
    320a:	8f 5f       	subi	r24, 0xFF	; 255
    320c:	8e 83       	std	Y+6, r24	; 0x06
    320e:	12 c0       	rjmp	.+36     	; 0x3234 <CleanExpressionAndCheckErrors+0xb7e>
    3210:	8e 81       	ldd	r24, Y+6	; 0x06
    3212:	28 2f       	mov	r18, r24
    3214:	30 e0       	ldi	r19, 0x00	; 0
    3216:	8e 81       	ldd	r24, Y+6	; 0x06
    3218:	88 2f       	mov	r24, r24
    321a:	90 e0       	ldi	r25, 0x00	; 0
    321c:	01 96       	adiw	r24, 0x01	; 1
    321e:	fc 01       	movw	r30, r24
    3220:	e5 54       	subi	r30, 0x45	; 69
    3222:	fe 4f       	sbci	r31, 0xFE	; 254
    3224:	80 81       	ld	r24, Z
    3226:	f9 01       	movw	r30, r18
    3228:	e5 54       	subi	r30, 0x45	; 69
    322a:	fe 4f       	sbci	r31, 0xFE	; 254
    322c:	80 83       	st	Z, r24
    322e:	8e 81       	ldd	r24, Y+6	; 0x06
    3230:	8f 5f       	subi	r24, 0xFF	; 255
    3232:	8e 83       	std	Y+6, r24	; 0x06
    3234:	90 91 dd 01 	lds	r25, 0x01DD
    3238:	8e 81       	ldd	r24, Y+6	; 0x06
    323a:	89 17       	cp	r24, r25
    323c:	48 f3       	brcs	.-46     	; 0x3210 <CleanExpressionAndCheckErrors+0xb5a>
    323e:	80 91 dd 01 	lds	r24, 0x01DD
    3242:	81 50       	subi	r24, 0x01	; 1
    3244:	80 93 dd 01 	sts	0x01DD, r24
    3248:	88 8d       	ldd	r24, Y+24	; 0x18
    324a:	81 50       	subi	r24, 0x01	; 1
    324c:	88 8f       	std	Y+24, r24	; 0x18
	{
		REARRANGE_EXPRESSION(' ',-1);
		NegativeFlag = 1;
	}

	for (u8 i = 0; i<=ExpressionCounter; i++)
    324e:	88 8d       	ldd	r24, Y+24	; 0x18
    3250:	8f 5f       	subi	r24, 0xFF	; 255
    3252:	88 8f       	std	Y+24, r24	; 0x18
    3254:	90 91 dd 01 	lds	r25, 0x01DD
    3258:	88 8d       	ldd	r24, Y+24	; 0x18
    325a:	98 17       	cp	r25, r24
    325c:	08 f0       	brcs	.+2      	; 0x3260 <CleanExpressionAndCheckErrors+0xbaa>
    325e:	cd ca       	rjmp	.-2662   	; 0x27fa <CleanExpressionAndCheckErrors+0x144>
		else if (ExpressionArray[i] == '.' && ExpressionArray[i+1] == '/')
		{
			REARRANGE_EXPRESSION('/',i);	i--;
		}
	}
		for(u8 i=0;i<ExpressionCounter; i++)
    3260:	1d 82       	std	Y+5, r1	; 0x05
    3262:	0e c1       	rjmp	.+540    	; 0x3480 <CleanExpressionAndCheckErrors+0xdca>
		{
			if (ExpressionArray[i]=='*' && ExpressionArray[i+1] == '-')
    3264:	8d 81       	ldd	r24, Y+5	; 0x05
    3266:	88 2f       	mov	r24, r24
    3268:	90 e0       	ldi	r25, 0x00	; 0
    326a:	fc 01       	movw	r30, r24
    326c:	e5 54       	subi	r30, 0x45	; 69
    326e:	fe 4f       	sbci	r31, 0xFE	; 254
    3270:	80 81       	ld	r24, Z
    3272:	8a 32       	cpi	r24, 0x2A	; 42
    3274:	09 f0       	breq	.+2      	; 0x3278 <CleanExpressionAndCheckErrors+0xbc2>
    3276:	7c c0       	rjmp	.+248    	; 0x3370 <CleanExpressionAndCheckErrors+0xcba>
    3278:	8d 81       	ldd	r24, Y+5	; 0x05
    327a:	88 2f       	mov	r24, r24
    327c:	90 e0       	ldi	r25, 0x00	; 0
    327e:	01 96       	adiw	r24, 0x01	; 1
    3280:	fc 01       	movw	r30, r24
    3282:	e5 54       	subi	r30, 0x45	; 69
    3284:	fe 4f       	sbci	r31, 0xFE	; 254
    3286:	80 81       	ld	r24, Z
    3288:	8d 32       	cpi	r24, 0x2D	; 45
    328a:	09 f0       	breq	.+2      	; 0x328e <CleanExpressionAndCheckErrors+0xbd8>
    328c:	71 c0       	rjmp	.+226    	; 0x3370 <CleanExpressionAndCheckErrors+0xcba>
			 {
				REARRANGE_EXPRESSION('*',i);
    328e:	8d 81       	ldd	r24, Y+5	; 0x05
    3290:	88 2f       	mov	r24, r24
    3292:	90 e0       	ldi	r25, 0x00	; 0
    3294:	fc 01       	movw	r30, r24
    3296:	e5 54       	subi	r30, 0x45	; 69
    3298:	fe 4f       	sbci	r31, 0xFE	; 254
    329a:	8a e2       	ldi	r24, 0x2A	; 42
    329c:	80 83       	st	Z, r24
    329e:	8d 81       	ldd	r24, Y+5	; 0x05
    32a0:	8f 5f       	subi	r24, 0xFF	; 255
    32a2:	8c 83       	std	Y+4, r24	; 0x04
    32a4:	12 c0       	rjmp	.+36     	; 0x32ca <CleanExpressionAndCheckErrors+0xc14>
    32a6:	8c 81       	ldd	r24, Y+4	; 0x04
    32a8:	28 2f       	mov	r18, r24
    32aa:	30 e0       	ldi	r19, 0x00	; 0
    32ac:	8c 81       	ldd	r24, Y+4	; 0x04
    32ae:	88 2f       	mov	r24, r24
    32b0:	90 e0       	ldi	r25, 0x00	; 0
    32b2:	01 96       	adiw	r24, 0x01	; 1
    32b4:	fc 01       	movw	r30, r24
    32b6:	e5 54       	subi	r30, 0x45	; 69
    32b8:	fe 4f       	sbci	r31, 0xFE	; 254
    32ba:	80 81       	ld	r24, Z
    32bc:	f9 01       	movw	r30, r18
    32be:	e5 54       	subi	r30, 0x45	; 69
    32c0:	fe 4f       	sbci	r31, 0xFE	; 254
    32c2:	80 83       	st	Z, r24
    32c4:	8c 81       	ldd	r24, Y+4	; 0x04
    32c6:	8f 5f       	subi	r24, 0xFF	; 255
    32c8:	8c 83       	std	Y+4, r24	; 0x04
    32ca:	90 91 dd 01 	lds	r25, 0x01DD
    32ce:	8c 81       	ldd	r24, Y+4	; 0x04
    32d0:	89 17       	cp	r24, r25
    32d2:	48 f3       	brcs	.-46     	; 0x32a6 <CleanExpressionAndCheckErrors+0xbf0>
    32d4:	80 91 dd 01 	lds	r24, 0x01DD
    32d8:	81 50       	subi	r24, 0x01	; 1
    32da:	80 93 dd 01 	sts	0x01DD, r24
				for (s8 j = i-2; j>=0; j--)
    32de:	8d 81       	ldd	r24, Y+5	; 0x05
    32e0:	82 50       	subi	r24, 0x02	; 2
    32e2:	8b 83       	std	Y+3, r24	; 0x03
    32e4:	31 c0       	rjmp	.+98     	; 0x3348 <CleanExpressionAndCheckErrors+0xc92>
				{
					if (ExpressionArray[j] == '+')
    32e6:	8b 81       	ldd	r24, Y+3	; 0x03
    32e8:	99 27       	eor	r25, r25
    32ea:	87 fd       	sbrc	r24, 7
    32ec:	90 95       	com	r25
    32ee:	fc 01       	movw	r30, r24
    32f0:	e5 54       	subi	r30, 0x45	; 69
    32f2:	fe 4f       	sbci	r31, 0xFE	; 254
    32f4:	80 81       	ld	r24, Z
    32f6:	8b 32       	cpi	r24, 0x2B	; 43
    32f8:	69 f4       	brne	.+26     	; 0x3314 <CleanExpressionAndCheckErrors+0xc5e>
					{
						ExpressionArray[j] = '-';
    32fa:	8b 81       	ldd	r24, Y+3	; 0x03
    32fc:	99 27       	eor	r25, r25
    32fe:	87 fd       	sbrc	r24, 7
    3300:	90 95       	com	r25
    3302:	fc 01       	movw	r30, r24
    3304:	e5 54       	subi	r30, 0x45	; 69
    3306:	fe 4f       	sbci	r31, 0xFE	; 254
    3308:	8d e2       	ldi	r24, 0x2D	; 45
    330a:	80 83       	st	Z, r24
						flag = 1;
    330c:	81 e0       	ldi	r24, 0x01	; 1
    330e:	80 93 85 01 	sts	0x0185, r24
    3312:	1d c0       	rjmp	.+58     	; 0x334e <CleanExpressionAndCheckErrors+0xc98>
						break;
					}
					else if (ExpressionArray[j] == '-')
    3314:	8b 81       	ldd	r24, Y+3	; 0x03
    3316:	99 27       	eor	r25, r25
    3318:	87 fd       	sbrc	r24, 7
    331a:	90 95       	com	r25
    331c:	fc 01       	movw	r30, r24
    331e:	e5 54       	subi	r30, 0x45	; 69
    3320:	fe 4f       	sbci	r31, 0xFE	; 254
    3322:	80 81       	ld	r24, Z
    3324:	8d 32       	cpi	r24, 0x2D	; 45
    3326:	69 f4       	brne	.+26     	; 0x3342 <CleanExpressionAndCheckErrors+0xc8c>
					{
						ExpressionArray[j]  = '+';
    3328:	8b 81       	ldd	r24, Y+3	; 0x03
    332a:	99 27       	eor	r25, r25
    332c:	87 fd       	sbrc	r24, 7
    332e:	90 95       	com	r25
    3330:	fc 01       	movw	r30, r24
    3332:	e5 54       	subi	r30, 0x45	; 69
    3334:	fe 4f       	sbci	r31, 0xFE	; 254
    3336:	8b e2       	ldi	r24, 0x2B	; 43
    3338:	80 83       	st	Z, r24
						flag = 1;
    333a:	81 e0       	ldi	r24, 0x01	; 1
    333c:	80 93 85 01 	sts	0x0185, r24
    3340:	06 c0       	rjmp	.+12     	; 0x334e <CleanExpressionAndCheckErrors+0xc98>
		for(u8 i=0;i<ExpressionCounter; i++)
		{
			if (ExpressionArray[i]=='*' && ExpressionArray[i+1] == '-')
			 {
				REARRANGE_EXPRESSION('*',i);
				for (s8 j = i-2; j>=0; j--)
    3342:	8b 81       	ldd	r24, Y+3	; 0x03
    3344:	81 50       	subi	r24, 0x01	; 1
    3346:	8b 83       	std	Y+3, r24	; 0x03
    3348:	8b 81       	ldd	r24, Y+3	; 0x03
    334a:	88 23       	and	r24, r24
    334c:	64 f6       	brge	.-104    	; 0x32e6 <CleanExpressionAndCheckErrors+0xc30>
						ExpressionArray[j]  = '+';
						flag = 1;
						break;
					}
				}
					if (!flag)
    334e:	80 91 85 01 	lds	r24, 0x0185
    3352:	88 23       	and	r24, r24
    3354:	39 f4       	brne	.+14     	; 0x3364 <CleanExpressionAndCheckErrors+0xcae>
						NegativeFlag ^= 1;
    3356:	80 91 af 01 	lds	r24, 0x01AF
    335a:	91 e0       	ldi	r25, 0x01	; 1
    335c:	89 27       	eor	r24, r25
    335e:	80 93 af 01 	sts	0x01AF, r24
    3362:	02 c0       	rjmp	.+4      	; 0x3368 <CleanExpressionAndCheckErrors+0xcb2>
					else
						flag =0;
    3364:	10 92 85 01 	sts	0x0185, r1
				i--;
    3368:	8d 81       	ldd	r24, Y+5	; 0x05
    336a:	81 50       	subi	r24, 0x01	; 1
    336c:	8d 83       	std	Y+5, r24	; 0x05
    336e:	85 c0       	rjmp	.+266    	; 0x347a <CleanExpressionAndCheckErrors+0xdc4>
			 }
			else if (ExpressionArray[i] == '/' && ExpressionArray[i+1] == '-')
    3370:	8d 81       	ldd	r24, Y+5	; 0x05
    3372:	88 2f       	mov	r24, r24
    3374:	90 e0       	ldi	r25, 0x00	; 0
    3376:	fc 01       	movw	r30, r24
    3378:	e5 54       	subi	r30, 0x45	; 69
    337a:	fe 4f       	sbci	r31, 0xFE	; 254
    337c:	80 81       	ld	r24, Z
    337e:	8f 32       	cpi	r24, 0x2F	; 47
    3380:	09 f0       	breq	.+2      	; 0x3384 <CleanExpressionAndCheckErrors+0xcce>
    3382:	7b c0       	rjmp	.+246    	; 0x347a <CleanExpressionAndCheckErrors+0xdc4>
    3384:	8d 81       	ldd	r24, Y+5	; 0x05
    3386:	88 2f       	mov	r24, r24
    3388:	90 e0       	ldi	r25, 0x00	; 0
    338a:	01 96       	adiw	r24, 0x01	; 1
    338c:	fc 01       	movw	r30, r24
    338e:	e5 54       	subi	r30, 0x45	; 69
    3390:	fe 4f       	sbci	r31, 0xFE	; 254
    3392:	80 81       	ld	r24, Z
    3394:	8d 32       	cpi	r24, 0x2D	; 45
    3396:	09 f0       	breq	.+2      	; 0x339a <CleanExpressionAndCheckErrors+0xce4>
    3398:	70 c0       	rjmp	.+224    	; 0x347a <CleanExpressionAndCheckErrors+0xdc4>
			{
				REARRANGE_EXPRESSION('/',i);
    339a:	8d 81       	ldd	r24, Y+5	; 0x05
    339c:	88 2f       	mov	r24, r24
    339e:	90 e0       	ldi	r25, 0x00	; 0
    33a0:	fc 01       	movw	r30, r24
    33a2:	e5 54       	subi	r30, 0x45	; 69
    33a4:	fe 4f       	sbci	r31, 0xFE	; 254
    33a6:	8f e2       	ldi	r24, 0x2F	; 47
    33a8:	80 83       	st	Z, r24
    33aa:	8d 81       	ldd	r24, Y+5	; 0x05
    33ac:	8f 5f       	subi	r24, 0xFF	; 255
    33ae:	8a 83       	std	Y+2, r24	; 0x02
    33b0:	12 c0       	rjmp	.+36     	; 0x33d6 <CleanExpressionAndCheckErrors+0xd20>
    33b2:	8a 81       	ldd	r24, Y+2	; 0x02
    33b4:	28 2f       	mov	r18, r24
    33b6:	30 e0       	ldi	r19, 0x00	; 0
    33b8:	8a 81       	ldd	r24, Y+2	; 0x02
    33ba:	88 2f       	mov	r24, r24
    33bc:	90 e0       	ldi	r25, 0x00	; 0
    33be:	01 96       	adiw	r24, 0x01	; 1
    33c0:	fc 01       	movw	r30, r24
    33c2:	e5 54       	subi	r30, 0x45	; 69
    33c4:	fe 4f       	sbci	r31, 0xFE	; 254
    33c6:	80 81       	ld	r24, Z
    33c8:	f9 01       	movw	r30, r18
    33ca:	e5 54       	subi	r30, 0x45	; 69
    33cc:	fe 4f       	sbci	r31, 0xFE	; 254
    33ce:	80 83       	st	Z, r24
    33d0:	8a 81       	ldd	r24, Y+2	; 0x02
    33d2:	8f 5f       	subi	r24, 0xFF	; 255
    33d4:	8a 83       	std	Y+2, r24	; 0x02
    33d6:	90 91 dd 01 	lds	r25, 0x01DD
    33da:	8a 81       	ldd	r24, Y+2	; 0x02
    33dc:	89 17       	cp	r24, r25
    33de:	48 f3       	brcs	.-46     	; 0x33b2 <CleanExpressionAndCheckErrors+0xcfc>
    33e0:	80 91 dd 01 	lds	r24, 0x01DD
    33e4:	81 50       	subi	r24, 0x01	; 1
    33e6:	80 93 dd 01 	sts	0x01DD, r24
				for (s8 j = i-2; j>=0; j--)
    33ea:	8d 81       	ldd	r24, Y+5	; 0x05
    33ec:	82 50       	subi	r24, 0x02	; 2
    33ee:	89 83       	std	Y+1, r24	; 0x01
    33f0:	31 c0       	rjmp	.+98     	; 0x3454 <CleanExpressionAndCheckErrors+0xd9e>
				{
					if (ExpressionArray[j] == '+')
    33f2:	89 81       	ldd	r24, Y+1	; 0x01
    33f4:	99 27       	eor	r25, r25
    33f6:	87 fd       	sbrc	r24, 7
    33f8:	90 95       	com	r25
    33fa:	fc 01       	movw	r30, r24
    33fc:	e5 54       	subi	r30, 0x45	; 69
    33fe:	fe 4f       	sbci	r31, 0xFE	; 254
    3400:	80 81       	ld	r24, Z
    3402:	8b 32       	cpi	r24, 0x2B	; 43
    3404:	69 f4       	brne	.+26     	; 0x3420 <CleanExpressionAndCheckErrors+0xd6a>
					{
						ExpressionArray[j] = '-';
    3406:	89 81       	ldd	r24, Y+1	; 0x01
    3408:	99 27       	eor	r25, r25
    340a:	87 fd       	sbrc	r24, 7
    340c:	90 95       	com	r25
    340e:	fc 01       	movw	r30, r24
    3410:	e5 54       	subi	r30, 0x45	; 69
    3412:	fe 4f       	sbci	r31, 0xFE	; 254
    3414:	8d e2       	ldi	r24, 0x2D	; 45
    3416:	80 83       	st	Z, r24
						flag = 1;
    3418:	81 e0       	ldi	r24, 0x01	; 1
    341a:	80 93 85 01 	sts	0x0185, r24
    341e:	1d c0       	rjmp	.+58     	; 0x345a <CleanExpressionAndCheckErrors+0xda4>
						break;
					}
					else if (ExpressionArray[j] == '-')
    3420:	89 81       	ldd	r24, Y+1	; 0x01
    3422:	99 27       	eor	r25, r25
    3424:	87 fd       	sbrc	r24, 7
    3426:	90 95       	com	r25
    3428:	fc 01       	movw	r30, r24
    342a:	e5 54       	subi	r30, 0x45	; 69
    342c:	fe 4f       	sbci	r31, 0xFE	; 254
    342e:	80 81       	ld	r24, Z
    3430:	8d 32       	cpi	r24, 0x2D	; 45
    3432:	69 f4       	brne	.+26     	; 0x344e <CleanExpressionAndCheckErrors+0xd98>
					{
						ExpressionArray[j]  = '+';
    3434:	89 81       	ldd	r24, Y+1	; 0x01
    3436:	99 27       	eor	r25, r25
    3438:	87 fd       	sbrc	r24, 7
    343a:	90 95       	com	r25
    343c:	fc 01       	movw	r30, r24
    343e:	e5 54       	subi	r30, 0x45	; 69
    3440:	fe 4f       	sbci	r31, 0xFE	; 254
    3442:	8b e2       	ldi	r24, 0x2B	; 43
    3444:	80 83       	st	Z, r24
						flag = 1;
    3446:	81 e0       	ldi	r24, 0x01	; 1
    3448:	80 93 85 01 	sts	0x0185, r24
    344c:	06 c0       	rjmp	.+12     	; 0x345a <CleanExpressionAndCheckErrors+0xda4>
				i--;
			 }
			else if (ExpressionArray[i] == '/' && ExpressionArray[i+1] == '-')
			{
				REARRANGE_EXPRESSION('/',i);
				for (s8 j = i-2; j>=0; j--)
    344e:	89 81       	ldd	r24, Y+1	; 0x01
    3450:	81 50       	subi	r24, 0x01	; 1
    3452:	89 83       	std	Y+1, r24	; 0x01
    3454:	89 81       	ldd	r24, Y+1	; 0x01
    3456:	88 23       	and	r24, r24
    3458:	64 f6       	brge	.-104    	; 0x33f2 <CleanExpressionAndCheckErrors+0xd3c>
						ExpressionArray[j]  = '+';
						flag = 1;
						break;
					}
				}
					if (!flag)
    345a:	80 91 85 01 	lds	r24, 0x0185
    345e:	88 23       	and	r24, r24
    3460:	39 f4       	brne	.+14     	; 0x3470 <CleanExpressionAndCheckErrors+0xdba>
						NegativeFlag ^= 1;
    3462:	80 91 af 01 	lds	r24, 0x01AF
    3466:	91 e0       	ldi	r25, 0x01	; 1
    3468:	89 27       	eor	r24, r25
    346a:	80 93 af 01 	sts	0x01AF, r24
    346e:	02 c0       	rjmp	.+4      	; 0x3474 <CleanExpressionAndCheckErrors+0xdbe>
					else
						flag =0;
    3470:	10 92 85 01 	sts	0x0185, r1
				i--;
    3474:	8d 81       	ldd	r24, Y+5	; 0x05
    3476:	81 50       	subi	r24, 0x01	; 1
    3478:	8d 83       	std	Y+5, r24	; 0x05
		else if (ExpressionArray[i] == '.' && ExpressionArray[i+1] == '/')
		{
			REARRANGE_EXPRESSION('/',i);	i--;
		}
	}
		for(u8 i=0;i<ExpressionCounter; i++)
    347a:	8d 81       	ldd	r24, Y+5	; 0x05
    347c:	8f 5f       	subi	r24, 0xFF	; 255
    347e:	8d 83       	std	Y+5, r24	; 0x05
    3480:	90 91 dd 01 	lds	r25, 0x01DD
    3484:	8d 81       	ldd	r24, Y+5	; 0x05
    3486:	89 17       	cp	r24, r25
    3488:	08 f4       	brcc	.+2      	; 0x348c <CleanExpressionAndCheckErrors+0xdd6>
    348a:	ec ce       	rjmp	.-552    	; 0x3264 <CleanExpressionAndCheckErrors+0xbae>
					else
						flag =0;
				i--;
			}
		}
}
    348c:	6b 96       	adiw	r28, 0x1b	; 27
    348e:	0f b6       	in	r0, 0x3f	; 63
    3490:	f8 94       	cli
    3492:	de bf       	out	0x3e, r29	; 62
    3494:	0f be       	out	0x3f, r0	; 63
    3496:	cd bf       	out	0x3d, r28	; 61
    3498:	cf 91       	pop	r28
    349a:	df 91       	pop	r29
    349c:	08 95       	ret

0000349e <TranslateExpression>:

void TranslateExpression()
{
    349e:	cf 92       	push	r12
    34a0:	df 92       	push	r13
    34a2:	ef 92       	push	r14
    34a4:	ff 92       	push	r15
    34a6:	0f 93       	push	r16
    34a8:	1f 93       	push	r17
    34aa:	df 93       	push	r29
    34ac:	cf 93       	push	r28
    34ae:	00 d0       	rcall	.+0      	; 0x34b0 <TranslateExpression+0x12>
    34b0:	0f 92       	push	r0
    34b2:	cd b7       	in	r28, 0x3d	; 61
    34b4:	de b7       	in	r29, 0x3e	; 62
	for(u8 i =0; i<ExpressionCounter; i++)
    34b6:	19 82       	std	Y+1, r1	; 0x01
    34b8:	51 c1       	rjmp	.+674    	; 0x375c <TranslateExpression+0x2be>
	{
		if ((ExpressionArray[i] >= '0') && (ExpressionArray[i] <='9'))
    34ba:	89 81       	ldd	r24, Y+1	; 0x01
    34bc:	88 2f       	mov	r24, r24
    34be:	90 e0       	ldi	r25, 0x00	; 0
    34c0:	fc 01       	movw	r30, r24
    34c2:	e5 54       	subi	r30, 0x45	; 69
    34c4:	fe 4f       	sbci	r31, 0xFE	; 254
    34c6:	80 81       	ld	r24, Z
    34c8:	80 33       	cpi	r24, 0x30	; 48
    34ca:	08 f4       	brcc	.+2      	; 0x34ce <TranslateExpression+0x30>
    34cc:	cb c0       	rjmp	.+406    	; 0x3664 <TranslateExpression+0x1c6>
    34ce:	89 81       	ldd	r24, Y+1	; 0x01
    34d0:	88 2f       	mov	r24, r24
    34d2:	90 e0       	ldi	r25, 0x00	; 0
    34d4:	fc 01       	movw	r30, r24
    34d6:	e5 54       	subi	r30, 0x45	; 69
    34d8:	fe 4f       	sbci	r31, 0xFE	; 254
    34da:	80 81       	ld	r24, Z
    34dc:	8a 33       	cpi	r24, 0x3A	; 58
    34de:	08 f0       	brcs	.+2      	; 0x34e2 <TranslateExpression+0x44>
    34e0:	c1 c0       	rjmp	.+386    	; 0x3664 <TranslateExpression+0x1c6>
		{
			if(!DecimalFlag)
    34e2:	80 91 86 01 	lds	r24, 0x0186
    34e6:	88 23       	and	r24, r24
    34e8:	09 f0       	breq	.+2      	; 0x34ec <TranslateExpression+0x4e>
    34ea:	54 c0       	rjmp	.+168    	; 0x3594 <TranslateExpression+0xf6>
			{
				NumbersArray[Counter] = NumbersArray[Counter] * 10 + (ExpressionArray[i]  - '0');
    34ec:	80 91 ba 01 	lds	r24, 0x01BA
    34f0:	c8 2e       	mov	r12, r24
    34f2:	dd 24       	eor	r13, r13
    34f4:	80 91 ba 01 	lds	r24, 0x01BA
    34f8:	88 2f       	mov	r24, r24
    34fa:	90 e0       	ldi	r25, 0x00	; 0
    34fc:	88 0f       	add	r24, r24
    34fe:	99 1f       	adc	r25, r25
    3500:	88 0f       	add	r24, r24
    3502:	99 1f       	adc	r25, r25
    3504:	fc 01       	movw	r30, r24
    3506:	e9 57       	subi	r30, 0x79	; 121
    3508:	fe 4f       	sbci	r31, 0xFE	; 254
    350a:	80 81       	ld	r24, Z
    350c:	91 81       	ldd	r25, Z+1	; 0x01
    350e:	a2 81       	ldd	r26, Z+2	; 0x02
    3510:	b3 81       	ldd	r27, Z+3	; 0x03
    3512:	bc 01       	movw	r22, r24
    3514:	cd 01       	movw	r24, r26
    3516:	20 e0       	ldi	r18, 0x00	; 0
    3518:	30 e0       	ldi	r19, 0x00	; 0
    351a:	40 e2       	ldi	r20, 0x20	; 32
    351c:	51 e4       	ldi	r21, 0x41	; 65
    351e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3522:	dc 01       	movw	r26, r24
    3524:	cb 01       	movw	r24, r22
    3526:	7c 01       	movw	r14, r24
    3528:	8d 01       	movw	r16, r26
    352a:	89 81       	ldd	r24, Y+1	; 0x01
    352c:	88 2f       	mov	r24, r24
    352e:	90 e0       	ldi	r25, 0x00	; 0
    3530:	fc 01       	movw	r30, r24
    3532:	e5 54       	subi	r30, 0x45	; 69
    3534:	fe 4f       	sbci	r31, 0xFE	; 254
    3536:	80 81       	ld	r24, Z
    3538:	88 2f       	mov	r24, r24
    353a:	90 e0       	ldi	r25, 0x00	; 0
    353c:	c0 97       	sbiw	r24, 0x30	; 48
    353e:	aa 27       	eor	r26, r26
    3540:	97 fd       	sbrc	r25, 7
    3542:	a0 95       	com	r26
    3544:	ba 2f       	mov	r27, r26
    3546:	bc 01       	movw	r22, r24
    3548:	cd 01       	movw	r24, r26
    354a:	0e 94 b5 04 	call	0x96a	; 0x96a <__floatsisf>
    354e:	9b 01       	movw	r18, r22
    3550:	ac 01       	movw	r20, r24
    3552:	c8 01       	movw	r24, r16
    3554:	b7 01       	movw	r22, r14
    3556:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    355a:	dc 01       	movw	r26, r24
    355c:	cb 01       	movw	r24, r22
    355e:	9c 01       	movw	r18, r24
    3560:	ad 01       	movw	r20, r26
    3562:	c6 01       	movw	r24, r12
    3564:	88 0f       	add	r24, r24
    3566:	99 1f       	adc	r25, r25
    3568:	88 0f       	add	r24, r24
    356a:	99 1f       	adc	r25, r25
    356c:	fc 01       	movw	r30, r24
    356e:	e9 57       	subi	r30, 0x79	; 121
    3570:	fe 4f       	sbci	r31, 0xFE	; 254
    3572:	20 83       	st	Z, r18
    3574:	31 83       	std	Z+1, r19	; 0x01
    3576:	42 83       	std	Z+2, r20	; 0x02
    3578:	53 83       	std	Z+3, r21	; 0x03
				DecimalPlace = 0.1;
    357a:	8d ec       	ldi	r24, 0xCD	; 205
    357c:	9c ec       	ldi	r25, 0xCC	; 204
    357e:	ac ec       	ldi	r26, 0xCC	; 204
    3580:	bd e3       	ldi	r27, 0x3D	; 61
    3582:	80 93 cf 01 	sts	0x01CF, r24
    3586:	90 93 d0 01 	sts	0x01D0, r25
    358a:	a0 93 d1 01 	sts	0x01D1, r26
    358e:	b0 93 d2 01 	sts	0x01D2, r27
    3592:	e1 c0       	rjmp	.+450    	; 0x3756 <TranslateExpression+0x2b8>
			}
			else
			{
				DecimalFlag = 0;
    3594:	10 92 86 01 	sts	0x0186, r1
				NumbersArray[Counter] = NumbersArray[Counter] + (ExpressionArray[i] - '0')*DecimalPlace;
    3598:	80 91 ba 01 	lds	r24, 0x01BA
    359c:	c8 2e       	mov	r12, r24
    359e:	dd 24       	eor	r13, r13
    35a0:	80 91 ba 01 	lds	r24, 0x01BA
    35a4:	88 2f       	mov	r24, r24
    35a6:	90 e0       	ldi	r25, 0x00	; 0
    35a8:	88 0f       	add	r24, r24
    35aa:	99 1f       	adc	r25, r25
    35ac:	88 0f       	add	r24, r24
    35ae:	99 1f       	adc	r25, r25
    35b0:	fc 01       	movw	r30, r24
    35b2:	e9 57       	subi	r30, 0x79	; 121
    35b4:	fe 4f       	sbci	r31, 0xFE	; 254
    35b6:	e0 80       	ld	r14, Z
    35b8:	f1 80       	ldd	r15, Z+1	; 0x01
    35ba:	02 81       	ldd	r16, Z+2	; 0x02
    35bc:	13 81       	ldd	r17, Z+3	; 0x03
    35be:	89 81       	ldd	r24, Y+1	; 0x01
    35c0:	88 2f       	mov	r24, r24
    35c2:	90 e0       	ldi	r25, 0x00	; 0
    35c4:	fc 01       	movw	r30, r24
    35c6:	e5 54       	subi	r30, 0x45	; 69
    35c8:	fe 4f       	sbci	r31, 0xFE	; 254
    35ca:	80 81       	ld	r24, Z
    35cc:	88 2f       	mov	r24, r24
    35ce:	90 e0       	ldi	r25, 0x00	; 0
    35d0:	c0 97       	sbiw	r24, 0x30	; 48
    35d2:	aa 27       	eor	r26, r26
    35d4:	97 fd       	sbrc	r25, 7
    35d6:	a0 95       	com	r26
    35d8:	ba 2f       	mov	r27, r26
    35da:	bc 01       	movw	r22, r24
    35dc:	cd 01       	movw	r24, r26
    35de:	0e 94 b5 04 	call	0x96a	; 0x96a <__floatsisf>
    35e2:	dc 01       	movw	r26, r24
    35e4:	cb 01       	movw	r24, r22
    35e6:	20 91 cf 01 	lds	r18, 0x01CF
    35ea:	30 91 d0 01 	lds	r19, 0x01D0
    35ee:	40 91 d1 01 	lds	r20, 0x01D1
    35f2:	50 91 d2 01 	lds	r21, 0x01D2
    35f6:	bc 01       	movw	r22, r24
    35f8:	cd 01       	movw	r24, r26
    35fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35fe:	dc 01       	movw	r26, r24
    3600:	cb 01       	movw	r24, r22
    3602:	9c 01       	movw	r18, r24
    3604:	ad 01       	movw	r20, r26
    3606:	c8 01       	movw	r24, r16
    3608:	b7 01       	movw	r22, r14
    360a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    360e:	dc 01       	movw	r26, r24
    3610:	cb 01       	movw	r24, r22
    3612:	9c 01       	movw	r18, r24
    3614:	ad 01       	movw	r20, r26
    3616:	c6 01       	movw	r24, r12
    3618:	88 0f       	add	r24, r24
    361a:	99 1f       	adc	r25, r25
    361c:	88 0f       	add	r24, r24
    361e:	99 1f       	adc	r25, r25
    3620:	fc 01       	movw	r30, r24
    3622:	e9 57       	subi	r30, 0x79	; 121
    3624:	fe 4f       	sbci	r31, 0xFE	; 254
    3626:	20 83       	st	Z, r18
    3628:	31 83       	std	Z+1, r19	; 0x01
    362a:	42 83       	std	Z+2, r20	; 0x02
    362c:	53 83       	std	Z+3, r21	; 0x03
				DecimalPlace *= 0.1;
    362e:	80 91 cf 01 	lds	r24, 0x01CF
    3632:	90 91 d0 01 	lds	r25, 0x01D0
    3636:	a0 91 d1 01 	lds	r26, 0x01D1
    363a:	b0 91 d2 01 	lds	r27, 0x01D2
    363e:	bc 01       	movw	r22, r24
    3640:	cd 01       	movw	r24, r26
    3642:	2d ec       	ldi	r18, 0xCD	; 205
    3644:	3c ec       	ldi	r19, 0xCC	; 204
    3646:	4c ec       	ldi	r20, 0xCC	; 204
    3648:	5d e3       	ldi	r21, 0x3D	; 61
    364a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    364e:	dc 01       	movw	r26, r24
    3650:	cb 01       	movw	r24, r22
    3652:	80 93 cf 01 	sts	0x01CF, r24
    3656:	90 93 d0 01 	sts	0x01D0, r25
    365a:	a0 93 d1 01 	sts	0x01D1, r26
    365e:	b0 93 d2 01 	sts	0x01D2, r27
    3662:	79 c0       	rjmp	.+242    	; 0x3756 <TranslateExpression+0x2b8>
			}
		}
		else
		{
			DecimalPlace = 0.1;
    3664:	8d ec       	ldi	r24, 0xCD	; 205
    3666:	9c ec       	ldi	r25, 0xCC	; 204
    3668:	ac ec       	ldi	r26, 0xCC	; 204
    366a:	bd e3       	ldi	r27, 0x3D	; 61
    366c:	80 93 cf 01 	sts	0x01CF, r24
    3670:	90 93 d0 01 	sts	0x01D0, r25
    3674:	a0 93 d1 01 	sts	0x01D1, r26
    3678:	b0 93 d2 01 	sts	0x01D2, r27
			DecimalFlag = 0;
    367c:	10 92 86 01 	sts	0x0186, r1
			switch(ExpressionArray[i])
    3680:	89 81       	ldd	r24, Y+1	; 0x01
    3682:	88 2f       	mov	r24, r24
    3684:	90 e0       	ldi	r25, 0x00	; 0
    3686:	fc 01       	movw	r30, r24
    3688:	e5 54       	subi	r30, 0x45	; 69
    368a:	fe 4f       	sbci	r31, 0xFE	; 254
    368c:	80 81       	ld	r24, Z
    368e:	28 2f       	mov	r18, r24
    3690:	30 e0       	ldi	r19, 0x00	; 0
    3692:	3b 83       	std	Y+3, r19	; 0x03
    3694:	2a 83       	std	Y+2, r18	; 0x02
    3696:	8a 81       	ldd	r24, Y+2	; 0x02
    3698:	9b 81       	ldd	r25, Y+3	; 0x03
    369a:	8d 32       	cpi	r24, 0x2D	; 45
    369c:	91 05       	cpc	r25, r1
    369e:	59 f1       	breq	.+86     	; 0x36f6 <TranslateExpression+0x258>
    36a0:	2a 81       	ldd	r18, Y+2	; 0x02
    36a2:	3b 81       	ldd	r19, Y+3	; 0x03
    36a4:	2e 32       	cpi	r18, 0x2E	; 46
    36a6:	31 05       	cpc	r19, r1
    36a8:	5c f4       	brge	.+22     	; 0x36c0 <TranslateExpression+0x222>
    36aa:	8a 81       	ldd	r24, Y+2	; 0x02
    36ac:	9b 81       	ldd	r25, Y+3	; 0x03
    36ae:	8a 32       	cpi	r24, 0x2A	; 42
    36b0:	91 05       	cpc	r25, r1
    36b2:	81 f1       	breq	.+96     	; 0x3714 <TranslateExpression+0x276>
    36b4:	2a 81       	ldd	r18, Y+2	; 0x02
    36b6:	3b 81       	ldd	r19, Y+3	; 0x03
    36b8:	2b 32       	cpi	r18, 0x2B	; 43
    36ba:	31 05       	cpc	r19, r1
    36bc:	69 f0       	breq	.+26     	; 0x36d8 <TranslateExpression+0x23a>
    36be:	4b c0       	rjmp	.+150    	; 0x3756 <TranslateExpression+0x2b8>
    36c0:	8a 81       	ldd	r24, Y+2	; 0x02
    36c2:	9b 81       	ldd	r25, Y+3	; 0x03
    36c4:	8e 32       	cpi	r24, 0x2E	; 46
    36c6:	91 05       	cpc	r25, r1
    36c8:	09 f4       	brne	.+2      	; 0x36cc <TranslateExpression+0x22e>
    36ca:	42 c0       	rjmp	.+132    	; 0x3750 <TranslateExpression+0x2b2>
    36cc:	2a 81       	ldd	r18, Y+2	; 0x02
    36ce:	3b 81       	ldd	r19, Y+3	; 0x03
    36d0:	2f 32       	cpi	r18, 0x2F	; 47
    36d2:	31 05       	cpc	r19, r1
    36d4:	71 f1       	breq	.+92     	; 0x3732 <TranslateExpression+0x294>
    36d6:	3f c0       	rjmp	.+126    	; 0x3756 <TranslateExpression+0x2b8>
			{
				case '+' : 	OperationsArray [Counter] = '+';
    36d8:	80 91 ba 01 	lds	r24, 0x01BA
    36dc:	88 2f       	mov	r24, r24
    36de:	90 e0       	ldi	r25, 0x00	; 0
    36e0:	fc 01       	movw	r30, r24
    36e2:	e0 55       	subi	r30, 0x50	; 80
    36e4:	fe 4f       	sbci	r31, 0xFE	; 254
    36e6:	8b e2       	ldi	r24, 0x2B	; 43
    36e8:	80 83       	st	Z, r24
							Counter ++;
    36ea:	80 91 ba 01 	lds	r24, 0x01BA
    36ee:	8f 5f       	subi	r24, 0xFF	; 255
    36f0:	80 93 ba 01 	sts	0x01BA, r24
    36f4:	30 c0       	rjmp	.+96     	; 0x3756 <TranslateExpression+0x2b8>
							break;
				case '-' : 	OperationsArray [Counter] = '-';
    36f6:	80 91 ba 01 	lds	r24, 0x01BA
    36fa:	88 2f       	mov	r24, r24
    36fc:	90 e0       	ldi	r25, 0x00	; 0
    36fe:	fc 01       	movw	r30, r24
    3700:	e0 55       	subi	r30, 0x50	; 80
    3702:	fe 4f       	sbci	r31, 0xFE	; 254
    3704:	8d e2       	ldi	r24, 0x2D	; 45
    3706:	80 83       	st	Z, r24
							Counter ++;
    3708:	80 91 ba 01 	lds	r24, 0x01BA
    370c:	8f 5f       	subi	r24, 0xFF	; 255
    370e:	80 93 ba 01 	sts	0x01BA, r24
    3712:	21 c0       	rjmp	.+66     	; 0x3756 <TranslateExpression+0x2b8>
							break;
				case '*' : 	OperationsArray [Counter] = '*';
    3714:	80 91 ba 01 	lds	r24, 0x01BA
    3718:	88 2f       	mov	r24, r24
    371a:	90 e0       	ldi	r25, 0x00	; 0
    371c:	fc 01       	movw	r30, r24
    371e:	e0 55       	subi	r30, 0x50	; 80
    3720:	fe 4f       	sbci	r31, 0xFE	; 254
    3722:	8a e2       	ldi	r24, 0x2A	; 42
    3724:	80 83       	st	Z, r24
							Counter ++;
    3726:	80 91 ba 01 	lds	r24, 0x01BA
    372a:	8f 5f       	subi	r24, 0xFF	; 255
    372c:	80 93 ba 01 	sts	0x01BA, r24
    3730:	12 c0       	rjmp	.+36     	; 0x3756 <TranslateExpression+0x2b8>
							break;
				case '/' : 	OperationsArray [Counter] = '/';
    3732:	80 91 ba 01 	lds	r24, 0x01BA
    3736:	88 2f       	mov	r24, r24
    3738:	90 e0       	ldi	r25, 0x00	; 0
    373a:	fc 01       	movw	r30, r24
    373c:	e0 55       	subi	r30, 0x50	; 80
    373e:	fe 4f       	sbci	r31, 0xFE	; 254
    3740:	8f e2       	ldi	r24, 0x2F	; 47
    3742:	80 83       	st	Z, r24
							Counter ++;
    3744:	80 91 ba 01 	lds	r24, 0x01BA
    3748:	8f 5f       	subi	r24, 0xFF	; 255
    374a:	80 93 ba 01 	sts	0x01BA, r24
    374e:	03 c0       	rjmp	.+6      	; 0x3756 <TranslateExpression+0x2b8>
							break;
				case '.' : 	DecimalFlag = 1;
    3750:	81 e0       	ldi	r24, 0x01	; 1
    3752:	80 93 86 01 	sts	0x0186, r24
		}
}

void TranslateExpression()
{
	for(u8 i =0; i<ExpressionCounter; i++)
    3756:	89 81       	ldd	r24, Y+1	; 0x01
    3758:	8f 5f       	subi	r24, 0xFF	; 255
    375a:	89 83       	std	Y+1, r24	; 0x01
    375c:	90 91 dd 01 	lds	r25, 0x01DD
    3760:	89 81       	ldd	r24, Y+1	; 0x01
    3762:	89 17       	cp	r24, r25
    3764:	08 f4       	brcc	.+2      	; 0x3768 <TranslateExpression+0x2ca>
    3766:	a9 ce       	rjmp	.-686    	; 0x34ba <TranslateExpression+0x1c>
				default  :	break;
			}
		}
	}

}
    3768:	0f 90       	pop	r0
    376a:	0f 90       	pop	r0
    376c:	0f 90       	pop	r0
    376e:	cf 91       	pop	r28
    3770:	df 91       	pop	r29
    3772:	1f 91       	pop	r17
    3774:	0f 91       	pop	r16
    3776:	ff 90       	pop	r15
    3778:	ef 90       	pop	r14
    377a:	df 90       	pop	r13
    377c:	cf 90       	pop	r12
    377e:	08 95       	ret

00003780 <PerformMultiplicationAnDivision>:

void PerformMultiplicationAnDivision()
{
    3780:	cf 92       	push	r12
    3782:	df 92       	push	r13
    3784:	ef 92       	push	r14
    3786:	ff 92       	push	r15
    3788:	0f 93       	push	r16
    378a:	1f 93       	push	r17
    378c:	df 93       	push	r29
    378e:	cf 93       	push	r28
    3790:	00 d0       	rcall	.+0      	; 0x3792 <PerformMultiplicationAnDivision+0x12>
    3792:	0f 92       	push	r0
    3794:	cd b7       	in	r28, 0x3d	; 61
    3796:	de b7       	in	r29, 0x3e	; 62
	for(u8 i =0; i<Counter; i++)
    3798:	1b 82       	std	Y+3, r1	; 0x03
    379a:	21 c1       	rjmp	.+578    	; 0x39de <PerformMultiplicationAnDivision+0x25e>
	{
		if (OperationsArray[i] == '*')
    379c:	8b 81       	ldd	r24, Y+3	; 0x03
    379e:	88 2f       	mov	r24, r24
    37a0:	90 e0       	ldi	r25, 0x00	; 0
    37a2:	fc 01       	movw	r30, r24
    37a4:	e0 55       	subi	r30, 0x50	; 80
    37a6:	fe 4f       	sbci	r31, 0xFE	; 254
    37a8:	80 81       	ld	r24, Z
    37aa:	8a 32       	cpi	r24, 0x2A	; 42
    37ac:	a9 f5       	brne	.+106    	; 0x3818 <PerformMultiplicationAnDivision+0x98>
		{
			NumbersArray[i] = NumbersArray[i]*NumbersArray[i+1];
    37ae:	8b 81       	ldd	r24, Y+3	; 0x03
    37b0:	c8 2e       	mov	r12, r24
    37b2:	dd 24       	eor	r13, r13
    37b4:	8b 81       	ldd	r24, Y+3	; 0x03
    37b6:	88 2f       	mov	r24, r24
    37b8:	90 e0       	ldi	r25, 0x00	; 0
    37ba:	88 0f       	add	r24, r24
    37bc:	99 1f       	adc	r25, r25
    37be:	88 0f       	add	r24, r24
    37c0:	99 1f       	adc	r25, r25
    37c2:	fc 01       	movw	r30, r24
    37c4:	e9 57       	subi	r30, 0x79	; 121
    37c6:	fe 4f       	sbci	r31, 0xFE	; 254
    37c8:	e0 80       	ld	r14, Z
    37ca:	f1 80       	ldd	r15, Z+1	; 0x01
    37cc:	02 81       	ldd	r16, Z+2	; 0x02
    37ce:	13 81       	ldd	r17, Z+3	; 0x03
    37d0:	8b 81       	ldd	r24, Y+3	; 0x03
    37d2:	88 2f       	mov	r24, r24
    37d4:	90 e0       	ldi	r25, 0x00	; 0
    37d6:	01 96       	adiw	r24, 0x01	; 1
    37d8:	88 0f       	add	r24, r24
    37da:	99 1f       	adc	r25, r25
    37dc:	88 0f       	add	r24, r24
    37de:	99 1f       	adc	r25, r25
    37e0:	fc 01       	movw	r30, r24
    37e2:	e9 57       	subi	r30, 0x79	; 121
    37e4:	fe 4f       	sbci	r31, 0xFE	; 254
    37e6:	20 81       	ld	r18, Z
    37e8:	31 81       	ldd	r19, Z+1	; 0x01
    37ea:	42 81       	ldd	r20, Z+2	; 0x02
    37ec:	53 81       	ldd	r21, Z+3	; 0x03
    37ee:	c8 01       	movw	r24, r16
    37f0:	b7 01       	movw	r22, r14
    37f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37f6:	dc 01       	movw	r26, r24
    37f8:	cb 01       	movw	r24, r22
    37fa:	9c 01       	movw	r18, r24
    37fc:	ad 01       	movw	r20, r26
    37fe:	c6 01       	movw	r24, r12
    3800:	88 0f       	add	r24, r24
    3802:	99 1f       	adc	r25, r25
    3804:	88 0f       	add	r24, r24
    3806:	99 1f       	adc	r25, r25
    3808:	fc 01       	movw	r30, r24
    380a:	e9 57       	subi	r30, 0x79	; 121
    380c:	fe 4f       	sbci	r31, 0xFE	; 254
    380e:	20 83       	st	Z, r18
    3810:	31 83       	std	Z+1, r19	; 0x01
    3812:	42 83       	std	Z+2, r20	; 0x02
    3814:	53 83       	std	Z+3, r21	; 0x03
    3816:	9d c0       	rjmp	.+314    	; 0x3952 <PerformMultiplicationAnDivision+0x1d2>
		}
		else if (OperationsArray[i] == '/')
    3818:	8b 81       	ldd	r24, Y+3	; 0x03
    381a:	88 2f       	mov	r24, r24
    381c:	90 e0       	ldi	r25, 0x00	; 0
    381e:	fc 01       	movw	r30, r24
    3820:	e0 55       	subi	r30, 0x50	; 80
    3822:	fe 4f       	sbci	r31, 0xFE	; 254
    3824:	80 81       	ld	r24, Z
    3826:	8f 32       	cpi	r24, 0x2F	; 47
    3828:	09 f0       	breq	.+2      	; 0x382c <PerformMultiplicationAnDivision+0xac>
    382a:	d6 c0       	rjmp	.+428    	; 0x39d8 <PerformMultiplicationAnDivision+0x258>
		{
			if (NumbersArray[i+1] == (float)0)
    382c:	8b 81       	ldd	r24, Y+3	; 0x03
    382e:	88 2f       	mov	r24, r24
    3830:	90 e0       	ldi	r25, 0x00	; 0
    3832:	01 96       	adiw	r24, 0x01	; 1
    3834:	88 0f       	add	r24, r24
    3836:	99 1f       	adc	r25, r25
    3838:	88 0f       	add	r24, r24
    383a:	99 1f       	adc	r25, r25
    383c:	fc 01       	movw	r30, r24
    383e:	e9 57       	subi	r30, 0x79	; 121
    3840:	fe 4f       	sbci	r31, 0xFE	; 254
    3842:	80 81       	ld	r24, Z
    3844:	91 81       	ldd	r25, Z+1	; 0x01
    3846:	a2 81       	ldd	r26, Z+2	; 0x02
    3848:	b3 81       	ldd	r27, Z+3	; 0x03
    384a:	bc 01       	movw	r22, r24
    384c:	cd 01       	movw	r24, r26
    384e:	20 e0       	ldi	r18, 0x00	; 0
    3850:	30 e0       	ldi	r19, 0x00	; 0
    3852:	40 e0       	ldi	r20, 0x00	; 0
    3854:	50 e0       	ldi	r21, 0x00	; 0
    3856:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    385a:	88 23       	and	r24, r24
    385c:	09 f0       	breq	.+2      	; 0x3860 <PerformMultiplicationAnDivision+0xe0>
    385e:	45 c0       	rjmp	.+138    	; 0x38ea <PerformMultiplicationAnDivision+0x16a>
			{
				MATHERROR();
    3860:	82 e0       	ldi	r24, 0x02	; 2
    3862:	64 e0       	ldi	r22, 0x04	; 4
    3864:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <CLCD_voidGoToRowColumn>
    3868:	80 e6       	ldi	r24, 0x60	; 96
    386a:	90 e0       	ldi	r25, 0x00	; 0
    386c:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <CLCD_voidSendString>
    3870:	1a 82       	std	Y+2, r1	; 0x02
    3872:	23 c0       	rjmp	.+70     	; 0x38ba <PerformMultiplicationAnDivision+0x13a>
    3874:	8a 81       	ldd	r24, Y+2	; 0x02
    3876:	88 2f       	mov	r24, r24
    3878:	90 e0       	ldi	r25, 0x00	; 0
    387a:	fc 01       	movw	r30, r24
    387c:	e0 55       	subi	r30, 0x50	; 80
    387e:	fe 4f       	sbci	r31, 0xFE	; 254
    3880:	10 82       	st	Z, r1
    3882:	8a 81       	ldd	r24, Y+2	; 0x02
    3884:	88 2f       	mov	r24, r24
    3886:	90 e0       	ldi	r25, 0x00	; 0
    3888:	88 0f       	add	r24, r24
    388a:	99 1f       	adc	r25, r25
    388c:	88 0f       	add	r24, r24
    388e:	99 1f       	adc	r25, r25
    3890:	fc 01       	movw	r30, r24
    3892:	e9 57       	subi	r30, 0x79	; 121
    3894:	fe 4f       	sbci	r31, 0xFE	; 254
    3896:	80 e0       	ldi	r24, 0x00	; 0
    3898:	90 e0       	ldi	r25, 0x00	; 0
    389a:	a0 e0       	ldi	r26, 0x00	; 0
    389c:	b0 e0       	ldi	r27, 0x00	; 0
    389e:	80 83       	st	Z, r24
    38a0:	91 83       	std	Z+1, r25	; 0x01
    38a2:	a2 83       	std	Z+2, r26	; 0x02
    38a4:	b3 83       	std	Z+3, r27	; 0x03
    38a6:	8a 81       	ldd	r24, Y+2	; 0x02
    38a8:	88 2f       	mov	r24, r24
    38aa:	90 e0       	ldi	r25, 0x00	; 0
    38ac:	fc 01       	movw	r30, r24
    38ae:	ed 52       	subi	r30, 0x2D	; 45
    38b0:	fe 4f       	sbci	r31, 0xFE	; 254
    38b2:	10 82       	st	Z, r1
    38b4:	8a 81       	ldd	r24, Y+2	; 0x02
    38b6:	8f 5f       	subi	r24, 0xFF	; 255
    38b8:	8a 83       	std	Y+2, r24	; 0x02
    38ba:	8a 81       	ldd	r24, Y+2	; 0x02
    38bc:	8a 30       	cpi	r24, 0x0A	; 10
    38be:	d0 f2       	brcs	.-76     	; 0x3874 <PerformMultiplicationAnDivision+0xf4>
    38c0:	8d ec       	ldi	r24, 0xCD	; 205
    38c2:	9c ec       	ldi	r25, 0xCC	; 204
    38c4:	ac ec       	ldi	r26, 0xCC	; 204
    38c6:	bd e3       	ldi	r27, 0x3D	; 61
    38c8:	80 93 cf 01 	sts	0x01CF, r24
    38cc:	90 93 d0 01 	sts	0x01D0, r25
    38d0:	a0 93 d1 01 	sts	0x01D1, r26
    38d4:	b0 93 d2 01 	sts	0x01D2, r27
    38d8:	10 92 86 01 	sts	0x0186, r1
    38dc:	10 92 dd 01 	sts	0x01DD, r1
    38e0:	10 92 ba 01 	sts	0x01BA, r1
    38e4:	10 92 af 01 	sts	0x01AF, r1
    38e8:	80 c0       	rjmp	.+256    	; 0x39ea <PerformMultiplicationAnDivision+0x26a>
				break;
			}
			else
			{
				NumbersArray[i] = NumbersArray[i]/NumbersArray[i+1];
    38ea:	8b 81       	ldd	r24, Y+3	; 0x03
    38ec:	c8 2e       	mov	r12, r24
    38ee:	dd 24       	eor	r13, r13
    38f0:	8b 81       	ldd	r24, Y+3	; 0x03
    38f2:	88 2f       	mov	r24, r24
    38f4:	90 e0       	ldi	r25, 0x00	; 0
    38f6:	88 0f       	add	r24, r24
    38f8:	99 1f       	adc	r25, r25
    38fa:	88 0f       	add	r24, r24
    38fc:	99 1f       	adc	r25, r25
    38fe:	fc 01       	movw	r30, r24
    3900:	e9 57       	subi	r30, 0x79	; 121
    3902:	fe 4f       	sbci	r31, 0xFE	; 254
    3904:	e0 80       	ld	r14, Z
    3906:	f1 80       	ldd	r15, Z+1	; 0x01
    3908:	02 81       	ldd	r16, Z+2	; 0x02
    390a:	13 81       	ldd	r17, Z+3	; 0x03
    390c:	8b 81       	ldd	r24, Y+3	; 0x03
    390e:	88 2f       	mov	r24, r24
    3910:	90 e0       	ldi	r25, 0x00	; 0
    3912:	01 96       	adiw	r24, 0x01	; 1
    3914:	88 0f       	add	r24, r24
    3916:	99 1f       	adc	r25, r25
    3918:	88 0f       	add	r24, r24
    391a:	99 1f       	adc	r25, r25
    391c:	fc 01       	movw	r30, r24
    391e:	e9 57       	subi	r30, 0x79	; 121
    3920:	fe 4f       	sbci	r31, 0xFE	; 254
    3922:	20 81       	ld	r18, Z
    3924:	31 81       	ldd	r19, Z+1	; 0x01
    3926:	42 81       	ldd	r20, Z+2	; 0x02
    3928:	53 81       	ldd	r21, Z+3	; 0x03
    392a:	c8 01       	movw	r24, r16
    392c:	b7 01       	movw	r22, r14
    392e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3932:	dc 01       	movw	r26, r24
    3934:	cb 01       	movw	r24, r22
    3936:	9c 01       	movw	r18, r24
    3938:	ad 01       	movw	r20, r26
    393a:	c6 01       	movw	r24, r12
    393c:	88 0f       	add	r24, r24
    393e:	99 1f       	adc	r25, r25
    3940:	88 0f       	add	r24, r24
    3942:	99 1f       	adc	r25, r25
    3944:	fc 01       	movw	r30, r24
    3946:	e9 57       	subi	r30, 0x79	; 121
    3948:	fe 4f       	sbci	r31, 0xFE	; 254
    394a:	20 83       	st	Z, r18
    394c:	31 83       	std	Z+1, r19	; 0x01
    394e:	42 83       	std	Z+2, r20	; 0x02
    3950:	53 83       	std	Z+3, r21	; 0x03
		else
		{
			continue;
		}
		//REARRANGE
		REARRANGE_ARRAYS(i);
    3952:	8b 81       	ldd	r24, Y+3	; 0x03
    3954:	8f 5f       	subi	r24, 0xFF	; 255
    3956:	89 83       	std	Y+1, r24	; 0x01
    3958:	32 c0       	rjmp	.+100    	; 0x39be <PerformMultiplicationAnDivision+0x23e>
    395a:	89 81       	ldd	r24, Y+1	; 0x01
    395c:	88 2f       	mov	r24, r24
    395e:	90 e0       	ldi	r25, 0x00	; 0
    3960:	9c 01       	movw	r18, r24
    3962:	21 50       	subi	r18, 0x01	; 1
    3964:	30 40       	sbci	r19, 0x00	; 0
    3966:	89 81       	ldd	r24, Y+1	; 0x01
    3968:	88 2f       	mov	r24, r24
    396a:	90 e0       	ldi	r25, 0x00	; 0
    396c:	fc 01       	movw	r30, r24
    396e:	e0 55       	subi	r30, 0x50	; 80
    3970:	fe 4f       	sbci	r31, 0xFE	; 254
    3972:	80 81       	ld	r24, Z
    3974:	f9 01       	movw	r30, r18
    3976:	e0 55       	subi	r30, 0x50	; 80
    3978:	fe 4f       	sbci	r31, 0xFE	; 254
    397a:	80 83       	st	Z, r24
    397c:	89 81       	ldd	r24, Y+1	; 0x01
    397e:	68 2f       	mov	r22, r24
    3980:	70 e0       	ldi	r23, 0x00	; 0
    3982:	89 81       	ldd	r24, Y+1	; 0x01
    3984:	88 2f       	mov	r24, r24
    3986:	90 e0       	ldi	r25, 0x00	; 0
    3988:	01 96       	adiw	r24, 0x01	; 1
    398a:	88 0f       	add	r24, r24
    398c:	99 1f       	adc	r25, r25
    398e:	88 0f       	add	r24, r24
    3990:	99 1f       	adc	r25, r25
    3992:	fc 01       	movw	r30, r24
    3994:	e9 57       	subi	r30, 0x79	; 121
    3996:	fe 4f       	sbci	r31, 0xFE	; 254
    3998:	20 81       	ld	r18, Z
    399a:	31 81       	ldd	r19, Z+1	; 0x01
    399c:	42 81       	ldd	r20, Z+2	; 0x02
    399e:	53 81       	ldd	r21, Z+3	; 0x03
    39a0:	cb 01       	movw	r24, r22
    39a2:	88 0f       	add	r24, r24
    39a4:	99 1f       	adc	r25, r25
    39a6:	88 0f       	add	r24, r24
    39a8:	99 1f       	adc	r25, r25
    39aa:	fc 01       	movw	r30, r24
    39ac:	e9 57       	subi	r30, 0x79	; 121
    39ae:	fe 4f       	sbci	r31, 0xFE	; 254
    39b0:	20 83       	st	Z, r18
    39b2:	31 83       	std	Z+1, r19	; 0x01
    39b4:	42 83       	std	Z+2, r20	; 0x02
    39b6:	53 83       	std	Z+3, r21	; 0x03
    39b8:	89 81       	ldd	r24, Y+1	; 0x01
    39ba:	8f 5f       	subi	r24, 0xFF	; 255
    39bc:	89 83       	std	Y+1, r24	; 0x01
    39be:	90 91 ba 01 	lds	r25, 0x01BA
    39c2:	89 81       	ldd	r24, Y+1	; 0x01
    39c4:	89 17       	cp	r24, r25
    39c6:	48 f2       	brcs	.-110    	; 0x395a <PerformMultiplicationAnDivision+0x1da>
    39c8:	80 91 ba 01 	lds	r24, 0x01BA
    39cc:	81 50       	subi	r24, 0x01	; 1
    39ce:	80 93 ba 01 	sts	0x01BA, r24
		i--;
    39d2:	8b 81       	ldd	r24, Y+3	; 0x03
    39d4:	81 50       	subi	r24, 0x01	; 1
    39d6:	8b 83       	std	Y+3, r24	; 0x03

}

void PerformMultiplicationAnDivision()
{
	for(u8 i =0; i<Counter; i++)
    39d8:	8b 81       	ldd	r24, Y+3	; 0x03
    39da:	8f 5f       	subi	r24, 0xFF	; 255
    39dc:	8b 83       	std	Y+3, r24	; 0x03
    39de:	90 91 ba 01 	lds	r25, 0x01BA
    39e2:	8b 81       	ldd	r24, Y+3	; 0x03
    39e4:	89 17       	cp	r24, r25
    39e6:	08 f4       	brcc	.+2      	; 0x39ea <PerformMultiplicationAnDivision+0x26a>
    39e8:	d9 ce       	rjmp	.-590    	; 0x379c <PerformMultiplicationAnDivision+0x1c>
		}
		//REARRANGE
		REARRANGE_ARRAYS(i);
		i--;
	}
}
    39ea:	0f 90       	pop	r0
    39ec:	0f 90       	pop	r0
    39ee:	0f 90       	pop	r0
    39f0:	cf 91       	pop	r28
    39f2:	df 91       	pop	r29
    39f4:	1f 91       	pop	r17
    39f6:	0f 91       	pop	r16
    39f8:	ff 90       	pop	r15
    39fa:	ef 90       	pop	r14
    39fc:	df 90       	pop	r13
    39fe:	cf 90       	pop	r12
    3a00:	08 95       	ret

00003a02 <PerformAdditionAndSubtraction>:

void PerformAdditionAndSubtraction()
{
    3a02:	cf 92       	push	r12
    3a04:	df 92       	push	r13
    3a06:	ef 92       	push	r14
    3a08:	ff 92       	push	r15
    3a0a:	0f 93       	push	r16
    3a0c:	1f 93       	push	r17
    3a0e:	df 93       	push	r29
    3a10:	cf 93       	push	r28
    3a12:	00 d0       	rcall	.+0      	; 0x3a14 <PerformAdditionAndSubtraction+0x12>
    3a14:	00 d0       	rcall	.+0      	; 0x3a16 <PerformAdditionAndSubtraction+0x14>
    3a16:	00 d0       	rcall	.+0      	; 0x3a18 <PerformAdditionAndSubtraction+0x16>
    3a18:	cd b7       	in	r28, 0x3d	; 61
    3a1a:	de b7       	in	r29, 0x3e	; 62
	for(u8 i =0; i<Counter; i++)
    3a1c:	1a 82       	std	Y+2, r1	; 0x02
    3a1e:	66 c2       	rjmp	.+1228   	; 0x3eec <PerformAdditionAndSubtraction+0x4ea>
	{
		if (OperationsArray[i] == '+')
    3a20:	8a 81       	ldd	r24, Y+2	; 0x02
    3a22:	88 2f       	mov	r24, r24
    3a24:	90 e0       	ldi	r25, 0x00	; 0
    3a26:	fc 01       	movw	r30, r24
    3a28:	e0 55       	subi	r30, 0x50	; 80
    3a2a:	fe 4f       	sbci	r31, 0xFE	; 254
    3a2c:	80 81       	ld	r24, Z
    3a2e:	8b 32       	cpi	r24, 0x2B	; 43
    3a30:	09 f0       	breq	.+2      	; 0x3a34 <PerformAdditionAndSubtraction+0x32>
    3a32:	07 c1       	rjmp	.+526    	; 0x3c42 <PerformAdditionAndSubtraction+0x240>
		{
			if (NegativeFlag && (NumbersArray[i]>=NumbersArray[i+1]))
    3a34:	80 91 af 01 	lds	r24, 0x01AF
    3a38:	88 23       	and	r24, r24
    3a3a:	09 f4       	brne	.+2      	; 0x3a3e <PerformAdditionAndSubtraction+0x3c>
    3a3c:	60 c0       	rjmp	.+192    	; 0x3afe <PerformAdditionAndSubtraction+0xfc>
    3a3e:	8a 81       	ldd	r24, Y+2	; 0x02
    3a40:	88 2f       	mov	r24, r24
    3a42:	90 e0       	ldi	r25, 0x00	; 0
    3a44:	88 0f       	add	r24, r24
    3a46:	99 1f       	adc	r25, r25
    3a48:	88 0f       	add	r24, r24
    3a4a:	99 1f       	adc	r25, r25
    3a4c:	fc 01       	movw	r30, r24
    3a4e:	e9 57       	subi	r30, 0x79	; 121
    3a50:	fe 4f       	sbci	r31, 0xFE	; 254
    3a52:	e0 80       	ld	r14, Z
    3a54:	f1 80       	ldd	r15, Z+1	; 0x01
    3a56:	02 81       	ldd	r16, Z+2	; 0x02
    3a58:	13 81       	ldd	r17, Z+3	; 0x03
    3a5a:	8a 81       	ldd	r24, Y+2	; 0x02
    3a5c:	88 2f       	mov	r24, r24
    3a5e:	90 e0       	ldi	r25, 0x00	; 0
    3a60:	01 96       	adiw	r24, 0x01	; 1
    3a62:	88 0f       	add	r24, r24
    3a64:	99 1f       	adc	r25, r25
    3a66:	88 0f       	add	r24, r24
    3a68:	99 1f       	adc	r25, r25
    3a6a:	fc 01       	movw	r30, r24
    3a6c:	e9 57       	subi	r30, 0x79	; 121
    3a6e:	fe 4f       	sbci	r31, 0xFE	; 254
    3a70:	20 81       	ld	r18, Z
    3a72:	31 81       	ldd	r19, Z+1	; 0x01
    3a74:	42 81       	ldd	r20, Z+2	; 0x02
    3a76:	53 81       	ldd	r21, Z+3	; 0x03
    3a78:	1e 82       	std	Y+6, r1	; 0x06
    3a7a:	c8 01       	movw	r24, r16
    3a7c:	b7 01       	movw	r22, r14
    3a7e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__gesf2>
    3a82:	88 23       	and	r24, r24
    3a84:	14 f0       	brlt	.+4      	; 0x3a8a <PerformAdditionAndSubtraction+0x88>
    3a86:	81 e0       	ldi	r24, 0x01	; 1
    3a88:	8e 83       	std	Y+6, r24	; 0x06
    3a8a:	81 e0       	ldi	r24, 0x01	; 1
    3a8c:	9e 81       	ldd	r25, Y+6	; 0x06
    3a8e:	89 27       	eor	r24, r25
    3a90:	88 23       	and	r24, r24
    3a92:	a9 f5       	brne	.+106    	; 0x3afe <PerformAdditionAndSubtraction+0xfc>
			{
				NumbersArray[i] = NumbersArray[i]-NumbersArray[i+1];
    3a94:	8a 81       	ldd	r24, Y+2	; 0x02
    3a96:	c8 2e       	mov	r12, r24
    3a98:	dd 24       	eor	r13, r13
    3a9a:	8a 81       	ldd	r24, Y+2	; 0x02
    3a9c:	88 2f       	mov	r24, r24
    3a9e:	90 e0       	ldi	r25, 0x00	; 0
    3aa0:	88 0f       	add	r24, r24
    3aa2:	99 1f       	adc	r25, r25
    3aa4:	88 0f       	add	r24, r24
    3aa6:	99 1f       	adc	r25, r25
    3aa8:	fc 01       	movw	r30, r24
    3aaa:	e9 57       	subi	r30, 0x79	; 121
    3aac:	fe 4f       	sbci	r31, 0xFE	; 254
    3aae:	e0 80       	ld	r14, Z
    3ab0:	f1 80       	ldd	r15, Z+1	; 0x01
    3ab2:	02 81       	ldd	r16, Z+2	; 0x02
    3ab4:	13 81       	ldd	r17, Z+3	; 0x03
    3ab6:	8a 81       	ldd	r24, Y+2	; 0x02
    3ab8:	88 2f       	mov	r24, r24
    3aba:	90 e0       	ldi	r25, 0x00	; 0
    3abc:	01 96       	adiw	r24, 0x01	; 1
    3abe:	88 0f       	add	r24, r24
    3ac0:	99 1f       	adc	r25, r25
    3ac2:	88 0f       	add	r24, r24
    3ac4:	99 1f       	adc	r25, r25
    3ac6:	fc 01       	movw	r30, r24
    3ac8:	e9 57       	subi	r30, 0x79	; 121
    3aca:	fe 4f       	sbci	r31, 0xFE	; 254
    3acc:	20 81       	ld	r18, Z
    3ace:	31 81       	ldd	r19, Z+1	; 0x01
    3ad0:	42 81       	ldd	r20, Z+2	; 0x02
    3ad2:	53 81       	ldd	r21, Z+3	; 0x03
    3ad4:	c8 01       	movw	r24, r16
    3ad6:	b7 01       	movw	r22, r14
    3ad8:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    3adc:	dc 01       	movw	r26, r24
    3ade:	cb 01       	movw	r24, r22
    3ae0:	9c 01       	movw	r18, r24
    3ae2:	ad 01       	movw	r20, r26
    3ae4:	c6 01       	movw	r24, r12
    3ae6:	88 0f       	add	r24, r24
    3ae8:	99 1f       	adc	r25, r25
    3aea:	88 0f       	add	r24, r24
    3aec:	99 1f       	adc	r25, r25
    3aee:	fc 01       	movw	r30, r24
    3af0:	e9 57       	subi	r30, 0x79	; 121
    3af2:	fe 4f       	sbci	r31, 0xFE	; 254
    3af4:	20 83       	st	Z, r18
    3af6:	31 83       	std	Z+1, r19	; 0x01
    3af8:	42 83       	std	Z+2, r20	; 0x02
    3afa:	53 83       	std	Z+3, r21	; 0x03
    3afc:	b1 c1       	rjmp	.+866    	; 0x3e60 <PerformAdditionAndSubtraction+0x45e>
			}
			else if (NegativeFlag && (NumbersArray[i]<NumbersArray[i+1]))
    3afe:	80 91 af 01 	lds	r24, 0x01AF
    3b02:	88 23       	and	r24, r24
    3b04:	09 f4       	brne	.+2      	; 0x3b08 <PerformAdditionAndSubtraction+0x106>
    3b06:	63 c0       	rjmp	.+198    	; 0x3bce <PerformAdditionAndSubtraction+0x1cc>
    3b08:	8a 81       	ldd	r24, Y+2	; 0x02
    3b0a:	88 2f       	mov	r24, r24
    3b0c:	90 e0       	ldi	r25, 0x00	; 0
    3b0e:	88 0f       	add	r24, r24
    3b10:	99 1f       	adc	r25, r25
    3b12:	88 0f       	add	r24, r24
    3b14:	99 1f       	adc	r25, r25
    3b16:	fc 01       	movw	r30, r24
    3b18:	e9 57       	subi	r30, 0x79	; 121
    3b1a:	fe 4f       	sbci	r31, 0xFE	; 254
    3b1c:	e0 80       	ld	r14, Z
    3b1e:	f1 80       	ldd	r15, Z+1	; 0x01
    3b20:	02 81       	ldd	r16, Z+2	; 0x02
    3b22:	13 81       	ldd	r17, Z+3	; 0x03
    3b24:	8a 81       	ldd	r24, Y+2	; 0x02
    3b26:	88 2f       	mov	r24, r24
    3b28:	90 e0       	ldi	r25, 0x00	; 0
    3b2a:	01 96       	adiw	r24, 0x01	; 1
    3b2c:	88 0f       	add	r24, r24
    3b2e:	99 1f       	adc	r25, r25
    3b30:	88 0f       	add	r24, r24
    3b32:	99 1f       	adc	r25, r25
    3b34:	fc 01       	movw	r30, r24
    3b36:	e9 57       	subi	r30, 0x79	; 121
    3b38:	fe 4f       	sbci	r31, 0xFE	; 254
    3b3a:	20 81       	ld	r18, Z
    3b3c:	31 81       	ldd	r19, Z+1	; 0x01
    3b3e:	42 81       	ldd	r20, Z+2	; 0x02
    3b40:	53 81       	ldd	r21, Z+3	; 0x03
    3b42:	1d 82       	std	Y+5, r1	; 0x05
    3b44:	c8 01       	movw	r24, r16
    3b46:	b7 01       	movw	r22, r14
    3b48:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    3b4c:	88 23       	and	r24, r24
    3b4e:	14 f4       	brge	.+4      	; 0x3b54 <PerformAdditionAndSubtraction+0x152>
    3b50:	81 e0       	ldi	r24, 0x01	; 1
    3b52:	8d 83       	std	Y+5, r24	; 0x05
    3b54:	81 e0       	ldi	r24, 0x01	; 1
    3b56:	9d 81       	ldd	r25, Y+5	; 0x05
    3b58:	89 27       	eor	r24, r25
    3b5a:	88 23       	and	r24, r24
    3b5c:	c1 f5       	brne	.+112    	; 0x3bce <PerformAdditionAndSubtraction+0x1cc>
			{
				NegativeFlag = 0;
    3b5e:	10 92 af 01 	sts	0x01AF, r1
				NumbersArray[i] = NumbersArray[i+1]-NumbersArray[i+1];
    3b62:	8a 81       	ldd	r24, Y+2	; 0x02
    3b64:	c8 2e       	mov	r12, r24
    3b66:	dd 24       	eor	r13, r13
    3b68:	8a 81       	ldd	r24, Y+2	; 0x02
    3b6a:	88 2f       	mov	r24, r24
    3b6c:	90 e0       	ldi	r25, 0x00	; 0
    3b6e:	01 96       	adiw	r24, 0x01	; 1
    3b70:	88 0f       	add	r24, r24
    3b72:	99 1f       	adc	r25, r25
    3b74:	88 0f       	add	r24, r24
    3b76:	99 1f       	adc	r25, r25
    3b78:	fc 01       	movw	r30, r24
    3b7a:	e9 57       	subi	r30, 0x79	; 121
    3b7c:	fe 4f       	sbci	r31, 0xFE	; 254
    3b7e:	e0 80       	ld	r14, Z
    3b80:	f1 80       	ldd	r15, Z+1	; 0x01
    3b82:	02 81       	ldd	r16, Z+2	; 0x02
    3b84:	13 81       	ldd	r17, Z+3	; 0x03
    3b86:	8a 81       	ldd	r24, Y+2	; 0x02
    3b88:	88 2f       	mov	r24, r24
    3b8a:	90 e0       	ldi	r25, 0x00	; 0
    3b8c:	01 96       	adiw	r24, 0x01	; 1
    3b8e:	88 0f       	add	r24, r24
    3b90:	99 1f       	adc	r25, r25
    3b92:	88 0f       	add	r24, r24
    3b94:	99 1f       	adc	r25, r25
    3b96:	fc 01       	movw	r30, r24
    3b98:	e9 57       	subi	r30, 0x79	; 121
    3b9a:	fe 4f       	sbci	r31, 0xFE	; 254
    3b9c:	20 81       	ld	r18, Z
    3b9e:	31 81       	ldd	r19, Z+1	; 0x01
    3ba0:	42 81       	ldd	r20, Z+2	; 0x02
    3ba2:	53 81       	ldd	r21, Z+3	; 0x03
    3ba4:	c8 01       	movw	r24, r16
    3ba6:	b7 01       	movw	r22, r14
    3ba8:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    3bac:	dc 01       	movw	r26, r24
    3bae:	cb 01       	movw	r24, r22
    3bb0:	9c 01       	movw	r18, r24
    3bb2:	ad 01       	movw	r20, r26
    3bb4:	c6 01       	movw	r24, r12
    3bb6:	88 0f       	add	r24, r24
    3bb8:	99 1f       	adc	r25, r25
    3bba:	88 0f       	add	r24, r24
    3bbc:	99 1f       	adc	r25, r25
    3bbe:	fc 01       	movw	r30, r24
    3bc0:	e9 57       	subi	r30, 0x79	; 121
    3bc2:	fe 4f       	sbci	r31, 0xFE	; 254
    3bc4:	20 83       	st	Z, r18
    3bc6:	31 83       	std	Z+1, r19	; 0x01
    3bc8:	42 83       	std	Z+2, r20	; 0x02
    3bca:	53 83       	std	Z+3, r21	; 0x03
    3bcc:	49 c1       	rjmp	.+658    	; 0x3e60 <PerformAdditionAndSubtraction+0x45e>
			}
			else if (!NegativeFlag)
    3bce:	80 91 af 01 	lds	r24, 0x01AF
    3bd2:	88 23       	and	r24, r24
    3bd4:	09 f0       	breq	.+2      	; 0x3bd8 <PerformAdditionAndSubtraction+0x1d6>
    3bd6:	44 c1       	rjmp	.+648    	; 0x3e60 <PerformAdditionAndSubtraction+0x45e>
			{
				NumbersArray[i] = NumbersArray[i]+NumbersArray[i+1];
    3bd8:	8a 81       	ldd	r24, Y+2	; 0x02
    3bda:	c8 2e       	mov	r12, r24
    3bdc:	dd 24       	eor	r13, r13
    3bde:	8a 81       	ldd	r24, Y+2	; 0x02
    3be0:	88 2f       	mov	r24, r24
    3be2:	90 e0       	ldi	r25, 0x00	; 0
    3be4:	88 0f       	add	r24, r24
    3be6:	99 1f       	adc	r25, r25
    3be8:	88 0f       	add	r24, r24
    3bea:	99 1f       	adc	r25, r25
    3bec:	fc 01       	movw	r30, r24
    3bee:	e9 57       	subi	r30, 0x79	; 121
    3bf0:	fe 4f       	sbci	r31, 0xFE	; 254
    3bf2:	e0 80       	ld	r14, Z
    3bf4:	f1 80       	ldd	r15, Z+1	; 0x01
    3bf6:	02 81       	ldd	r16, Z+2	; 0x02
    3bf8:	13 81       	ldd	r17, Z+3	; 0x03
    3bfa:	8a 81       	ldd	r24, Y+2	; 0x02
    3bfc:	88 2f       	mov	r24, r24
    3bfe:	90 e0       	ldi	r25, 0x00	; 0
    3c00:	01 96       	adiw	r24, 0x01	; 1
    3c02:	88 0f       	add	r24, r24
    3c04:	99 1f       	adc	r25, r25
    3c06:	88 0f       	add	r24, r24
    3c08:	99 1f       	adc	r25, r25
    3c0a:	fc 01       	movw	r30, r24
    3c0c:	e9 57       	subi	r30, 0x79	; 121
    3c0e:	fe 4f       	sbci	r31, 0xFE	; 254
    3c10:	20 81       	ld	r18, Z
    3c12:	31 81       	ldd	r19, Z+1	; 0x01
    3c14:	42 81       	ldd	r20, Z+2	; 0x02
    3c16:	53 81       	ldd	r21, Z+3	; 0x03
    3c18:	c8 01       	movw	r24, r16
    3c1a:	b7 01       	movw	r22, r14
    3c1c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    3c20:	dc 01       	movw	r26, r24
    3c22:	cb 01       	movw	r24, r22
    3c24:	9c 01       	movw	r18, r24
    3c26:	ad 01       	movw	r20, r26
    3c28:	c6 01       	movw	r24, r12
    3c2a:	88 0f       	add	r24, r24
    3c2c:	99 1f       	adc	r25, r25
    3c2e:	88 0f       	add	r24, r24
    3c30:	99 1f       	adc	r25, r25
    3c32:	fc 01       	movw	r30, r24
    3c34:	e9 57       	subi	r30, 0x79	; 121
    3c36:	fe 4f       	sbci	r31, 0xFE	; 254
    3c38:	20 83       	st	Z, r18
    3c3a:	31 83       	std	Z+1, r19	; 0x01
    3c3c:	42 83       	std	Z+2, r20	; 0x02
    3c3e:	53 83       	std	Z+3, r21	; 0x03
    3c40:	0f c1       	rjmp	.+542    	; 0x3e60 <PerformAdditionAndSubtraction+0x45e>
			}
		}
		else if (OperationsArray[i] == '-')
    3c42:	8a 81       	ldd	r24, Y+2	; 0x02
    3c44:	88 2f       	mov	r24, r24
    3c46:	90 e0       	ldi	r25, 0x00	; 0
    3c48:	fc 01       	movw	r30, r24
    3c4a:	e0 55       	subi	r30, 0x50	; 80
    3c4c:	fe 4f       	sbci	r31, 0xFE	; 254
    3c4e:	80 81       	ld	r24, Z
    3c50:	8d 32       	cpi	r24, 0x2D	; 45
    3c52:	09 f0       	breq	.+2      	; 0x3c56 <PerformAdditionAndSubtraction+0x254>
    3c54:	48 c1       	rjmp	.+656    	; 0x3ee6 <PerformAdditionAndSubtraction+0x4e4>
		{
			if(!NegativeFlag && (NumbersArray[i]>=NumbersArray[i+1]))
    3c56:	80 91 af 01 	lds	r24, 0x01AF
    3c5a:	88 23       	and	r24, r24
    3c5c:	09 f0       	breq	.+2      	; 0x3c60 <PerformAdditionAndSubtraction+0x25e>
    3c5e:	60 c0       	rjmp	.+192    	; 0x3d20 <PerformAdditionAndSubtraction+0x31e>
    3c60:	8a 81       	ldd	r24, Y+2	; 0x02
    3c62:	88 2f       	mov	r24, r24
    3c64:	90 e0       	ldi	r25, 0x00	; 0
    3c66:	88 0f       	add	r24, r24
    3c68:	99 1f       	adc	r25, r25
    3c6a:	88 0f       	add	r24, r24
    3c6c:	99 1f       	adc	r25, r25
    3c6e:	fc 01       	movw	r30, r24
    3c70:	e9 57       	subi	r30, 0x79	; 121
    3c72:	fe 4f       	sbci	r31, 0xFE	; 254
    3c74:	e0 80       	ld	r14, Z
    3c76:	f1 80       	ldd	r15, Z+1	; 0x01
    3c78:	02 81       	ldd	r16, Z+2	; 0x02
    3c7a:	13 81       	ldd	r17, Z+3	; 0x03
    3c7c:	8a 81       	ldd	r24, Y+2	; 0x02
    3c7e:	88 2f       	mov	r24, r24
    3c80:	90 e0       	ldi	r25, 0x00	; 0
    3c82:	01 96       	adiw	r24, 0x01	; 1
    3c84:	88 0f       	add	r24, r24
    3c86:	99 1f       	adc	r25, r25
    3c88:	88 0f       	add	r24, r24
    3c8a:	99 1f       	adc	r25, r25
    3c8c:	fc 01       	movw	r30, r24
    3c8e:	e9 57       	subi	r30, 0x79	; 121
    3c90:	fe 4f       	sbci	r31, 0xFE	; 254
    3c92:	20 81       	ld	r18, Z
    3c94:	31 81       	ldd	r19, Z+1	; 0x01
    3c96:	42 81       	ldd	r20, Z+2	; 0x02
    3c98:	53 81       	ldd	r21, Z+3	; 0x03
    3c9a:	1c 82       	std	Y+4, r1	; 0x04
    3c9c:	c8 01       	movw	r24, r16
    3c9e:	b7 01       	movw	r22, r14
    3ca0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__gesf2>
    3ca4:	88 23       	and	r24, r24
    3ca6:	14 f0       	brlt	.+4      	; 0x3cac <PerformAdditionAndSubtraction+0x2aa>
    3ca8:	81 e0       	ldi	r24, 0x01	; 1
    3caa:	8c 83       	std	Y+4, r24	; 0x04
    3cac:	81 e0       	ldi	r24, 0x01	; 1
    3cae:	9c 81       	ldd	r25, Y+4	; 0x04
    3cb0:	89 27       	eor	r24, r25
    3cb2:	88 23       	and	r24, r24
    3cb4:	a9 f5       	brne	.+106    	; 0x3d20 <PerformAdditionAndSubtraction+0x31e>
			{
				NumbersArray[i] = NumbersArray[i]-NumbersArray[i+1];
    3cb6:	8a 81       	ldd	r24, Y+2	; 0x02
    3cb8:	c8 2e       	mov	r12, r24
    3cba:	dd 24       	eor	r13, r13
    3cbc:	8a 81       	ldd	r24, Y+2	; 0x02
    3cbe:	88 2f       	mov	r24, r24
    3cc0:	90 e0       	ldi	r25, 0x00	; 0
    3cc2:	88 0f       	add	r24, r24
    3cc4:	99 1f       	adc	r25, r25
    3cc6:	88 0f       	add	r24, r24
    3cc8:	99 1f       	adc	r25, r25
    3cca:	fc 01       	movw	r30, r24
    3ccc:	e9 57       	subi	r30, 0x79	; 121
    3cce:	fe 4f       	sbci	r31, 0xFE	; 254
    3cd0:	e0 80       	ld	r14, Z
    3cd2:	f1 80       	ldd	r15, Z+1	; 0x01
    3cd4:	02 81       	ldd	r16, Z+2	; 0x02
    3cd6:	13 81       	ldd	r17, Z+3	; 0x03
    3cd8:	8a 81       	ldd	r24, Y+2	; 0x02
    3cda:	88 2f       	mov	r24, r24
    3cdc:	90 e0       	ldi	r25, 0x00	; 0
    3cde:	01 96       	adiw	r24, 0x01	; 1
    3ce0:	88 0f       	add	r24, r24
    3ce2:	99 1f       	adc	r25, r25
    3ce4:	88 0f       	add	r24, r24
    3ce6:	99 1f       	adc	r25, r25
    3ce8:	fc 01       	movw	r30, r24
    3cea:	e9 57       	subi	r30, 0x79	; 121
    3cec:	fe 4f       	sbci	r31, 0xFE	; 254
    3cee:	20 81       	ld	r18, Z
    3cf0:	31 81       	ldd	r19, Z+1	; 0x01
    3cf2:	42 81       	ldd	r20, Z+2	; 0x02
    3cf4:	53 81       	ldd	r21, Z+3	; 0x03
    3cf6:	c8 01       	movw	r24, r16
    3cf8:	b7 01       	movw	r22, r14
    3cfa:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    3cfe:	dc 01       	movw	r26, r24
    3d00:	cb 01       	movw	r24, r22
    3d02:	9c 01       	movw	r18, r24
    3d04:	ad 01       	movw	r20, r26
    3d06:	c6 01       	movw	r24, r12
    3d08:	88 0f       	add	r24, r24
    3d0a:	99 1f       	adc	r25, r25
    3d0c:	88 0f       	add	r24, r24
    3d0e:	99 1f       	adc	r25, r25
    3d10:	fc 01       	movw	r30, r24
    3d12:	e9 57       	subi	r30, 0x79	; 121
    3d14:	fe 4f       	sbci	r31, 0xFE	; 254
    3d16:	20 83       	st	Z, r18
    3d18:	31 83       	std	Z+1, r19	; 0x01
    3d1a:	42 83       	std	Z+2, r20	; 0x02
    3d1c:	53 83       	std	Z+3, r21	; 0x03
    3d1e:	a0 c0       	rjmp	.+320    	; 0x3e60 <PerformAdditionAndSubtraction+0x45e>
			}
			else if (!NegativeFlag &&  (NumbersArray[i]<NumbersArray[i+1]))
    3d20:	80 91 af 01 	lds	r24, 0x01AF
    3d24:	88 23       	and	r24, r24
    3d26:	09 f0       	breq	.+2      	; 0x3d2a <PerformAdditionAndSubtraction+0x328>
    3d28:	63 c0       	rjmp	.+198    	; 0x3df0 <PerformAdditionAndSubtraction+0x3ee>
    3d2a:	8a 81       	ldd	r24, Y+2	; 0x02
    3d2c:	88 2f       	mov	r24, r24
    3d2e:	90 e0       	ldi	r25, 0x00	; 0
    3d30:	88 0f       	add	r24, r24
    3d32:	99 1f       	adc	r25, r25
    3d34:	88 0f       	add	r24, r24
    3d36:	99 1f       	adc	r25, r25
    3d38:	fc 01       	movw	r30, r24
    3d3a:	e9 57       	subi	r30, 0x79	; 121
    3d3c:	fe 4f       	sbci	r31, 0xFE	; 254
    3d3e:	e0 80       	ld	r14, Z
    3d40:	f1 80       	ldd	r15, Z+1	; 0x01
    3d42:	02 81       	ldd	r16, Z+2	; 0x02
    3d44:	13 81       	ldd	r17, Z+3	; 0x03
    3d46:	8a 81       	ldd	r24, Y+2	; 0x02
    3d48:	88 2f       	mov	r24, r24
    3d4a:	90 e0       	ldi	r25, 0x00	; 0
    3d4c:	01 96       	adiw	r24, 0x01	; 1
    3d4e:	88 0f       	add	r24, r24
    3d50:	99 1f       	adc	r25, r25
    3d52:	88 0f       	add	r24, r24
    3d54:	99 1f       	adc	r25, r25
    3d56:	fc 01       	movw	r30, r24
    3d58:	e9 57       	subi	r30, 0x79	; 121
    3d5a:	fe 4f       	sbci	r31, 0xFE	; 254
    3d5c:	20 81       	ld	r18, Z
    3d5e:	31 81       	ldd	r19, Z+1	; 0x01
    3d60:	42 81       	ldd	r20, Z+2	; 0x02
    3d62:	53 81       	ldd	r21, Z+3	; 0x03
    3d64:	1b 82       	std	Y+3, r1	; 0x03
    3d66:	c8 01       	movw	r24, r16
    3d68:	b7 01       	movw	r22, r14
    3d6a:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    3d6e:	88 23       	and	r24, r24
    3d70:	14 f4       	brge	.+4      	; 0x3d76 <PerformAdditionAndSubtraction+0x374>
    3d72:	81 e0       	ldi	r24, 0x01	; 1
    3d74:	8b 83       	std	Y+3, r24	; 0x03
    3d76:	81 e0       	ldi	r24, 0x01	; 1
    3d78:	9b 81       	ldd	r25, Y+3	; 0x03
    3d7a:	89 27       	eor	r24, r25
    3d7c:	88 23       	and	r24, r24
    3d7e:	c1 f5       	brne	.+112    	; 0x3df0 <PerformAdditionAndSubtraction+0x3ee>
			{
				NegativeFlag = 1;
    3d80:	81 e0       	ldi	r24, 0x01	; 1
    3d82:	80 93 af 01 	sts	0x01AF, r24
				NumbersArray[i] = NumbersArray[i+1]-NumbersArray[i];
    3d86:	8a 81       	ldd	r24, Y+2	; 0x02
    3d88:	c8 2e       	mov	r12, r24
    3d8a:	dd 24       	eor	r13, r13
    3d8c:	8a 81       	ldd	r24, Y+2	; 0x02
    3d8e:	88 2f       	mov	r24, r24
    3d90:	90 e0       	ldi	r25, 0x00	; 0
    3d92:	01 96       	adiw	r24, 0x01	; 1
    3d94:	88 0f       	add	r24, r24
    3d96:	99 1f       	adc	r25, r25
    3d98:	88 0f       	add	r24, r24
    3d9a:	99 1f       	adc	r25, r25
    3d9c:	fc 01       	movw	r30, r24
    3d9e:	e9 57       	subi	r30, 0x79	; 121
    3da0:	fe 4f       	sbci	r31, 0xFE	; 254
    3da2:	e0 80       	ld	r14, Z
    3da4:	f1 80       	ldd	r15, Z+1	; 0x01
    3da6:	02 81       	ldd	r16, Z+2	; 0x02
    3da8:	13 81       	ldd	r17, Z+3	; 0x03
    3daa:	8a 81       	ldd	r24, Y+2	; 0x02
    3dac:	88 2f       	mov	r24, r24
    3dae:	90 e0       	ldi	r25, 0x00	; 0
    3db0:	88 0f       	add	r24, r24
    3db2:	99 1f       	adc	r25, r25
    3db4:	88 0f       	add	r24, r24
    3db6:	99 1f       	adc	r25, r25
    3db8:	fc 01       	movw	r30, r24
    3dba:	e9 57       	subi	r30, 0x79	; 121
    3dbc:	fe 4f       	sbci	r31, 0xFE	; 254
    3dbe:	20 81       	ld	r18, Z
    3dc0:	31 81       	ldd	r19, Z+1	; 0x01
    3dc2:	42 81       	ldd	r20, Z+2	; 0x02
    3dc4:	53 81       	ldd	r21, Z+3	; 0x03
    3dc6:	c8 01       	movw	r24, r16
    3dc8:	b7 01       	movw	r22, r14
    3dca:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    3dce:	dc 01       	movw	r26, r24
    3dd0:	cb 01       	movw	r24, r22
    3dd2:	9c 01       	movw	r18, r24
    3dd4:	ad 01       	movw	r20, r26
    3dd6:	c6 01       	movw	r24, r12
    3dd8:	88 0f       	add	r24, r24
    3dda:	99 1f       	adc	r25, r25
    3ddc:	88 0f       	add	r24, r24
    3dde:	99 1f       	adc	r25, r25
    3de0:	fc 01       	movw	r30, r24
    3de2:	e9 57       	subi	r30, 0x79	; 121
    3de4:	fe 4f       	sbci	r31, 0xFE	; 254
    3de6:	20 83       	st	Z, r18
    3de8:	31 83       	std	Z+1, r19	; 0x01
    3dea:	42 83       	std	Z+2, r20	; 0x02
    3dec:	53 83       	std	Z+3, r21	; 0x03
    3dee:	38 c0       	rjmp	.+112    	; 0x3e60 <PerformAdditionAndSubtraction+0x45e>
			}
			else if(NegativeFlag)
    3df0:	80 91 af 01 	lds	r24, 0x01AF
    3df4:	88 23       	and	r24, r24
    3df6:	a1 f1       	breq	.+104    	; 0x3e60 <PerformAdditionAndSubtraction+0x45e>
			{
				NumbersArray[i] = NumbersArray[i]+NumbersArray[i+1];
    3df8:	8a 81       	ldd	r24, Y+2	; 0x02
    3dfa:	c8 2e       	mov	r12, r24
    3dfc:	dd 24       	eor	r13, r13
    3dfe:	8a 81       	ldd	r24, Y+2	; 0x02
    3e00:	88 2f       	mov	r24, r24
    3e02:	90 e0       	ldi	r25, 0x00	; 0
    3e04:	88 0f       	add	r24, r24
    3e06:	99 1f       	adc	r25, r25
    3e08:	88 0f       	add	r24, r24
    3e0a:	99 1f       	adc	r25, r25
    3e0c:	fc 01       	movw	r30, r24
    3e0e:	e9 57       	subi	r30, 0x79	; 121
    3e10:	fe 4f       	sbci	r31, 0xFE	; 254
    3e12:	e0 80       	ld	r14, Z
    3e14:	f1 80       	ldd	r15, Z+1	; 0x01
    3e16:	02 81       	ldd	r16, Z+2	; 0x02
    3e18:	13 81       	ldd	r17, Z+3	; 0x03
    3e1a:	8a 81       	ldd	r24, Y+2	; 0x02
    3e1c:	88 2f       	mov	r24, r24
    3e1e:	90 e0       	ldi	r25, 0x00	; 0
    3e20:	01 96       	adiw	r24, 0x01	; 1
    3e22:	88 0f       	add	r24, r24
    3e24:	99 1f       	adc	r25, r25
    3e26:	88 0f       	add	r24, r24
    3e28:	99 1f       	adc	r25, r25
    3e2a:	fc 01       	movw	r30, r24
    3e2c:	e9 57       	subi	r30, 0x79	; 121
    3e2e:	fe 4f       	sbci	r31, 0xFE	; 254
    3e30:	20 81       	ld	r18, Z
    3e32:	31 81       	ldd	r19, Z+1	; 0x01
    3e34:	42 81       	ldd	r20, Z+2	; 0x02
    3e36:	53 81       	ldd	r21, Z+3	; 0x03
    3e38:	c8 01       	movw	r24, r16
    3e3a:	b7 01       	movw	r22, r14
    3e3c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    3e40:	dc 01       	movw	r26, r24
    3e42:	cb 01       	movw	r24, r22
    3e44:	9c 01       	movw	r18, r24
    3e46:	ad 01       	movw	r20, r26
    3e48:	c6 01       	movw	r24, r12
    3e4a:	88 0f       	add	r24, r24
    3e4c:	99 1f       	adc	r25, r25
    3e4e:	88 0f       	add	r24, r24
    3e50:	99 1f       	adc	r25, r25
    3e52:	fc 01       	movw	r30, r24
    3e54:	e9 57       	subi	r30, 0x79	; 121
    3e56:	fe 4f       	sbci	r31, 0xFE	; 254
    3e58:	20 83       	st	Z, r18
    3e5a:	31 83       	std	Z+1, r19	; 0x01
    3e5c:	42 83       	std	Z+2, r20	; 0x02
    3e5e:	53 83       	std	Z+3, r21	; 0x03
		else
		{
			continue;
		}
		//REARRANGE
		REARRANGE_ARRAYS(i);
    3e60:	8a 81       	ldd	r24, Y+2	; 0x02
    3e62:	8f 5f       	subi	r24, 0xFF	; 255
    3e64:	89 83       	std	Y+1, r24	; 0x01
    3e66:	32 c0       	rjmp	.+100    	; 0x3ecc <PerformAdditionAndSubtraction+0x4ca>
    3e68:	89 81       	ldd	r24, Y+1	; 0x01
    3e6a:	88 2f       	mov	r24, r24
    3e6c:	90 e0       	ldi	r25, 0x00	; 0
    3e6e:	9c 01       	movw	r18, r24
    3e70:	21 50       	subi	r18, 0x01	; 1
    3e72:	30 40       	sbci	r19, 0x00	; 0
    3e74:	89 81       	ldd	r24, Y+1	; 0x01
    3e76:	88 2f       	mov	r24, r24
    3e78:	90 e0       	ldi	r25, 0x00	; 0
    3e7a:	fc 01       	movw	r30, r24
    3e7c:	e0 55       	subi	r30, 0x50	; 80
    3e7e:	fe 4f       	sbci	r31, 0xFE	; 254
    3e80:	80 81       	ld	r24, Z
    3e82:	f9 01       	movw	r30, r18
    3e84:	e0 55       	subi	r30, 0x50	; 80
    3e86:	fe 4f       	sbci	r31, 0xFE	; 254
    3e88:	80 83       	st	Z, r24
    3e8a:	89 81       	ldd	r24, Y+1	; 0x01
    3e8c:	68 2f       	mov	r22, r24
    3e8e:	70 e0       	ldi	r23, 0x00	; 0
    3e90:	89 81       	ldd	r24, Y+1	; 0x01
    3e92:	88 2f       	mov	r24, r24
    3e94:	90 e0       	ldi	r25, 0x00	; 0
    3e96:	01 96       	adiw	r24, 0x01	; 1
    3e98:	88 0f       	add	r24, r24
    3e9a:	99 1f       	adc	r25, r25
    3e9c:	88 0f       	add	r24, r24
    3e9e:	99 1f       	adc	r25, r25
    3ea0:	fc 01       	movw	r30, r24
    3ea2:	e9 57       	subi	r30, 0x79	; 121
    3ea4:	fe 4f       	sbci	r31, 0xFE	; 254
    3ea6:	20 81       	ld	r18, Z
    3ea8:	31 81       	ldd	r19, Z+1	; 0x01
    3eaa:	42 81       	ldd	r20, Z+2	; 0x02
    3eac:	53 81       	ldd	r21, Z+3	; 0x03
    3eae:	cb 01       	movw	r24, r22
    3eb0:	88 0f       	add	r24, r24
    3eb2:	99 1f       	adc	r25, r25
    3eb4:	88 0f       	add	r24, r24
    3eb6:	99 1f       	adc	r25, r25
    3eb8:	fc 01       	movw	r30, r24
    3eba:	e9 57       	subi	r30, 0x79	; 121
    3ebc:	fe 4f       	sbci	r31, 0xFE	; 254
    3ebe:	20 83       	st	Z, r18
    3ec0:	31 83       	std	Z+1, r19	; 0x01
    3ec2:	42 83       	std	Z+2, r20	; 0x02
    3ec4:	53 83       	std	Z+3, r21	; 0x03
    3ec6:	89 81       	ldd	r24, Y+1	; 0x01
    3ec8:	8f 5f       	subi	r24, 0xFF	; 255
    3eca:	89 83       	std	Y+1, r24	; 0x01
    3ecc:	90 91 ba 01 	lds	r25, 0x01BA
    3ed0:	89 81       	ldd	r24, Y+1	; 0x01
    3ed2:	89 17       	cp	r24, r25
    3ed4:	48 f2       	brcs	.-110    	; 0x3e68 <PerformAdditionAndSubtraction+0x466>
    3ed6:	80 91 ba 01 	lds	r24, 0x01BA
    3eda:	81 50       	subi	r24, 0x01	; 1
    3edc:	80 93 ba 01 	sts	0x01BA, r24
		i--;
    3ee0:	8a 81       	ldd	r24, Y+2	; 0x02
    3ee2:	81 50       	subi	r24, 0x01	; 1
    3ee4:	8a 83       	std	Y+2, r24	; 0x02
	}
}

void PerformAdditionAndSubtraction()
{
	for(u8 i =0; i<Counter; i++)
    3ee6:	8a 81       	ldd	r24, Y+2	; 0x02
    3ee8:	8f 5f       	subi	r24, 0xFF	; 255
    3eea:	8a 83       	std	Y+2, r24	; 0x02
    3eec:	90 91 ba 01 	lds	r25, 0x01BA
    3ef0:	8a 81       	ldd	r24, Y+2	; 0x02
    3ef2:	89 17       	cp	r24, r25
    3ef4:	08 f4       	brcc	.+2      	; 0x3ef8 <PerformAdditionAndSubtraction+0x4f6>
    3ef6:	94 cd       	rjmp	.-1240   	; 0x3a20 <PerformAdditionAndSubtraction+0x1e>
		}
		//REARRANGE
		REARRANGE_ARRAYS(i);
		i--;
	}
}
    3ef8:	26 96       	adiw	r28, 0x06	; 6
    3efa:	0f b6       	in	r0, 0x3f	; 63
    3efc:	f8 94       	cli
    3efe:	de bf       	out	0x3e, r29	; 62
    3f00:	0f be       	out	0x3f, r0	; 63
    3f02:	cd bf       	out	0x3d, r28	; 61
    3f04:	cf 91       	pop	r28
    3f06:	df 91       	pop	r29
    3f08:	1f 91       	pop	r17
    3f0a:	0f 91       	pop	r16
    3f0c:	ff 90       	pop	r15
    3f0e:	ef 90       	pop	r14
    3f10:	df 90       	pop	r13
    3f12:	cf 90       	pop	r12
    3f14:	08 95       	ret

00003f16 <__udivmodhi4>:
    3f16:	aa 1b       	sub	r26, r26
    3f18:	bb 1b       	sub	r27, r27
    3f1a:	51 e1       	ldi	r21, 0x11	; 17
    3f1c:	07 c0       	rjmp	.+14     	; 0x3f2c <__udivmodhi4_ep>

00003f1e <__udivmodhi4_loop>:
    3f1e:	aa 1f       	adc	r26, r26
    3f20:	bb 1f       	adc	r27, r27
    3f22:	a6 17       	cp	r26, r22
    3f24:	b7 07       	cpc	r27, r23
    3f26:	10 f0       	brcs	.+4      	; 0x3f2c <__udivmodhi4_ep>
    3f28:	a6 1b       	sub	r26, r22
    3f2a:	b7 0b       	sbc	r27, r23

00003f2c <__udivmodhi4_ep>:
    3f2c:	88 1f       	adc	r24, r24
    3f2e:	99 1f       	adc	r25, r25
    3f30:	5a 95       	dec	r21
    3f32:	a9 f7       	brne	.-22     	; 0x3f1e <__udivmodhi4_loop>
    3f34:	80 95       	com	r24
    3f36:	90 95       	com	r25
    3f38:	bc 01       	movw	r22, r24
    3f3a:	cd 01       	movw	r24, r26
    3f3c:	08 95       	ret

00003f3e <__udivmodsi4>:
    3f3e:	a1 e2       	ldi	r26, 0x21	; 33
    3f40:	1a 2e       	mov	r1, r26
    3f42:	aa 1b       	sub	r26, r26
    3f44:	bb 1b       	sub	r27, r27
    3f46:	fd 01       	movw	r30, r26
    3f48:	0d c0       	rjmp	.+26     	; 0x3f64 <__udivmodsi4_ep>

00003f4a <__udivmodsi4_loop>:
    3f4a:	aa 1f       	adc	r26, r26
    3f4c:	bb 1f       	adc	r27, r27
    3f4e:	ee 1f       	adc	r30, r30
    3f50:	ff 1f       	adc	r31, r31
    3f52:	a2 17       	cp	r26, r18
    3f54:	b3 07       	cpc	r27, r19
    3f56:	e4 07       	cpc	r30, r20
    3f58:	f5 07       	cpc	r31, r21
    3f5a:	20 f0       	brcs	.+8      	; 0x3f64 <__udivmodsi4_ep>
    3f5c:	a2 1b       	sub	r26, r18
    3f5e:	b3 0b       	sbc	r27, r19
    3f60:	e4 0b       	sbc	r30, r20
    3f62:	f5 0b       	sbc	r31, r21

00003f64 <__udivmodsi4_ep>:
    3f64:	66 1f       	adc	r22, r22
    3f66:	77 1f       	adc	r23, r23
    3f68:	88 1f       	adc	r24, r24
    3f6a:	99 1f       	adc	r25, r25
    3f6c:	1a 94       	dec	r1
    3f6e:	69 f7       	brne	.-38     	; 0x3f4a <__udivmodsi4_loop>
    3f70:	60 95       	com	r22
    3f72:	70 95       	com	r23
    3f74:	80 95       	com	r24
    3f76:	90 95       	com	r25
    3f78:	9b 01       	movw	r18, r22
    3f7a:	ac 01       	movw	r20, r24
    3f7c:	bd 01       	movw	r22, r26
    3f7e:	cf 01       	movw	r24, r30
    3f80:	08 95       	ret

00003f82 <__prologue_saves__>:
    3f82:	2f 92       	push	r2
    3f84:	3f 92       	push	r3
    3f86:	4f 92       	push	r4
    3f88:	5f 92       	push	r5
    3f8a:	6f 92       	push	r6
    3f8c:	7f 92       	push	r7
    3f8e:	8f 92       	push	r8
    3f90:	9f 92       	push	r9
    3f92:	af 92       	push	r10
    3f94:	bf 92       	push	r11
    3f96:	cf 92       	push	r12
    3f98:	df 92       	push	r13
    3f9a:	ef 92       	push	r14
    3f9c:	ff 92       	push	r15
    3f9e:	0f 93       	push	r16
    3fa0:	1f 93       	push	r17
    3fa2:	cf 93       	push	r28
    3fa4:	df 93       	push	r29
    3fa6:	cd b7       	in	r28, 0x3d	; 61
    3fa8:	de b7       	in	r29, 0x3e	; 62
    3faa:	ca 1b       	sub	r28, r26
    3fac:	db 0b       	sbc	r29, r27
    3fae:	0f b6       	in	r0, 0x3f	; 63
    3fb0:	f8 94       	cli
    3fb2:	de bf       	out	0x3e, r29	; 62
    3fb4:	0f be       	out	0x3f, r0	; 63
    3fb6:	cd bf       	out	0x3d, r28	; 61
    3fb8:	09 94       	ijmp

00003fba <__epilogue_restores__>:
    3fba:	2a 88       	ldd	r2, Y+18	; 0x12
    3fbc:	39 88       	ldd	r3, Y+17	; 0x11
    3fbe:	48 88       	ldd	r4, Y+16	; 0x10
    3fc0:	5f 84       	ldd	r5, Y+15	; 0x0f
    3fc2:	6e 84       	ldd	r6, Y+14	; 0x0e
    3fc4:	7d 84       	ldd	r7, Y+13	; 0x0d
    3fc6:	8c 84       	ldd	r8, Y+12	; 0x0c
    3fc8:	9b 84       	ldd	r9, Y+11	; 0x0b
    3fca:	aa 84       	ldd	r10, Y+10	; 0x0a
    3fcc:	b9 84       	ldd	r11, Y+9	; 0x09
    3fce:	c8 84       	ldd	r12, Y+8	; 0x08
    3fd0:	df 80       	ldd	r13, Y+7	; 0x07
    3fd2:	ee 80       	ldd	r14, Y+6	; 0x06
    3fd4:	fd 80       	ldd	r15, Y+5	; 0x05
    3fd6:	0c 81       	ldd	r16, Y+4	; 0x04
    3fd8:	1b 81       	ldd	r17, Y+3	; 0x03
    3fda:	aa 81       	ldd	r26, Y+2	; 0x02
    3fdc:	b9 81       	ldd	r27, Y+1	; 0x01
    3fde:	ce 0f       	add	r28, r30
    3fe0:	d1 1d       	adc	r29, r1
    3fe2:	0f b6       	in	r0, 0x3f	; 63
    3fe4:	f8 94       	cli
    3fe6:	de bf       	out	0x3e, r29	; 62
    3fe8:	0f be       	out	0x3f, r0	; 63
    3fea:	cd bf       	out	0x3d, r28	; 61
    3fec:	ed 01       	movw	r28, r26
    3fee:	08 95       	ret

00003ff0 <_exit>:
    3ff0:	f8 94       	cli

00003ff2 <__stop_program>:
    3ff2:	ff cf       	rjmp	.-2      	; 0x3ff2 <__stop_program>
